@model EditTempleateModel
@using ALT.VO.loggal;
@{
    if (SessionHelper.LoginInfo.MEMBER == null || SessionHelper.LoginInfo.MEMBER.MEMBER_CODE == null)
    {
        Layout = "~/Views/Shared/_Layout_blank.cshtml";
        ViewBag.Title = Global.ConfigInfo.ProjectTitle + " 회원가입";
    }
    else
    {
        ViewBag.Title = "회원등록";
    }

    string userid = ViewBag.userId ?? "";
}


@section scripts{
    <script type="text/javascript">
        var userid = "@userid";
        $(document).ready(function () {

            validationinit();
            $(".ui.form").submit(function (event) {

                if ($(".ui.error.message").css("display") == "none") { doSave(); }

                event.preventDefault();

            });
            if(userid !="")  USER_ID_Chk();
            ComponentInit();
        })

        function ComponentInit() {


            $.datetimepicker.setLocale('kr');

            $('#BIRTH').datetimepicker({
                timepicker: false,
                format: 'Y.m.d'
            });
            Input.TextBox.onlyNumber("#BUSI_REG_NUMBER");


            $("#USER_ID").blur(function () {
                USER_ID_Chk();
            });

            Input.TextBox.onlyNumber("#SHARE_AUTH_NUMBER");
    
        }
        
        var objmember = null;
        //// 아이디 중복 체크
        function USER_ID_Chk() {
            if ($("#USER_ID").val() == "") {
                return;
            }

            var param = new Object();
            param.USER_ID = $("#USER_ID").val();
            param = JSON.stringify(param);

            ajax.GetAjax("/account/GetMemberList/", param, "json", function (result) {

                if (result.list.length == 0) {
                    //$('#USER_ID').popup('hide');
                    $('#USER_ID').popup('remove');
                } else {
                    objmember = result.list[0];
                    
                    if (result.list[0].IS_EMPLOYEE == false) {
                        

                        passwordConfirmPCheck();
                        
                       // $('#USER_ID').popup('show');
                       // $("#USER_ID").parent().addClass("error");
                       // $("#USER_ID").focus(); $("#USER_ID").select();
                    }
                    else {
                         $("#USER_ID").popup({
                            title: '아이디 확인',
                            content: '등록되어있는 아이디가 있습니다.'
                         });
                        $('#USER_ID').popup('show');
                        $('#USER_ID').popup('show');
                        $("#USER_ID").parent().addClass("error");
                        $("#USER_ID").focus(); $("#USER_ID").select();
                    }
                    return;
                }
            });
        }
        function passwordConfirmPCallback(bSet) {
            if (bSet) {
                $("#USER_NAME").val(objmember.USER_NAME);
                $("#PHONE").val(objmember.PHONE);
                $("#MOBILE").val(objmember.MOBILE);
                $("#BIRTH").val(objmember.BIRTH);
                $("#ADDRESS1").val(objmember.ADDRESS1);
                $("#ADDRESS2").val(objmember.ADDRESS2);
                $("#ZIP_CODE").val(objmember.ZIP_CODE);
                SemanticUI.CheckBox.SetVal("GENDER", objmember.GENDER);
            }
            else {
                SemanticUI.Form.Clear();
                objmember = null;
            }
        }
        function passwordConfirmPCheck() {
            $.MessageBox({
                buttonDone: "예",
                buttonFail: "아니오",
                message: "온라인회원으로 등록되어있습니다.\n통합회원으로 등록하시겠습니까?"
            }).done(function () {
                 passwordConfirmpOpen();
            }).fail(function () {
                $("#USER_ID").focus();
                $("#USER_ID").val("");
            });

        }

        //// 체크
        function validationinit() {

            $('.ui.form').form({
                on: 'change',
                focusInvalid: true,
                fields: {
                    USER_ID: {
                        identifier: 'USER_ID',
                        rules: [
                          {
                              type: 'empty',
                              prompt: '아이디를 입력하여 주시기 바랍니다.' // Please enter a first name
                          },
                           {
                               type: 'email',
                               prompt: '아이디가 이메일형식에 맞지 않습니다.' // Please enter a first name
                           }
                        ]
                    },
                    USER_NAME: {
                        identifier: 'USER_NAME',
                        rules: [
                          {
                              type: 'empty',
                              prompt: '사용자이름을 입력하여 주시기 바랍니다.' // Please enter a first name
                          }
                        ]
                    }
                    ,PASSWORD: {
                        identifier: 'PASSWORD',
                        rules: [
                            {
                                type: 'empty',
                                prompt: '비밀번호를 입력하여 주시기 바랍니다'
                            }
                        ]
                    },
                    PASSWORD_CONFIRM: {
                        identifier: 'PASSWORD_CONFIRM',
                        rules: [
                            {
                                type: 'match[PASSWORD]',
                                prompt: '입력하신 비밀번호와 다릅니다.'
                            }
                        ]
                    },SHARE_AUTH_NUMBER:{
                        identifier: 'SHARE_AUTH_NUMBER',
                        rules: [
                            {
                                type: 'minLength[2]',
                                prompt: '공유인증번호 숫자 2자리를 입력해 주시기 바랍니다.'
                            }
                        ]
                        }
                }, onFailure: function (event, fields) {

                    //실패후 첫번재 에러 태그에 포커스
                    SemanticUI.Form.Invalidation.ErrorFocus();
                }, onInvalid: function (event) {
                   //
                    //SemanticUI.Form.addErrorMessage(event);
                }
            });
        }

        var _oriAddress = "";
        function MEMBER_addressCallBack(data) {

            _oriAddress = data.sido + " " + data.sigungu + " " + data.bname;
            var arrAddress = data.address.split(' ');

            var address1 = "";
            for (var i = 0; i < arrAddress.length; i++) {
                if (i > 0) address1 += " ";
                address1 += arrAddress[i];

                if (i > 1 && arrAddress[i].charAt(arrAddress[i].length - 1) == "면") {
                    _oriAddress = address1;
                    break;
                }
            }

            if (data.longitude == undefined) {


                DaumApi.Map.addr2coord(data.address, function (result) {
                    $("#LATITUDE").val(result.lat);
                    $("#LONGITUDE").val(result.lng);
                });
            }
        }
        
        function doSave() {
            var params = BaseCommon.FormInfo.serializeJson(".ui.form");
            params.BIRTH = moment(params.BIRTH).format("YYYYMMDD");
            params.ZIP_CODE = $("#MEMBER_POST_CODE").val();
            params.ADDRESS1 = $("#MEMBER_ADDRESS1").val();
            params.ADDRESS2 = $("#MEMBER_ADDRESS2").val();

          
            params.COMPANY_NAME = $.trim(params.COMPANY_NAME);
            params = JSON.stringify(params);
    
           //
            ajax.GetAjax("/account/MemberJoinSave/", params, "json", function (result) {
                if (result.ERROR_MESSAGE != "") {
                    $.MessageBox(result.ERROR_MESSAGE).done(function () {
                        if (result.FOCUS_TAG_ID == "PASSWORD") {
                            $("#PASSWORD_CONFIRM").val("");
                        }
                        $("#" + result.FOCUS_TAG_ID).val("");
                        $("#" + result.FOCUS_TAG_ID).focus();

                    });

                }
                else {
                    var url = "@((SessionHelper.LoginInfo.MEMBER == null || SessionHelper.LoginInfo.MEMBER.MEMBER_CODE == null) ? "/home/login" : "/employee/memberlist")";
                    var frm = Input.inputForm.makeForm(url);
                    Input.inputForm.AddData("ID", $("#USER_ID").val(), frm);

                    frm.submit();
                }
            });
        }
        /*function COMPANY_TYPE2_Change(val) {
            if (val == "7") {
                $("#COMPANY_NAME").closest("td").hide();
                $("#COMPANY_NAME").closest("td").prev().hide();
                $(".tdCompColspan").attr("colspan", 3);
            }
            else {
                $("#COMPANY_NAME").closest("td").show();
                $("#COMPANY_NAME").closest("td").prev().show();
                $(".tdCompColspan").attr("colspan", 1);
            }
        }*/
    </script>
}
<style>
   
    .ui.vertical.stripe.segment{
        max-width:900px;
        margin:auto;
        margin-top:50px;
    }

    @@media only screen and (max-width: 767px) {
        .ui.table td.title .ui.header {
            min-width: 100px;
            text-align: right;
        }
    }
    .ui.vertical.segment {
        border-bottom:0px;
    }
    .content
    {
        margin-top:0.5em;
    }
    .ui.table td.tabletitle {
        
        /*border: 1.2px solid #d5d0d0!important;*/
        /*border-bottom: 2px solid #6d6d6d !important;*/

        max-height: 2.8em;
        min-width: 100px;
        max-width: 180px;
        
        background-color: #d5d0d0;
        height:3.5em;
        padding:inherit;
        padding-left:1em;
        border-bottom: 2px solid #6d6d6d !important;
    }

   

    .ui.celled.table {
      
        border-collapse: separate;
        border-radius: 0.8em;
        -moz-border-radius: 0.8em;
    }


    .ui.table td .titleintable {
          font-family: 'Nanum Gothic', sans-serif,Lato,'Helvetica Neue',Arial,Helvetica,sans-serif;
;
          font-size:1.5rem;
          font-weight:700;
    
    }
    .ui.table tr:first-child td.tabletitle:first-child {
        border-top-left-radius : 0.8em;
        border-top-right-radius : 0.8em;
    }
    .ui.table tr:last-child td.title:first-child {
        border-bottom-left-radius : 0.8em;
        border-bottom-right-radius : 0.8em;
    }
</style>
<div class="ui vertical stripe segment">
    <form class="ui form" onSubmit="return false;" action="/Base/FileUpload" data-ajax="true" data-ajax-mode="replace" data-ajax-update="#dc_goal_placeholder" enctype="multipart/form-data" id="frmUpload" method="post">
        <center class="projecttitle">@ViewBag.Title </center>
        
        <div class="ui stackable grid  fields" style="margin-top:1em;">
            <div class="one column row">
                <div class="column">
                    <table class="ui celled table">
                        <tbody>
                            <tr>
                                <td class="tabletitle" colspan="4"> @Html.Semantic_TITLE_INTABLE("기본정보") </td>
                            </tr>
                            <tr style="display:none!important">
                                <td class="title">
                                    @Html.Semantic_TITLE2("사용자구분", true)
                                </td>
                                <td colspan="3" class="content">
                                    @Html.CommonCombo("USER_TYPE", new T_COMMON_COND { MAIN_CODE = "U001" }, "2")
                                </td>
                            </tr>
                            <tr>
                                <td class="title">
                                    @Html.Semantic_TITLE2("아이디", true)
                                </td>
                                <td class="content">
                                    <input style="display:none" aria-hidden="true">
                                    @Html.Semantic_TextBox("USER_ID", (string)ViewBag.userId, SemanticUIHelper.Size.mini, new { @placeholder = "이메일을 등록하세요", @class = "size250", @autocomplete = "off" })
                                </td>
                                <td class="title">
                                    @Html.Semantic_TITLE2("이름", true)
                                </td>
                                <td class="content">

                                    @Html.Semantic_TextBox("USER_NAME", "", SemanticUIHelper.Size.mini, new { @placeholder = "이름을 등록하세요", @class = "size250", @autocomplete = "off" })
                                </td>
                            </tr>
                            <tr>
                                <td class="title">
                                    @Html.Semantic_TITLE2("비밀번호", true)
                                </td>
                                <td class="content">
                                    @Html.Semantic_TextBox("PASSWORD", "", SemanticUIHelper.Size.mini, new { @placeholder = "비밀번호(6자리이상)를 입력하세요", @type = "password", @class = "size250 dataclear", @autocomplete = "off" })
                                </td>
                                <td class="title">
                                    @Html.Semantic_TITLE2("비밀번호확인", true)
                                </td>
                                <td class="content">
                                    @Html.Semantic_TextBox("PASSWORD_CONFIRM", "", SemanticUIHelper.Size.mini, new { @placeholder = "비밀번호(6자리이상)를 입력하세요", @type = "password", @class = "size250" })
                                </td>


                            </tr>
                            <tr>

                                <td class="title">
                                    @Html.Semantic_TITLE2("생년월일")
                                </td>
                                <td class="content">
                                    <div class="ui mini input ">

                                        @Html.Semantic_TextBox("BIRTH", "", SemanticUIHelper.Size.mini, new { @placeholder = "생년월일(클릭)", @style = "text-align:center;" })

                                    </div>
                                </td>
                                <td class="title">
                                    @Html.Semantic_TITLE2("성별")
                                </td>
                                <td class="content tdCompColspan" colspan="3">
                                    @{
                                        List<SelectListItem> genderList = new List<SelectListItem>();
                                        genderList.Add(new SelectListItem { Value = "0", Text = "남자" });
                                        genderList.Add(new SelectListItem { Value = "1", Text = "여자" });
                                    }
                                    @Html.Semantic_YesOrNo("GENDER", genderList, SemanticUIHelper.Size.mini, "0")
                                </td>
                            </tr>
               
                            <tr>
                                <td class="tabletitle" colspan="4">@Html.Semantic_TITLE_INTABLE("업체정보")</td>
                            </tr>
                            <tr>
                                <td class="title ">@Html.Semantic_TITLE2("기업명")</td>
                                <td class="content ">@Html.TextBox("COMPANY_NAME", "", new { @placeholder = "기업명을 입력하세요" })</td>
                                <td class="title">
                                    @Html.Semantic_TITLE2("사업자유형")
                                </td>
                                <td class="content">
                                    @{
                                        List<SelectListItem> busiTypeList = new List<SelectListItem>();
                                        busiTypeList.Add(new SelectListItem { Value = "7", Text = "개인" });
                                        busiTypeList.Add(new SelectListItem { Value = "8", Text = "기업" });
                                    }
                                    @Html.Hidden("COMPANY_TYPE", "3")
                                    @Html.Semantic_YesOrNo("COMPANY_TYPE2", busiTypeList, SemanticUIHelper.Size.mini)
                                </td>
                              
                            </tr>
                            <tr>

                                <td class="title">
                                    @Html.Semantic_TITLE2("전화번호")
                                </td>
                                <td class="content">
                                    @Html.Semantic_TextBox("PHONE", "", SemanticUIHelper.Size.mini, new { @placeholder = "전화번호를 입력하세요", @class = "size250" })
                                </td>
                                <td class="title">
                                    @Html.Semantic_TITLE2("사업자등록번호")
                                </td>
                                <td class="content">
                                    @Html.Semantic_TextBox("BUSI_REG_NUMBER", "", SemanticUIHelper.Size.mini, new { @placeholder = "사업자등록번호(-제외) 입력하세요", @class = "size250", @maxlength = "10" })
                                </td>

                                <td class="title hide">
                                    @Html.Semantic_TITLE2("공유인증번호", true)
                                </td>
                                <td class="content hide">
                                    @Html.Semantic_TextBox("SHARE_AUTH_NUMBER", "00", new { @pattern = "\\d*", @placeholder = "2자리숫자", @maxlength = "2", @class = "size80" })
                                </td>
                            </tr>
                            <tr>
                                <td class="title address" rowspan="3">
                                    @Html.Semantic_TITLE2("주소")
                                </td>
                                <td class="content address" rowspan="3" colspan="3">
                                    @Html.EditorFor(model => model.Kakao_address, new { option = new DaumAddressOption { ID = "MEMBER", POST_CODE = "", ADDRESS1 = "", ADDRESS2 = "" } })
                                </td>
                            </tr>

                        </tbody>
                    </table>

                </div>
            </div>
            <div class="one column row">
                <div class="column buttons">
                    @{ 
                        if (SessionHelper.LoginInfo.MEMBER == null || SessionHelper.LoginInfo.MEMBER.MEMBER_CODE == null)
                        {
                    @:<button type="button" class="ui  olive   mini button" id="btnlogin" name="btnlogin" onclick="location.href='/home/login'">
                    @:    로그인으로 이동
                    @:</button>
                    @Html.Semantic_Button2("btnSave", "가입하기", SemanticUIHelper.enButtonType.Save, SemanticUIHelper.Size.medium, new { @type = "submit" })
                        }
                        else
                        {
                            @Html.Semantic_Button2("btnSave", "저장", SemanticUIHelper.enButtonType.Save, SemanticUIHelper.Size.medium, new { @type = "submit" })
                        }
                    }
                </div>
            </div>
        </div>

        <div class="ui error message"></div>
        @{ 
            Html.RenderPartial("/Views/Popup/PasswordConfirmP.cshtml");
        }
    </form>

</div>