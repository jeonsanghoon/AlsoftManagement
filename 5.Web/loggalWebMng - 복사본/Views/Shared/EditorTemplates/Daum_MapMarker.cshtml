


@{

    Daum_MapMultiMarker option = (ViewData["optionmap"] == null) ? new Daum_MapMultiMarker() { ID = "multimarker" } : (Daum_MapMultiMarker)ViewData["optionmap"];
    if (ViewData[Global.ConfigInfo.KakaoMapScript] == null || (bool)ViewData[Global.ConfigInfo.KakaoMapScript] == false|| ViewData[Global.ConfigInfo.DaumMapScript] == null || (bool)ViewData[Global.ConfigInfo.DaumMapScript] == false)
    {
        if (option.bScript)
        {
<script type="text/javascript" src="//dapi.kakao.com/v2/maps/sdk.js?appkey=@Global.ConfigInfo.KakaoAppKey&libraries=services,clusterer,drawing"></script>
        }
        ViewData[Global.ConfigInfo.KakaoMapScript] = true;
    }

}



<style>
    #@(option.ID)_popDaumMapMultiMaker .map_wrap {
        position: relative;
        width: 100%;
    }

    #@(option.ID)_popDaumMapMultiMaker  .title {
        font-weight: bold;
        display: block;
        color:blue;
        text-align:left;
    }

    #@(option.ID)_popDaumMapMultiMaker  .hAddr {
        position: absolute;
        left: 10px;
        top: 10px;
        border-radius: 2px;
        background: #fff;
        background: rgba(255,255,255,0.8);
        z-index: 1;
        padding: 5px;
    }

    #@(option.ID)_popDaumMapMultiMaker  #@(option.ID)_centerAddr {
        display: block;
        margin-top: 2px;
        font-weight: normal;
    }

    #@(option.ID)_popDaumMapMultiMaker  .bAddr {

        text-overflow: ellipsis;
        overflow: hidden;
        white-space: nowrap;
    }
</style>


<div class="ui large modal form popDaumMapMaker" id="@(option.ID)_popDaumMapMultiMaker" style="height:70%;max-height:800px;z-index:99999">
    <div class="header">@(string.IsNullOrEmpty(option.TITLE) ? "지도 검색" : option.TITLE) </div>
    <div class="content" style="height:100%;min-height:240px;max-height:700px;">

        <div class="map_wrap" style="height:100%;min-height:230px;">
            <div id="@(option.ID)_map" style="width:100%;height:100%;position:relative;overflow:hidden;"></div>
            <div class="hAddr">
                <span class="title">지도중심기준 행정동 주소정보</span>
                <span id="@(option.ID)_centerAddr"></span>
            </div>
        </div>

    </div>
    <div class="actions">
        @{
            if (!option.bReadOnly)
            {
                <span style="font-size:1em;color:red;float:left;"> <b>마커추가</b> : 클릭, <b>마커삭제</b> : 우측마우스클릭, <b>수정</b> : 마커 드래그</span>
            }
        }
        @*
            <button onclick=" @(option.ID)_showMarkers()">보이기</button>
            <button onclick="hideMarkers()">숨기기</button>
            <button onclick=" @(option.ID)_SetMarkerInfo()">모두 저장</button>
            <button onclick="@(option.ID)_AlldeleteMarkerInfo()">모두 삭제</button>
        *@
        @Html.Semantic_Button2("btnpopDaumMapMultiMakerConfirm", "확인", SemanticUIHelper.enButtonType.Save, new { @onclick = (option.ID) + "_btnpopDaumMapMultiMakerConfirm();" })
        @Html.Semantic_Button2("btnpopDaumMapMakerClose", "닫기", SemanticUIHelper.enButtonType.Normal, new { @onclick = (option.ID) + "_btnpopDaumMapMultiMaker_Close();" })
    </div>
</div>


<script>


    var @(option.ID)_mapContainer, // 지도를 표시할 div
    @(option.ID)_mapOption;

    // 지도를 생성합니다
    var @(option.ID)_map ;

    // 주소-좌표 변환 객체를 생성합니다
    var @(option.ID)_geocoder;
    var @(option.ID)_markers;
    var @(option.ID)_bounds;
    var @(option.ID)_infowindow ; // 클릭한 위치에 대한 주소를 표시할 인포윈도우입니다
    var optiondata = @Html.Raw(Json.Encode(option));
    var _lat=0,_lng=0;

    $("document").ready(function(){
            if (navigator.geolocation) {

                // GeoLocation을 이용해서 접속 위치를 얻어옵니다
                navigator.geolocation.getCurrentPosition(function(position) {

                    _lat = position.coords.latitude, // 위도
                    _lng = position.coords.longitude; // 경도
            });
        }
    });

    function @(option.ID)_DaumMapMaker_Init(list, lat,lng)
    {

        if(optiondata.bReadOnly)
        {
            optiondata.MAKER_MAX_COUNT = list.length;
        }
        //
         @(option.ID)_bounds = new kakao.maps.LatLngBounds();
        if(lat==undefined || lat==0)
        {
            if(list != undefined && list.length>0)
            {
                lat = list[0].LATITUDE;
            }
            else
            {
                if(_lat != 0)
                {
                    lat = _lat;
                }else
                {
                    lat = @option.default_LATITUDE;
                }
            }
        }
        if(lng==undefined || lng==0) {
            if(list != undefined && list.length>0)
            {
                lng = list[0].LONGITUDE;
            }
            else
            {
                if(_lng != 0)
                {
                    lng = _lng;
                }else
                {
                    lng = @option.default_longitude;
                }
            }
        }

        SemanticUI.Popup.Show("#@(option.ID)_popDaumMapMultiMaker");
         SemanticUI.Popup.ContentResize("#@(option.ID)_popDaumMapMultiMaker");
        $(window).resize(function () {
            SemanticUI.Popup.ContentResize("#@(option.ID)_popDaumMapMultiMaker");
        })
        //SemanticUI.Modal.CenterShow("#@(option.ID)_popDaumMapMultiMaker");
        @(option.ID)_mapContainer = document.getElementById('@(option.ID)_map');
        @(option.ID)_mapOption = {
            center: new kakao.maps.LatLng(lat, lng) // 지도의 중심좌표
            ,level: 4//@option.default_LEVEL // 지도의 확대 레벨
        };
        @(option.ID)_map = new kakao.maps.Map(@(option.ID)_mapContainer, @(option.ID)_mapOption)
        @(option.ID)_geocoder = new kakao.maps.services.Geocoder();
        @(option.ID)_markers = [];

        @(option.ID)_infowindow = new kakao.maps.InfoWindow({ zindex: 1 })
        // 현재 지도 중심좌표로 주소를 검색해서 지도 좌측 상단에 표시합니다
        @(option.ID)_searchAddrFromCoords(@(option.ID)_map.getCenter(), @(option.ID)_displayCenterInfo);

        // 지도를 클릭했을 때 클릭 위치 좌표에 대한 주소정보를 표시하도록 이벤트를 등록합니다
        kakao.maps.event.addListener(@(option.ID)_map, 'click', function (mouseEvent) {

            @(option.ID)_searchDetailAddrFromCoords(mouseEvent.latLng, function (status, result) {
                if (status === kakao.maps.services.Status.OK) {
                    if ( @(option.ID)_markers.length >= optiondata.MAKER_MAX_COUNT) return;

                    var marker = new kakao.maps.Marker({
                        draggable: (optiondata.bReadOnly ? false : true)
                    }) // 클릭한 위치를 표시할 마커입니다

                    @(option.ID)_setContentMarker(result[0], mouseEvent.latLng, marker);
                    @(option.ID)_markers.push(marker);

                    @(option.ID)_SetMarkerInfo();
                    /*이벤트*/
                    @(option.ID)_DaumMapMaker_EventInit(marker);
                }
            });
        });

        // 중심 좌표나 확대 수준이 변경됐을 때 지도 중심 좌표에 대한 주소 정보를 표시하도록 이벤트를 등록합니다
        kakao.maps.event.addListener(@(option.ID)_map, 'idle', function () {
            @(option.ID)_searchAddrFromCoords(@(option.ID)_map.getCenter(), @(option.ID)_displayCenterInfo);
        });
    }
    function @(option.ID)_DaumMapMaker_MouseOverInit(marker, objData)
    {

        // mouseover 이벤트를 등록합니다
        kakao.maps.event.addListener(marker, 'mouseover', function () {
            // 출발 마커의 드래그가 종료될 때 인포윈도우의 내용을 바꿔주면서 기존의 인포윈도우는 닫고 새 위치에 창을 열어줍니다

            @(option.ID)_searchDetailAddrFromCoords(marker.getPosition(), function (status, result) {

                //
                if (status === kakao.maps.services.Status.OK) {
                    @(option.ID)_setContentMarker(result[0], marker.getPosition(), marker, objData);
                }
            });
        });
        // mouseout 이벤트를 등록합니다
        kakao.maps.event.addListener(marker, 'mouseout', function () {
            // 출발 마커의 드래그가 종료될 때 인포윈도우의 내용을 바꿔주면서 기존의 인포윈도우는 닫고 새 위치에 창을 열어줍니다

            @(option.ID)_searchDetailAddrFromCoords(marker.getPosition(), function (status, result) {
                if (status === kakao.maps.services.Status.OK) {
                    @(option.ID)_infowindow.close();
                }
            });
        });
    }

    /// 마커에 이벤트 등록
    function @(option.ID)_DaumMapMaker_EventInit(marker, objData)
    {

        kakao.maps.event.addListener(marker, 'click', function () {
            if(  objData.LINK_URL != "") location.href = objData.LINK_URL;
        });

        @(option.ID)_DaumMapMaker_MouseOverInit(marker, objData);




        if(optiondata.bReadOnly){ return;
        }
        /// 마커삭제
        kakao.maps.event.addListener(marker, 'rightclick', function () {
            @(option.ID)_SetMarkerInfo(marker.getPosition());
            marker.setMap(null);
            @(option.ID)_infowindow.close();
            @(option.ID)_SetMarkerInfo();

        });
        kakao.maps.event.addListener(marker, 'dragstart', function () {

        });

        // 출발 마커에 dragend 이벤트를 등록합니다
        kakao.maps.event.addListener(marker, 'dragend', function () {
            // 출발 마커의 드래그가 종료될 때 인포윈도우의 내용을 바꿔주면서 기존의 인포윈도우는 닫고 새 위치에 창을 열어줍니다

            @(option.ID)_searchDetailAddrFromCoords(marker.getPosition(), function (status, result) {
                if (status === kakao.maps.services.Status.OK) {
                    @(option.ID)_setContentMarker(result[0], marker.getPosition(), marker, objData);
                    @(option.ID)_SetMarkerInfo();
                }
            });
        });

    }

    function @(option.ID)_DaumMapMaker_Open(list,lat,lng, localname, mode) { /*mode 1 은 기본 2는 작게*/

        lat = (lat == undefined || lat==0 ? @(option.default_LATITUDE) : lat);
        lng = (lng == undefined || lng==0 ? @(option.default_longitude) : lng);
        localname = (localname == undefined ? "" : localname);
        mode = (mode ==undefined || mode == null) ? 1 : mode;
        @(option.ID)_DaumMapMaker_Init(list, lat,lng);

        @(option.ID)_AlldeleteMarkerInfo();

        if(optiondata.bReadOnly == false && !(list == null || list ==undefined || list.length==0))
        {
            for (var i = 0; i < list.length; i++) {

                var marker;
                if(mode == 1)
                {
                    marker = new kakao.maps.Marker({
                        map: @(option.ID)_map, // 마커를 표시할 지도
                        draggable:   (optiondata.bReadOnly ? false : true),
                        position: new kakao.maps.LatLng(list[i].LATITUDE, list[i].LONGITUDE) // 마커의 위치
                    });
                }
                else
                {
                    marker = new kakao.maps.Marker({
                        map: @(option.ID)_map, // 마커를 표시할 지도
                        draggable:   (optiondata.bReadOnly ? false : true),
                        position: new kakao.maps.LatLng(list[i].LATITUDE, list[i].LONGITUDE) // 마커의 위치
                       ,image : new kakao.maps.MarkerImage("https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/markerStar.png", new kakao.maps.Size(12, 13)) // 마커 이미지
                    });
                }
                var objData = new Object();
                objData.KEY_CODE  = BaseCommon.ToDefault(list[i].KEY_CODE,"")
                objData.TITLE =  BaseCommon.ToDefault(list[i].TITLE,"")
                objData.CONTENT =  BaseCommon.ToDefault(list[i].CONTENT,"")
                objData.LINK_URL =  BaseCommon.ToDefault(list[i].LINK_URL,"")
                @(option.ID)_markers.push(marker);
                @(option.ID)_DaumMapMaker_EventInit(marker, objData);

            }
            @(option.ID)_SetMarkerInfo();

            if(localname == "")  @(option.ID)_map.setBounds(@(option.ID)_bounds);
            return;
        }


        if( !(list == null || list ==undefined || list.length==0))
        {
            //

            // 마커 클러스터러를 생성합니다
            var clusterer = new kakao.maps.MarkerClusterer({
                map: @(option.ID)_map, // 마커들을 클러스터로 관리하고 표시할 지도 객체
                averageCenter: true, // 클러스터에 포함된 마커들의 평균 위치를 클러스터 마커 위치로 설정
                minLevel: 10 // 클러스터 할 최소 지도 레벨
            });

            // 데이터에서 좌표 값을 가지고 마커를 표시합니다
            // 마커 클러스터러로 관리할 마커 객체는 생성할 때 지도 객체를 설정하지 않습니다

            var markers = $(list).map(function (i, position) {

                var marker;
                if(String(position.LINK_URL).toLowerCase().indexOf("devicestation") > 0)/*스테이션일경우*/
                {

                    marker = new kakao.maps.Marker({
                        draggable:   (optiondata.bReadOnly ? false : true),
                        position: new kakao.maps.LatLng(position.LATITUDE, position.LONGITUDE)
                         ,image : new kakao.maps.MarkerImage("https://" + BaseCommon.HostInfo.Host() + "/common/images/stationmarker.png", new kakao.maps.Size(35, 40)) // 마커 이미지
                    });
                }
                else if(position.ACTIVE_YN == undefined || position.ACTIVE_YN)
                {
                    marker = new kakao.maps.Marker({
                        draggable:   (optiondata.bReadOnly ? false : true),
                        position: new kakao.maps.LatLng(position.LATITUDE, position.LONGITUDE)

                    });
                }else{

                    marker = new kakao.maps.Marker({
                        draggable:   (optiondata.bReadOnly ? false : true),
                        position: new kakao.maps.LatLng(position.LATITUDE, position.LONGITUDE)
                         ,image : new kakao.maps.MarkerImage("https://" + BaseCommon.HostInfo.Host() + "/common/images/maker_black.png", new kakao.maps.Size(40, 40)) // 마커 이미지
                    });
                }

                return marker;
            });
            for(var i =0; i < markers.length; i++ )
            {
                @(option.ID)_markers.push(markers[i]);
                var objData = new Object();
                objData.KEY_CODE  = BaseCommon.ToDefault(list[i].KEY_CODE,"");
                objData.TITLE =  BaseCommon.ToDefault(list[i].TITLE,"");
                objData.CONTENT =  BaseCommon.ToDefault(list[i].CONTENT,"");
                objData.LINK_URL =  BaseCommon.ToDefault(list[i].LINK_URL,"");
                @(option.ID)_DaumMapMaker_EventInit(markers[i], objData);
            }

            // 클러스터러에 마커들을 추가합니다
            clusterer.addMarkers(markers);
             @(option.ID)_SetMarkerInfo();

            if(localname == "")  @(option.ID)_map.setBounds(@(option.ID)_bounds);
        }
    }




    function @(option.ID)_setContentMarker(objContent, objPosition, marker, objParam) {

        objParam = objParam == undefined ? null : objParam;
        if (objParam == null) {
            objParam = new Object();
            objParam.TITLE = "";
            objParam.CONTENT = "";

        }

        var detailAddr = !!objContent.roadAddress.name ? '<div>도로명주소 : ' + objContent.roadAddress.name + (objContent.roadAddress.building == undefined || objContent.roadAddress.building == "" ? "" : "(" + objContent.roadAddress.building + ")")  + '</div>' : '';
        detailAddr += '<div>지번 주소 : ' + objContent.jibunAddress.name + '</div>';

        var content = '<div class="bAddr">';

        content +=             '<span class="title">' + ((objParam.TITLE != null && objParam.TITLE !="") ?  objParam.TITLE : "법정동 주소정보")  + '</span>' ;
        content +=      (objParam.CONTENT == "" ? "" : "[" + objParam.CONTENT + "]") + detailAddr +'</div>';

        content += "<div>위도 : " + String(objPosition.getLat()) + "</div>";
        content += "<div>경도 : " + String(objPosition.getLng()) + "</div>";
        marker.setPosition(objPosition);
        marker.setMap(@(option.ID)_map);


        @(option.ID)_infowindow.setContent("<div style='padding:10px;'>" + content + "</div>");
        @(option.ID)_infowindow.open(@(option.ID)_map, marker);
    }
    function @(option.ID)_searchAddrFromCoords(coords, callback) {
        try{
            // 좌표로 행정동 주소 정보를 요청합니다
            @(option.ID)_geocoder.coord2addr(coords, callback);
        }catch(e){@(option.ID)_geocoder.coord2Address(coords.getLng(), coords.getLat(), callback);}
    }

    function @(option.ID)_searchDetailAddrFromCoords(coords, callback) {
        // 좌표로 법정동 상세 주소 정보를 요청합니다
        try{
            //
            @(option.ID)_geocoder.coord2detailaddr(coords, callback);

        }catch(e)
        {
            @(option.ID)_geocoder.coord2Address(coords.getLng(), coords.getLat(), callback);
        }
    }

    // 지도 좌측상단에 지도 중심좌표에 대한 주소정보를 표출하는 함수입니다
    function @(option.ID)_displayCenterInfo(status, result) {
        if (status === kakao.maps.services.Status.OK) {
            var infoDiv = document.getElementById('@(option.ID)_centerAddr');
            infoDiv.innerHTML = result[0].fullName;
        }
    }
    // "마커 보이기" 버튼을 클릭하면 호출되어 배열에 추가된 마커를 지도에 표시하는 함수입니다
    function @(option.ID)_showMarkers() {
        @(option.ID)_setMarkers(@(option.ID)_map)
    }

    // "마커 감추기" 버튼을 클릭하면 호출되어 배열에 추가된 마커를 지도에서 삭제하는 함수입니다
    function @(option.ID)_hideMarkers() {
        @(option.ID)_setMarkers(null);
    }
    function @(option.ID)_setMarkers(@(option.ID)_map) {
        for (var i = 0; i <  @(option.ID)_markers.length; i++) {

            @(option.ID)_markers[i].setMap(@(option.ID)_map);
        }
    }

    var @(option.ID)_nCnt = 0;
    var @(option.ID)_markerInfo = [];
    function @(option.ID)_SetMarkerInfo(extPosition) {



        @(option.ID)_markerInfo = new Array();
        @(option.ID)_nCnt = 0;
        var tmpMarker = new Array();

        for (var i = 0; i <  @(option.ID)_markers.length; i++) {

            if ((extPosition == undefined || extPosition == null) || !(extPosition.getLng() ==  @(option.ID)_markers[i].getPosition().getLng() && extPosition.getLng() ==  @(option.ID)_markers[i].getPosition().getLng())) {


                if(optiondata.bReadOnly == false)
                {
                    @(option.ID)_searchDetailAddrFromCoords( @(option.ID)_markers[i].getPosition(), function (status, result) {
                        try{
                            @(option.ID)_markerInfo[@(option.ID)_nCnt] = new Object();
                            @(option.ID)_markerInfo[@(option.ID)_nCnt].INDEX = @(option.ID)_nCnt;

                            @(option.ID)_markerInfo[@(option.ID)_nCnt].LATITUDE =  result[0].y;
                            @(option.ID)_markerInfo[@(option.ID)_nCnt].LONGITUDE =  result[0].x;
                            @(option.ID)_markerInfo[@(option.ID)_nCnt].ZIP_CODE = result[0].jibunAddress.zipcode;
                            @(option.ID)_markerInfo[@(option.ID)_nCnt].JIBUN_ADDRESS = result[0].jibunAddress.name;
                            @(option.ID)_markerInfo[@(option.ID)_nCnt].REGION = result[0].region;
                            @(option.ID)_markerInfo[@(option.ID)_nCnt].ROAD_ADDRESS = (result[0].roadAddress.name == "" ? "" : result[0].roadAddress.name + (result[0].roadAddress.building == "" ? "" : "(" + result[0].roadAddress.building + ")"));
                            @(option.ID)_markerInfo[@(option.ID)_nCnt].BUILDING  = result[0].roadAddress.building == "" ? "" : result[0].roadAddress.building;
                        }catch(e){}
                        @(option.ID)_nCnt++;
                    });

                }

                tmpMarker.push( @(option.ID)_markers[i])
                  /*이벤트*/

            }

            //marker1.setMap(@(option.ID)_map);
            @(option.ID)_bounds.extend( @(option.ID)_markers[i].getPosition());
        }


        @(option.ID)_markers = tmpMarker;

    }
    function @(option.ID)_AlldeleteMarkerInfo() {

        @(option.ID)_setMarkers(null);
        @(option.ID)_markers = [];
        @(option.ID)_SetMarkerInfo();
        @(option.ID)_infowindow.close();
    }

    function @(option.ID)_btnpopDaumMapMultiMakerConfirm() {
        try {

            @(option.ID)_DaumMapMarker_Callback(@(option.ID)_markerInfo);

        } catch (e) { }
        @(option.ID)_btnpopDaumMapMultiMaker_Close()
    }

    function @(option.ID)_btnpopDaumMapMultiMaker_Close() {
        $("#@(option.ID)_popDaumMapMultiMaker").modal("hide");
    }

</script>


