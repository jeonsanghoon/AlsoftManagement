<?xml version="1.0" encoding="utf-8" ?>
<DBAgentMultiTemplate  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://altsoft.kr/">
	<DBAgentTemplate TemplateID="GetDeviceList">
		<!-- 
    SqlType : SQL의 형태를 지정합니다.
      Example 1:<SqlType>FixedSQL</SqlType> 고정적인 SQL을 지원합니다. 
      Example 2:<SqlType>DynamicSQL</SqlType> 동적인 SQL Type1을 지원합니다.  
    Description : 해당 SQL의 기능설명을 적습니다.
    SQLModifier : 해당 SQL의 작성자(수정자)를 적습니다
    LastModifyDate : 해당 SQL의 마지막 수정일을 적습니다
    -->
		<Information>
			<SqlType>DynamicSQL</SqlType>
			<Description>로컬박스정보 조회</Description>
			<SQLModifier>전상훈</SQLModifier>
			<LastModifyDate>2016-09-23</LastModifyDate>
		</Information>

		<TemplateSQL>
			<!-- FixedSQL : 고정된 SQL이 들어가는 곳입니다. -->
			<FixedSQL>
				<![CDATA[ 
 
	SET NOCOUNT ON 
	/***************************************************/
	/* 로컬박스정보 - T_DEVICE 조회 -  SELECT QUERY */ 
	/***************************************************/
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED 
	SELECT 
       A.DEVICE_CODE
     , A.STATION_CODE
     , A1.STATION_NAME
     , A.DEVICE_TYPE
     , A.COMPANY_CODE
     , AC.COMPANY_NAME
     , A.STORE_CODE
     , B.STORE_NAME
     , A.MEMBER_CODE
     , AM.USER_NAME AS MEMBER_NAME
     , CASE WHEN ISNULL( B.OWNER_PHONE, ISNULL(B.OWNER_MOBILE,'')) = '' THEN AM.MOBILE 
	        ELSE ISNULL( B.OWNER_PHONE, ISNULL(B.OWNER_MOBILE,'')) 
        END AS MOBILE
     , A.DEVICE_NUMBER
     , A.AUTH_NUMBER
     , A.DEVICE_NAME
     , A.DEVICE_DESC
     , A.GROUP_CODE
     , A.BUSI_TYPE
     , A.BUSI_TYPE2
     , A.ADDRESS1
     , A.ADDRESS2
     , A.ZIP_CODE
     , A.LATITUDE
     , A.LONGITUDE
     , A.CONTACT_COMPANY_CODE
     , AC1.COMPANY_NAME AS CONTACT_COMPANY_NAME
     , A.CONTACT_STORE_CODE
     , B1.STORE_NAME AS CONTACT_STORE_NAME
     , A.CONTACT_CODE
     , A.CONTACT_NAME
     , A.CONTACT_PHONE
     , A.CONTACT_EMAIL
     , A.CATEGORY_CODES
     , A.AD_DISTANCE
     , A.DATA_CYCLE_TIME
     , A.AD_CYCLE_TIME
     , A.PAGE_WAITING_TIME
     , AC1.MOBILE AS CONTACT_MOBILE
     , A.STATUS
     , A.HIDE
     , A.REMARK
     , A.WORKING_TIME
     , A.TIME_ZONE
     , A.INSERT_CODE
     , C.USER_NAME AS INSERT_NAME
     , A.INSERT_DATE
     , A.UPDATE_CODE
     , D.USER_NAME AS UPDATE_NAME
     , A.UPDATE_DATE
     , A.AD_FRAME_TYPE
     , ISNULL(PLACE_CNT,0) AS PLACE_CNT
     , ISNULL(MAIN_CNT,0) AS MAIN_CNT    
     , A.HARDWARE_CODE
     , AH1.HARDWARE_NAME
     , AH1.MODEL_NAME
     , ISNULL(FF.FILE_URL, '') AS LOGO_URL
	 , A.IS_MOBILE
	 , A.ITEM_TYPE
	FROM T_DEVICE A 
  LEFT JOIN T_HARDWARE AH1
    ON A.HARDWARE_CODE = AH1.HARDWARE_CODE
  LEFT JOIN T_DEVICE_STATION A1
    ON A.STATION_CODE = A1.STATION_CODE
 INNER JOIN T_COMPANY AC 
	  ON A.COMPANY_CODE = aC.COMPANY_CODE  
 INNER JOIN T_STORE B
	  ON A.STORE_CODE = B.STORE_CODE
 INNER JOIN T_MEMBER AM
	  ON A.MEMBER_CODE = AM.MEMBER_CODE
 INNER JOIN T_MEMBER C
	  ON A.INSERT_CODE = C.MEMBER_CODE
 INNER JOIN T_MEMBER D
	  ON A.UPDATE_CODE = D.MEMBER_CODE
 INNER JOIN T_COMPANY AC1
    ON A.CONTACT_COMPANY_CODE = AC1.COMPANY_CODE
 INNER JOIN T_STORE B1
    ON A.CONTACT_STORE_CODE = B1.STORE_CODE
 LEFT JOIN (SELECT DEVICE_CODE, COUNT(*) AS MAIN_CNT FROM T_DEVICE_MAIN 
             WHERE HIDE = 0
             GROUP BY DEVICE_CODE
			) DM
		 ON A.DEVICE_CODE = DM.DEVICE_CODE
 LEFT JOIN (SELECT DEVICE_CODE, COUNT(*) AS PLACE_CNT FROM T_DEVICE_PLACE 
             GROUP BY DEVICE_CODE
			) DP
		 ON A.DEVICE_CODE = DP.DEVICE_CODE
 LEFT JOIN T_FILE FF
   ON FF.TABLE_NAME = 'T_DEVICE'
  AND FF.TABLE_KEY  = CONVERT(VARCHAR(20), A.DEVICE_CODE)
  AND FF.FILE_SEQ   = 1
  AND FF.REF_DATA1  = '1'
 WHERE 1=1
 #[DEVICE_CODE]
 #[COMPANY_CODE]
 #[STORE_CODE]
 #[GROUP_CODE]
 #[DEVICE_NAME]
 #[AUTH_NUMBER]
 #[DEVICE_NUMBER]
	
 SET NOCOUNT OFF 
    ]]>
			</FixedSQL>
			<DynamicBodys>
				<Key>DEVICE_CODE</Key>
				<Body>
					<![CDATA[   AND A.DEVICE_CODE = {0} ]]>
				</Body>
			</DynamicBodys>
			<DynamicBodys>
				<Key>COMPANY_CODE</Key>
				<Body>
					<![CDATA[   AND B.COMPANY_CODE = {0} ]]>
				</Body>
			</DynamicBodys>
			<DynamicBodys>
				<Key>STORE_CODE</Key>
				<Body>
					<![CDATA[   AND A.STORE_CODE = {0} ]]>
				</Body>
			</DynamicBodys>
			<DynamicBodys>
				<Key>GROUP_CODE</Key>
				<Body>
					<![CDATA[   AND A.GROUP_CODE = {0} ]]>
				</Body>
			</DynamicBodys>
			<DynamicBodys>
				<Key>DEVICE_NAME</Key>
				<Body>
					<![CDATA[   AND A.DEVICE_NAME LIKE N'%{0}%' ]]>
				</Body>
			</DynamicBodys>
			<DynamicBodys>
				<Key>AUTH_NUMBER</Key>
				<Body>
					<![CDATA[   AND A.AUTH_NUMBER = {0} ]]>
				</Body>
			</DynamicBodys>
			<DynamicBodys>
				<Key>DEVICE_NUMBER</Key>
				<Body>
					<![CDATA[   AND A.DEVICE_NUMBER = '{0}' ]]>
				</Body>
			</DynamicBodys>
		</TemplateSQL>
	</DBAgentTemplate>

	<DBAgentTemplate TemplateID="DeviceSave">
		<!-- 
    SqlType : SQL의 형태를 지정합니다.
      Example 1:<SqlType>FixedSQL</SqlType> 고정적인 SQL을 지원합니다. 
      Example 2:<SqlType>DynamicSQL</SqlType> 동적인 SQL Type1을 지원합니다.  
    Description : 해당 SQL의 기능설명을 적습니다.
    SQLModifier : 해당 SQL의 작성자(수정자)를 적습니다
    LastModifyDate : 해당 SQL의 마지막 수정일을 적습니다
    -->
		<Information>
			<SqlType>DynamicSQL</SqlType>
			<Description>로컬박스저장</Description>
			<SQLModifier>전상훈</SQLModifier>
			<LastModifyDate>2016-10-21</LastModifyDate>
		</Information>

		<TemplateSQL>
			<!-- FixedSQL : 고정된 SQL이 들어가는 곳입니다. -->
			<FixedSQL>
				<![CDATA[ 
	    SET NOCOUNT ON 
	    /*************************************************/
	    /* 로컬박스저장 - T_DEVICE 저장 DeviceSave        */
        /* -  SAVE QUERY                                 */ 
	    /*************************************************/
	DECLARE @DEVICE_CODE                    BIGINT               = N'{0}'
			  , @COMPANY_CODE                   INT                  = CONVERT(INT, CASE WHEN ISNUMERIC('{1}') = 1 THEN '{1}' ELSE NULL END )
			  , @STORE_CODE                     INT                  = CONVERT(INT, CASE WHEN ISNUMERIC('{2}') = 1 THEN '{2}' ELSE NULL END )
			  , @MEMBER_CODE                    INT                  = CONVERT(INT, CASE WHEN ISNUMERIC('{3}') = 1 THEN '{3}' ELSE NULL END )
			  , @DEVICE_NUMBER                  VARCHAR(100)         = CASE WHEN N'{4}' = '' THEN NULL ELSE N'{4}' END
			  , @AUTH_NUMBER                    BIGINT               = CONVERT(BIGINT, CASE WHEN ISNUMERIC('{5}') = 1 THEN '{5}' ELSE NULL END )
			  , @DEVICE_NAME                    NVARCHAR(200)        = N'{6}'
			  , @DEVICE_DESC                    NVARCHAR(400)        = N'{7}'
			  , @GROUP_CODE                     INT                  = CONVERT(INT, CASE WHEN ISNUMERIC('{8}') = 1 THEN '{8}' ELSE NULL END )
			  , @BUSI_TYPE                      INT                  = CONVERT(INT, CASE WHEN ISNUMERIC('{9}') = 1 THEN '{9}' ELSE NULL END )
			  , @BUSI_TYPE2                     INT                  = CONVERT(INT, CASE WHEN ISNUMERIC('{10}') = 1 THEN '{10}' ELSE NULL END )
			  , @ADDRESS1                       NVARCHAR(200)        = N'{11}'
			  , @ADDRESS2                       NVARCHAR(200)        = N'{12}'
			  , @ZIP_CODE                       VARCHAR(10)          = N'{13}'
			  , @LATITUDE                       NUMERIC(20,16)       = CONVERT(NUMERIC(20,16), CASE WHEN ISNUMERIC('{14}') = 1 THEN '{14}' ELSE '0' END )
			  , @LONGITUDE                     NUMERIC(20,16)       = CONVERT(NUMERIC(20,16), CASE WHEN ISNUMERIC('{15}') = 1 THEN '{15}' ELSE '0' END )
			  , @CONTACT_COMPANY_CODE           INT                  = CONVERT(INT, CASE WHEN ISNUMERIC('{16}') = 1 THEN '{16}' ELSE NULL END )
			  , @CONTACT_STORE_CODE             INT                  = CONVERT(INT, CASE WHEN ISNUMERIC('{17}') = 1 THEN '{17}' ELSE NULL END )
			  , @CONTACT_CODE                   INT                  = CONVERT(INT, CASE WHEN ISNUMERIC('{18}') = 1 THEN '{18}' ELSE NULL END )
			  , @CONTACT_NAME                   NVARCHAR(30)         = N'{19}'
			  , @CONTACT_PHONE                  NVARCHAR(20)         = N'{20}'
			  , @CONTACT_EMAIL                  NVARCHAR(50)         = N'{21}'
			  , @CATEGORY_CODES                 NVARCHAR(100)        = N'{22}'
			  , @AD_DISTANCE                    INT                  = CONVERT(INT, CASE WHEN ISNUMERIC('{23}') = 1 THEN '{23}' ELSE NULL END )
			  , @DATA_CYCLE_TIME                INT                  = CONVERT(INT, CASE WHEN ISNUMERIC('{24}') = 1 THEN '{24}' ELSE NULL END )
			  , @AD_CYCLE_TIME                  INT                  = CONVERT(INT, CASE WHEN ISNUMERIC('{25}') = 1 THEN '{25}' ELSE NULL END )
			  , @PAGE_WAITING_TIME              INT                  = CONVERT(INT, CASE WHEN ISNUMERIC('{26}') = 1 THEN '{26}' ELSE NULL END )
			  , @STATUS                         INT                  = CONVERT(INT, CASE WHEN ISNUMERIC('{27}') = 1 THEN '{27}' ELSE '0' END )
			  , @HIDE                           BIT                  = CONVERT(BIT, CASE WHEN ISNUMERIC('{28}') = 1 THEN '{28}' ELSE '0' END )
			  , @REMARK                         NVARCHAR(200)        = N'{29}'
			  , @WORKING_TIME                   DATETIME             = CASE WHEN ISDATE('{30}') = 1 THEN '{30}' ELSE NULL END
			  , @TIME_ZONE                      NUMERIC(3,1)         = CONVERT(NUMERIC(3,1), CASE WHEN ISNUMERIC('{31}') = 1 THEN '{31}' ELSE '0' END )
			  , @INSERT_CODE                    INT                  = {32}
			  , @INSERT_DATE                    DATETIME             = GETDATE() 
			  , @UPDATE_CODE                    INT                  = {32}
			  , @UPDATE_DATE                    DATETIME             = GETDATE() 
			  , @SAVE_TYPE                      VARCHAR(10)          = '{33}'
			  , @STATION_CODE                   INT                  = CONVERT(INT, CASE WHEN ISNUMERIC('{34}') = 1 THEN '{34}' ELSE NULL END )
			  , @AD_FRAME_TYPE                  INT                  = CONVERT(INT, CASE WHEN ISNUMERIC('{35}') = 1 THEN '{35}' ELSE 12 END ) 
			  , @HARDWARE_CODE                  INT                  = CONVERT(INT, CASE WHEN ISNUMERIC('{36}') = 1 THEN '{36}' ELSE NULL END ) 
			  , @LOGO_URL                       NVARCHAR(200)        = '{37}'
			  , @DEVICE_TYPE                    INT                  = CONVERT(INT, CASE WHEN ISNUMERIC('{38}') = 1 THEN '{38}' ELSE NULL END ) 
			  , @IS_MOBILE					    BIT				     = {39}
			  , @PARENT_DEVICE_CODE				BIGINT				 = NULL
			  , @DEVICE_NEXT_CODE			    BIGINT				 = 0
			  , @RTN_MSG						NVARCHAR(400)		 = N''

		SET @STATION_CODE  = CASE WHEN @STATION_CODE   <= 0 THEN NULL ELSE @STATION_CODE  END
        
      IF @SAVE_TYPE = 'D'
      BEGIN		
         IF EXISTS (SELECT * FROM T_DEVICE_MAIN WHERE DEVICE_CODE = @DEVICE_CODE AND HIDE = 0)
         BEGIN
             UPDATE T_DEVICE 
                SET HIDE = 1
                   ,STATUS = 11
                   ,UPDATE_CODE = @UPDATE_CODE
                   ,UPDATE_DATE = GETDATE()
             WHERE DEVICE_CODE = @DEVICE_CODE
             
             UPDATE T_DEVICE_AUTH_NUMBER
                SET HIDE = 1
                   ,UPDATE_CODE = @UPDATE_CODE
                   ,UPDATE_DATE = GETDATE()
             WHERE DEVICE_CODE = @DEVICE_CODE
               AND AUTH_TYPE = 2

         END
         ELSE
         BEGIN	
             -- 2019.12.09 권용현
			 -- 가상로컬 삭제할 때 해당 로컬 박스들 PARENT_DEVICE_CODE NULL 셋팅
			 IF EXISTS (SELECT DEVICE_CODE FROM T_DEVICE WHERE DEVICE_CODE = @DEVICE_CODE AND PARENT_DEVICE_CODE = DEVICE_CODE)
			 BEGIN
				  UPDATE T_DEVICE 
				     SET PARENT_DEVICE_CODE = NULL 
				   WHERE PARENT_DEVICE_CODE = @DEVICE_CODE
			 END
			 
             DELETE FROM T_DEVICE_PLACE
             WHERE DEVICE_CODE = @DEVICE_CODE
             DELETE FROM T_MEMBER_BOOKMARK
             WHERE DEVICE_CODE = @DEVICE_CODE
             
             DELETE FROM T_DEVICE_MAIN WHERE DEVICE_CODE = @DEVICE_CODE 
             DELETE FROM T_SEARCH_KEYWORD WHERE DEVICE_CODE = @DEVICE_CODE
         
             DELETE FROM T_AD_DEVICE
             WHERE DEVICE_CODE = @DEVICE_CODE
             
             DELETE FROM T_DEVICE_AUTH_NUMBER
              WHERE DEVICE_CODE = @DEVICE_CODE
                AND AUTH_TYPE = 2
                   
             DELETE FROM T_DEVICE_MAIN
              WHERE DEVICE_CODE = @DEVICE_CODE
             
             DELETE FROM T_DEVICE_MAIN_GROUP
              WHERE DEVICE_CODE = @DEVICE_CODE
              
			DECLARE @PLACE_ITEM_USE TABLE 
			(	
				  ROW_IDX INT IDENTITY(1,1)
				, IDX BIGINT NOT NULL
				, USE_CNT INT NOT NULL
				, PURCHASE_TYPE INT NOT NULL
				, PURCHASE_CNT INT NOT NULL
			)
			
			  DECLARE @IDX				BIGINT		= 0
					, @USE_CNT			INT         = 0
					, @PURCHASE_CNT		INT			= 0
					, @PURCHASE_TYPE	INT			= 0
					, @MAX_IDX			INT			= 1
					, @MIN_IDX			INT			= 1	

			INSERT INTO @PLACE_ITEM_USE
			     SELECT MPIU.MEMBER_ITEM_IDX
				      , MPIU.USE_CNT
					  , MPI.PURCHASE_TYPE
					  , MPI.ITEM_PURCHASE_CNT
			       FROM T_MEMBER_PLACE_ITEM_USE AS MPIU
			  LEFT JOIN T_MEMBER_PLACE_ITEM AS MPI
			         ON MPI.IDX = MPIU.MEMBER_ITEM_IDX
			      WHERE MPIU.DEVICE_CODE = @DEVICE_CODE
			        SET @MAX_IDX = @@ROWCOUNT
			
			DELETE FROM T_MEMBER_PLACE_ITEM_USE 
				  WHERE DEVICE_CODE = @DEVICE_CODE

			WHILE @MIN_IDX <= @MAX_IDX
			BEGIN
				 SELECT @IDX = IDX
				      , @USE_CNT = USE_CNT
					  , @PURCHASE_TYPE = PURCHASE_TYPE
					  , @PURCHASE_CNT = PURCHASE_CNT
				   FROM @PLACE_ITEM_USE
				  WHERE ROW_IDX = @MIN_IDX
				 
				 -- 무료
				 IF @PURCHASE_TYPE = 1
			     BEGIN
					  -- 전체 개수 차감
					  UPDATE T_MEMBER_PLACE_ITEM 
			               SET ITEM_PURCHASE_CNT -= 1
			                 , UPDATE_CODE = @UPDATE_CODE
			                 , UPDATE_DATE = @UPDATE_DATE
			             WHERE IDX = @IDX

					  -- 아이템을 사용한 경우
					  IF @USE_CNT > 0
					  BEGIN
						   UPDATE T_MEMBER_PLACE_ITEM 
							  SET ITEM_USE_CNT -= 1
							    , UPDATE_CODE = @UPDATE_CODE
							    , UPDATE_DATE = @UPDATE_DATE
						    WHERE IDX = @IDX
					  END
					  -- 아이템을 사용하지 않은 경우
					  ELSE
					  BEGIN
						   UPDATE T_MEMBER_PLACE_ITEM 
							  SET ITEM_CNT -= 1
							    , UPDATE_CODE = @UPDATE_CODE
							    , UPDATE_DATE = @UPDATE_DATE
						    WHERE IDX = @IDX
					  END

					  IF @PURCHASE_CNT - 1 <= 0
					  BEGIN
						   DELETE FROM T_MEMBER_PLACE_ITEM WHERE IDX = @IDX
					  END	
				 END
				 -- 유료
				 ELSE
				 BEGIN
					  -- 아이템을 사용한 경우
					  IF @USE_CNT > 0
					  BEGIN									 
						   UPDATE T_MEMBER_PLACE_ITEM 
							  SET ITEM_USE_CNT -= @USE_CNT
							    , ITEM_CNT += @USE_CNT
							    , UPDATE_CODE = @UPDATE_CODE
							    , UPDATE_DATE = @UPDATE_DATE
						    WHERE IDX = @IDX
					  END
					  -- 아이템을 사용하지 않은 경우							  
				 END
				 											 							  
				 SET @MIN_IDX = @MIN_IDX + 1
			END	

             DELETE FROM T_DEVICE 
              WHERE DEVICE_CODE = @DEVICE_CODE
         END
         SELECT  CONVERT(VARCHAR(20), @DEVICE_CODE) AS DATA, '' ERROR_MESSAGE
      END
      ELSE
      BEGIN
		   IF(@IS_MOBILE = 1 AND @DEVICE_CODE = -1)
		   BEGIN
			    IF (SELECT COUNT(1) FROM T_DEVICE WHERE STORE_CODE = @STORE_CODE AND PARENT_DEVICE_CODE IS NOT NULL) > 0
			    BEGIN
					 SET @RTN_MSG = '1개 이상의 가상로컬박스를 생성할 수 없습니다.'
					 GOTO EXCEPTION
			    END
		   END 
          IF @STATUS = 9
          BEGIN
             /* IF NOT EXISTS (SELECT A.DEVICE_CODE FROM T_DEVICE A
               INNER JOIN T_DEVICE_AUTH_NUMBER B
                 ON A.DEVICE_CODE = B.DEVICE_CODE
                AND A.HIDE = 0 AND B.HIDE = 0 
                AND A.AUTH_NUMBER = B.AUTH_NUMBER
                AND ISNULL(A.AUTH_NUMBER,'') <> ''
              WHERE A.DEVICE_CODE = @DEVICE_CODE
             )
             BEGIN 
                  SELECT  CONVERT(VARCHAR(20), @DEVICE_CODE) AS DATA, '인증이 되어 있어야 운영으로 상태를 변경할 수 있습니다! <br>인증번호를 확인하세요!' ERROR_MESSAGE
                  GOTO EXCEPTION
             END*/
             SET @HIDE = 0
          END
          ELSE
          BEGIN
             SET @HIDE = 1
          END
          
          UPDATE A 
	          SET  	  COMPANY_CODE                   = @COMPANY_CODE                       , STATION_CODE                    = @STATION_CODE            
			           ,  STORE_CODE                     = @STORE_CODE                    		 ,  MEMBER_CODE                    = @MEMBER_CODE                   
			           ,  DEVICE_NUMBER                  = CASE WHEN @DEVICE_NUMBER = '' THEN DEVICE_NUMBER ELSE @DEVICE_NUMBER END                 		 
                 ,  AUTH_NUMBER                    = @AUTH_NUMBER                   
			           ,  DEVICE_NAME                    = @DEVICE_NAME                   		 ,  DEVICE_DESC                    = @DEVICE_DESC                   
			           ,  GROUP_CODE                     = @GROUP_CODE                    		 ,  BUSI_TYPE                      = @BUSI_TYPE                     
			           ,  BUSI_TYPE2                     = @BUSI_TYPE2                    		 ,  ADDRESS1                       = @ADDRESS1                      
			           ,  ADDRESS2                       = @ADDRESS2                      		 ,  ZIP_CODE                       = @ZIP_CODE                      
			           ,  LATITUDE                       = @LATITUDE                      		 ,  LONGITUDE                     = @LONGITUDE                    
			           ,  CONTACT_COMPANY_CODE           = @CONTACT_COMPANY_CODE          		 ,  CONTACT_STORE_CODE             = @CONTACT_STORE_CODE            
			           ,  CONTACT_CODE                   = @CONTACT_CODE                  		 ,  CONTACT_NAME                   = @CONTACT_NAME                  
			           ,  CONTACT_PHONE                  = @CONTACT_PHONE                 		 ,  CONTACT_EMAIL                  = @CONTACT_EMAIL                 
			           ,  CATEGORY_CODES                 = @CATEGORY_CODES                		 ,  AD_DISTANCE                    = @AD_DISTANCE                   
			           ,  DATA_CYCLE_TIME                = @DATA_CYCLE_TIME               		 ,  AD_CYCLE_TIME                  = @AD_CYCLE_TIME                 
			           ,  PAGE_WAITING_TIME              = @PAGE_WAITING_TIME             		 ,  STATUS                         = @STATUS                        
			           ,  HIDE                           = @HIDE                          		 ,  REMARK                         = @REMARK                        
			           ,  WORKING_TIME                   = CASE WHEN @WORKING_TIME IS NULL THEN WORKING_TIME ELSE @WORKING_TIME END                  		 ,  TIME_ZONE                      = @TIME_ZONE                     
			           ,  UPDATE_CODE                    = @UPDATE_CODE                   		 ,  UPDATE_DATE                    = @UPDATE_DATE      
					   ,  AD_FRAME_TYPE                  = @AD_FRAME_TYPE                      ,  HARDWARE_CODE                   = @HARDWARE_CODE
					   ,  DEVICE_TYPE                    = CASE WHEN @DEVICE_TYPE IS NULL THEN DEVICE_TYPE ELSE @DEVICE_TYPE END
					   ,  IS_MOBILE					     = @IS_MOBILE

			 FROM T_DEVICE A 
	          WHERE DEVICE_CODE= @DEVICE_CODE
	        IF @@ROWCOUNT = 0
	        BEGIN
            IF @CONTACT_CODE IS NULL
            BEGIN
              SET @CONTACT_CODE = @INSERT_CODE
            END
			
             SELECT 
                   @CONTACT_STORE_CODE = b.STORE_CODE
                  ,@CONTACT_EMAIL = A.EMAIL
                  ,@CONTACT_NAME = A.USER_NAME
                  ,@CONTACT_PHONE = A.MOBILE
              FROM T_MEMBER A
              INNER JOIN T_MEMBER_EMPLOYEE B
                 ON A.MEMBER_CODE = B.MEMBER_CODE
				AND B.STORE_CODE = @CONTACT_STORE_CODE
              WHERE A.MEMBER_CODE = @CONTACT_CODE
		        
            SET @WORKING_TIME  = NULL
            
               INSERT INTO T_DEVICE
		        (	  COMPANY_CODE                  		, STORE_CODE                    		, MEMBER_CODE                   		
			        , DEVICE_NUMBER                 		, AUTH_NUMBER                   		, DEVICE_NAME                   		, DEVICE_DESC                   		
			        , GROUP_CODE                    		, BUSI_TYPE                     		, BUSI_TYPE2                    		, ADDRESS1                      		
			        , ADDRESS2                      		, ZIP_CODE                      		, LATITUDE                      		, LONGITUDE                    		
			        , CONTACT_COMPANY_CODE          		, CONTACT_STORE_CODE            		, CONTACT_CODE                  		, CONTACT_NAME                  		
			        , CONTACT_PHONE                 		, CONTACT_EMAIL                 		, CATEGORY_CODES                		, AD_DISTANCE                   		
			        , DATA_CYCLE_TIME               		, AD_CYCLE_TIME                 		, PAGE_WAITING_TIME             		, STATUS                        		
			        , HIDE                          		, REMARK                        		, WORKING_TIME                  		, TIME_ZONE                     		
			        , INSERT_CODE                   		, INSERT_DATE                   		, UPDATE_CODE                   		, UPDATE_DATE
					, STATION_CODE							, AD_FRAME_TYPE							, HARDWARE_CODE							, DEVICE_TYPE 
					, IS_MOBILE								, ITEM_TYPE
		        )
		        SELECT	  @COMPANY_CODE                 		, @STORE_CODE                   	
				        , @MEMBER_CODE                  		, @DEVICE_NUMBER                		, @AUTH_NUMBER                  	
				        , @DEVICE_NAME                  		, @DEVICE_DESC                  		, @GROUP_CODE                   	
				        , @BUSI_TYPE                    		, @BUSI_TYPE2                   		, @ADDRESS1                     	
				        , @ADDRESS2                     		, @ZIP_CODE                     		, @LATITUDE                     	
				        , @LONGITUDE                   			, @CONTACT_COMPANY_CODE         		, @CONTACT_STORE_CODE           	
				        , @CONTACT_CODE                 		, @CONTACT_NAME                 		, @CONTACT_PHONE                	
				        , @CONTACT_EMAIL                		, @CATEGORY_CODES               		, @AD_DISTANCE                  	
				        , @DATA_CYCLE_TIME              		, @AD_CYCLE_TIME                		, @PAGE_WAITING_TIME            	
				        , @STATUS                       		, @HIDE                         		, @REMARK                       	
				        , @WORKING_TIME                 		, @TIME_ZONE                    		, @INSERT_CODE                  	
				        , @INSERT_DATE                  		, @UPDATE_CODE                  		, @UPDATE_DATE                  	                  	
						, @STATION_CODE							, @AD_FRAME_TYPE						, @HARDWARE_CODE
						, @DEVICE_TYPE							, @IS_MOBILE							, 1000
			      
                SET @DEVICE_CODE = IDENT_CURRENT('T_DEVICE')
	         END        
       END
       DELETE FROM T_FILE
           WHERE TABLE_NAME = 'T_DEVICE' 
             AND TABLE_KEY  = CONVERT(VARCHAR(20), @DEVICE_CODE)
             AND REF_DATA1 = '1'
       IF @LOGO_URL <> '' 
       BEGIN
          /*REF_DATA1가 1이면 로고*/
          INSERT INTO T_FILE
          (TABLE_NAME, TABLE_KEY, FILE_SEQ, FILE_TYPE, FILE_NAME, FILE_EXT, FILE_URL, REF_DATA1, REF_DATA2, INSERT_CODE, INSERT_DATE)
          SELECT 'T_DEVICE', CONVERT(VARCHAR(20), @DEVICE_CODE), 1 AS FILE_SEQ, 1 AS FILE_TYPE, '','', @LOGO_URL, '1',N'로컬박스 로고', @UPDATE_CODE, GETDATE()
       END
       
       /*2019 04-12 추가됨*/
       UPDATE A
          SET FRAME_TYPE = CASE WHEN B.DEVICE_TYPE IN (1,2) THEN 12 ELSE 1 END
         FROM T_DEVICE_MAIN_GROUP A
        INNER JOIN T_DEVICE B 
           ON A.DEVICE_CODE = B.DEVICE_CODE
        WHERE A.DEVICE_CODE = @DEVICE_CODE
          AND A.FRAME_TYPE <> CASE WHEN B.DEVICE_TYPE IN (1,2) THEN 12 ELSE 1 END
       
	   /*2019-12-06 추가*/
		IF (@IS_MOBILE = 1)
		BEGIN
			 UPDATE T_DEVICE 
			    SET PARENT_DEVICE_CODE = @DEVICE_CODE 
			  WHERE DEVICE_CODE = @DEVICE_CODE
		END
		ELSE
		BEGIN
			 SELECT @PARENT_DEVICE_CODE = PARENT_DEVICE_CODE 
			   FROM T_DEVICE 
			  WHERE DEVICE_CODE = PARENT_DEVICE_CODE
	
			 IF @PARENT_DEVICE_CODE = 0
			 BEGIN
				  SET @PARENT_DEVICE_CODE = NULL
			 END

			 UPDATE T_DEVICE 
			    SET PARENT_DEVICE_CODE = @PARENT_DEVICE_CODE 
			  WHERE DEVICE_CODE = @DEVICE_CODE		    
		END
        
        SELECT  CONVERT(VARCHAR(20), @DEVICE_CODE) AS DATA, '' ERROR_MESSAGE
       
       EXCEPTION:
       SELECT @RTN_MSG AS ERROR_MESSAGE
	   
    SET NOCOUNT OFF

      ]]>
			</FixedSQL>
		</TemplateSQL>
	</DBAgentTemplate>
	<DBAgentTemplate TemplateID="GetDeviceRegionList">
		<!-- 
    SqlType : SQL의 형태를 지정합니다.
      Example 1:<SqlType>FixedSQL</SqlType> 고정적인 SQL을 지원합니다. 
      Example 2:<SqlType>DynamicSQL</SqlType> 동적인 SQL Type1을 지원합니다.  
    Description : 해당 SQL의 기능설명을 적습니다.
    SQLModifier : 해당 SQL의 작성자(수정자)를 적습니다
    LastModifyDate : 해당 SQL의 마지막 수정일을 적습니다
    -->
		<Information>
			<SqlType>DynamicSQL</SqlType>
			<Description>로컬박스별 지역등록내역 가져오기</Description>
			<SQLModifier>전상훈</SQLModifier>
			<LastModifyDate>2016-10-21</LastModifyDate>
		</Information>

		<TemplateSQL>
			<!-- FixedSQL : 고정된 SQL이 들어가는 곳입니다. -->
			<FixedSQL>
				<![CDATA[ 
  /******************************************************/
  /* 로컬박스별 지역등록내역 가져오기    GetDeviceRegionList    */
  /******************************************************/
  SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED 
  DECLARE @PAGE_COUNT INT = {0}
        ,@PAGE INT =  {1};
  WITH T_TABLE AS
  (  
    SELECT ROW_NUMBER() OVER(ORDER BY A.ORDER_SEQ) AS SEQ
	    ,  E.DEVICE_CODE
	    , A.CATEGORY_CODE
	    , A.CATEGORY_NAME1
	    , A.CATEGORY_NAME2
	    , A.SEARCH_CATEGORY_CODE
	    , A.CATEGORY_NAME3
      FROM V_REGION A
    INNER JOIN T_CATEGORY_KEYWORD B
       ON A.CATEGORY_CODE = B.CATEGORY_CODE
    INNER JOIN T_SEARCH_KEYWORD C
       ON B.CK_CODE = C.CK_CODE
    INNER JOIN T_DEVICE E
       ON E.DEVICE_CODE = C.DEVICE_CODE
    WHERE 1=1
      #[DEVICE_CODE]
  )SELECT * , (SELECT COUNT(1) FROM T_TABLE) TOTAL_ROWCOUNT FROM T_TABLE A      
  WHERE SEQ BETWEEN  (@PAGE - 1) * (@PAGE_COUNT) + 1 AND @PAGE * @PAGE_COUNT
    

	SET NOCOUNT OFF 
      ]]>
			</FixedSQL>
			<DynamicBodys>
				<Key>DEVICE_CODE</Key>
				<Body>AND E.DEVICE_CODE = {0} </Body>
			</DynamicBodys>
		</TemplateSQL>
	</DBAgentTemplate>

	<DBAgentTemplate TemplateID="DeviceRegionSave">
		<!-- 
    SqlType : SQL의 형태를 지정합니다.
      Example 1:<SqlType>FixedSQL</SqlType> 고정적인 SQL을 지원합니다. 
      Example 2:<SqlType>DynamicSQL</SqlType> 동적인 SQL Type1을 지원합니다.  
    Description : 해당 SQL의 기능설명을 적습니다.
    SQLModifier : 해당 SQL의 작성자(수정자)를 적습니다
    LastModifyDate : 해당 SQL의 마지막 수정일을 적습니다
    -->
		<Information>
			<SqlType>DynamicSQL</SqlType>
			<Description>로컬박스지역설정저장</Description>
			<SQLModifier>전상훈</SQLModifier>
			<LastModifyDate>2016-10-21</LastModifyDate>
		</Information>

		<TemplateSQL>
			<!-- FixedSQL : 고정된 SQL이 들어가는 곳입니다. -->
			<FixedSQL>
				<![CDATA[ 
/****************************************************/
/* 로컬박스 광고지역 키워드 등록  Device_RegionSave     */
/****************************************************/
 DECLARE @SAVE_TYPE VARCHAR(10) = '{0}' 
       , @DEVICE_CODE BIGINT = {1}
       , @SEARCH_CATEGORY_CODE VARCHAR(50) = '{2}'
	   , @REG_CODE INT = '{3}'
   IF @SAVE_TYPE = 'ALL_D'
   BEGIN
      /*키워드 유형이 지역코드 인것만 삭제*/
      DELETE A FROM T_SEARCH_KEYWORD A
       INNER JOIN T_KEYWORD B
          ON A.KEYWORD_CODE = B.KEYWORD_CODE
         AND B.KEYWORD_TYPE = 1 
       WHERE A.DEVICE_CODE  = @DEVICE_CODE
         
    DELETE A FROM T_SEARCH_KEYWORD A
     INNER JOIN T_CATEGORY_KEYWORD B
        ON A.CK_CODE = B.CK_CODE
     INNER JOIN T_CATEGORY C
        ON B.CATEGORY_CODE = C.CATEGORY_CODE
     WHERE A.DEVICE_CODE = @DEVICE_CODE
 
       AND C.CATEGORY_TYPE = 2
   END
  ELSE IF @SAVE_TYPE = 'D'
  BEGIN
    DELETE A FROM T_SEARCH_KEYWORD A
     INNER JOIN T_CATEGORY_KEYWORD B
        ON A.CK_CODE = B.CK_CODE
     INNER JOIN T_CATEGORY C
        ON B.CATEGORY_CODE = C.CATEGORY_CODE
     WHERE A.DEVICE_CODE = @DEVICE_CODE
       AND C.SEARCH_CATEGORY_CODE = @SEARCH_CATEGORY_CODE
       AND C.CATEGORY_TYPE = 2
  END
  ELSE
  BEGIN
    IF NOT EXISTS (
	    SELECT * FROM T_DEVICE A
	     INNER JOIN T_SEARCH_KEYWORD B
		    ON A.DEVICE_CODE = B.DEVICE_CODE
	     INNER JOIN T_CATEGORY_KEYWORD C
		    ON B.CK_CODE = C.CK_CODE
	     INNER JOIN T_CATEGORY D
		    ON D.CATEGORY_CODE = C.CATEGORY_CODE
	     WHERE A.DEVICE_CODE = @DEVICE_CODE
	       AND  @SEARCH_CATEGORY_CODE  LIKE D.SEARCH_CATEGORY_CODE + '%'
          
    )
    BEGIN
	    INSERT INTO T_SEARCH_KEYWORD
	    (DEVICE_CODE, CK_CODE,  INSERT_CODE, INSERT_DATE, UPDATE_CODE, UPDATE_DATE)
	    SELECT @DEVICE_CODE, B.CK_CODE,  @REG_CODE, GETDATE(), @REG_CODE, GETDATE()
	    FROM T_CATEGORY A
	    INNER JOIN T_CATEGORY_KEYWORD B
	       ON A.CATEGORY_CODE = B.CATEGORY_CODE
       WHERE A.SEARCH_CATEGORY_CODE = @SEARCH_CATEGORY_CODE
    END
    
       DELETE B FROM T_DEVICE A
	     INNER JOIN T_SEARCH_KEYWORD B
		    ON A.DEVICE_CODE = B.DEVICE_CODE
	     INNER JOIN T_CATEGORY_KEYWORD C
		    ON B.CK_CODE = C.CK_CODE
	     INNER JOIN T_CATEGORY D
		    ON D.CATEGORY_CODE = C.CATEGORY_CODE
	     WHERE A.DEVICE_CODE = @DEVICE_CODE
         AND  D.SEARCH_CATEGORY_CODE  <> @SEARCH_CATEGORY_CODE
	       AND  D.SEARCH_CATEGORY_CODE  LIKE @SEARCH_CATEGORY_CODE  + '%'
    
  END  
      ]]>
			</FixedSQL>

		</TemplateSQL>
	</DBAgentTemplate>

	<DBAgentTemplate TemplateID="GetDeviceList2">
		<!-- 
    SqlType : SQL의 형태를 지정합니다.
      Example 1:<SqlType>FixedSQL</SqlType> 고정적인 SQL을 지원합니다. 
      Example 2:<SqlType>DynamicSQL</SqlType> 동적인 SQL Type1을 지원합니다.  
    Description : 해당 SQL의 기능설명을 적습니다.
    SQLModifier : 해당 SQL의 작성자(수정자)를 적습니다
    LastModifyDate : 해당 SQL의 마지막 수정일을 적습니다
    -->
		<Information>
			<SqlType>DynamicSQL</SqlType>
			<Description>로컬박스리스트</Description>
			<SQLModifier>전상훈</SQLModifier>
			<LastModifyDate>2016-10-21</LastModifyDate>
		</Information>

		<TemplateSQL>
			<!-- FixedSQL : 고정된 SQL이 들어가는 곳입니다. -->
			<FixedSQL>
				<![CDATA[ 

SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED        
/****************************************************/
/* 로컬박스리스트  GetDeviceList2                   */
/****************************************************/

DECLARE @PAGE_COUNT				INT				= {0}
      , @PAGE					INT				= {1}
      , @LATITUDE				NUMERIC(20,16)	= {3}
      , @LONGITUDE				NUMERIC(20,16)	= {4}

  ;WITH T_TABLE AS
  (  
 SELECT ROW_NUMBER() OVER(ORDER BY {2}) AS SEQ 
      ,A.STATION_CODE
      ,A1.STATION_NAME
      ,A.DEVICE_CODE
      ,A.DEVICE_TYPE
	  ,C4.NAME AS DEVICE_TYPE_NAME
      ,A.GROUP_CODE
      ,SG.GROUP_NAME
      ,A.STORE_CODE 
      ,B.STORE_NAME 
	  ,A.DEVICE_NAME
      ,DV.DEVICE_NAME AS VIRTUAL_DEVICE_NAME
	  ,A.IS_MOBILE
	  ,A.PARENT_DEVICE_CODE
      ,C1.NAME AS BUSI_TYPE_NAME
	  ,C2.NAME AS BUSI_TYPE_NAME2
	  ,C3.NAME AS STATUS_NAME
	  ,A.CONTACT_CODE
	  ,A.CONTACT_NAME
	  ,A.CONTACT_PHONE
     , A.CONTACT_EMAIL
      ,A.CONTACT_STORE_CODE
      ,A.AUTH_NUMBER
	  ,A.ADDRESS1 + ' ' + A.ADDRESS2 + ' (우) ' + A.ZIP_CODE + '' AS ADDRESS
	  ,M.USER_NAME AS UPDATE_NAME
      ,DATEDIFF(minute,  ISNULL(A.WORKING_TIME, '1901-01-01'), getdate() ) AS WORKING_DIFF
      ,A.WORKING_TIME
	  ,A.UPDATE_DATE
      ,DBO.FN_TO_DISTANCE(@LATITUDE, @LONGITUDE, A.LATITUDE, A.LONGITUDE,'M') AS DISTANCE
      ,ISNULL(A2.RADIUS, A.RADIUS) AS RADIUS
      ,ISNULL(A2.JIBUN_ADDRESS, A.ADDRESS1 + ' ' + A.ADDRESS2 + ' (우) ' + A.ZIP_CODE ) AS JIBUN_ADDRESS
	  ,ISNULL(A2.LATITUDE, A.LATITUDE) AS LATITUDE
      ,ISNULL(A2.LONGITUDE,A.LONGITUDE) AS LONGITUDE
      ,A.AD_FRAME_TYPE
	  ,AFR.NAME AS AD_FRAME_TYPE_NAME
	  ,ISNULL(A.CATEGORY_CODES,'') AS CATEGORY_CODES
	  ,ISNULL(DM.MAIN_CNT,0) AS MAIN_CNT
	  ,ISNULL(DP.PLACE_CNT,0) AS PLACE_CNT  
     , A.HARDWARE_CODE
     , AH1.HARDWARE_NAME
     , AH1.MODEL_NAME
   --, ISNULL(CASE WHEN DSP.DISTANCE - DSP.RADIUS <= 0 THEN -1 * ( DSP.RADIUS ) * 100 - (DSP.RADIUS-DISTANCE)  ELSE DSP.DISTANCE - DSP.RADIUS END,9999999999999999) AS STATION_DISTANCE 
     , ISNULL(FF.FILE_URL,'') AS LOGO_URL
	FROM T_DEVICE A 
   INNER JOIN T_COMMON AFR
      ON AFR.MAIN_CODE = 'H002'
	 AND AFR.SUB_CODE  = A.AD_FRAME_TYPE
    LEFT JOIN T_HARDWARE AH1
  	ON A.HARDWARE_CODE = AH1.HARDWARE_CODE
  LEFT JOIN T_DEVICE_STATION A1
    ON A.STATION_CODE = A1.STATION_CODE
  OUTER APPLY (
     SELECT  TOP 1 DEVICE_CODE, LATITUDE, LONGITUDE    
	        ,JIBUN_ADDRESS,  RADIUS FROM T_DEVICE_PLACE 
	 WHERE DEVICE_CODE = A.DEVICE_CODE
	  --GROUP BY DEVICE_CODE
  ) A2 
  LEFT JOIN T_STORE B
    ON A.STORE_CODE = B.STORE_CODE
  
  LEFT JOIN T_STORE_GROUP SG
    ON A.GROUP_CODE = SG.GROUP_CODE
  LEFT JOIN T_STORE B1
    ON A.CONTACT_STORE_CODE = B1.STORE_CODE
 INNER JOIN T_COMMON C1
    ON C1.MAIN_CODE = 'B001'
   AND C1.SUB_CODE  = A.BUSI_TYPE
  LEFT JOIN T_COMMON C2
    ON C2.MAIN_CODE = 'B002'
   AND C2.SUB_CODE  = A.BUSI_TYPE2
  LEFT JOIN T_COMMON C3
    ON C3.MAIN_CODE = 'S006'
   AND C3.SUB_CODE  = A.STATUS
  LEFT JOIN T_COMMON C4
    ON C4.MAIN_CODE = 'D003'
   AND C4.SUB_CODE  = A.DEVICE_TYPE
  LEFT JOIN T_MEMBER M
    ON A.UPDATE_CODE = M.MEMBER_CODE
  LEFT JOIN T_MEMBER M_REQ
    ON A.MEMBER_CODE = M_REQ.MEMBER_CODE
  LEFT JOIN T_MEMBER_EMPLOYEE ME
    ON A.CONTACT_STORE_CODE = ME.STORE_CODE
   AND A.CONTACT_CODE       = ME.MEMBER_CODE
  LEFT JOIN (SELECT DEVICE_CODE, COUNT(*) AS MAIN_CNT FROM T_DEVICE_MAIN 
             WHERE HIDE = 0
             GROUP BY DEVICE_CODE
			) DM
		 ON A.DEVICE_CODE = DM.DEVICE_CODE
 LEFT JOIN (SELECT DEVICE_CODE, COUNT(*) AS PLACE_CNT FROM T_DEVICE_PLACE 
             GROUP BY DEVICE_CODE
			) DP
		 ON A.DEVICE_CODE = DP.DEVICE_CODE    
 OUTER APPLY (SELECT dbo.FN_TO_DISTANCE( A2.LATITUDE, A2.LONGITUDE,DSP.LATITUDE, DSP.LONGITUDE,'M') AS DISTANCE
                    ,DSP.RADIUS
            FROM T_DEVICE_STATION_PLACE DSP
             WHERE A.STATION_CODE = DSP.STATION_CODE 
			   AND DSP.IS_RANGE = 1
	) DSP
 LEFT JOIN T_FILE FF
       ON FF.TABLE_NAME = 'T_DEVICE'
      AND FF.TABLE_KEY  = CONVERT(VARCHAR(20), A.DEVICE_CODE)
      AND FF.FILE_SEQ   = 1
      AND FF.REF_DATA1  = '1'
LEFT JOIN T_DEVICE DV
       ON A.PARENT_DEVICE_CODE = DV.DEVICE_CODE
 WHERE 1=1
     #[COMPANY_CODE]
     #[STORE_CODE]
     #[GROUP_CODE]
     #[DEVICE_CODE]
     #[DEVICE_NAME]
     #[STORE_DEVICE_NAME]
     #[BUSI_TYPE]
     #[BUSI_TYPE2]
     #[STATUS]
     #[CONTACT_CODE]
     #[AUTH_YN]
     #[SEARCH_CATEGORY_CODE]
     #[STORE_NAME]
     #[CONTACT_DEPT_CODE]
     #[CONTACT_DEPT_SEARCH]
     #[CONTACT_PARENT_MEMBER_CODE]
     #[NOT_DEVICE_CODE]
     #[STATION_CODE]
     #[STATION_NAME]
     #[HIDE]
     #[IS_VIRTUAL_DEVICE]
     #[NOT_AD_CODE]
	 #[NOT_MY_AD_CODE]
     #[DEVICE_CONTAINING_AD_CODE]
     #[MEMBER_CODE]
     #[USER_ID]
     #[USER_NAME]
     #[AD_CODE]
	 #[MY_AD_CODE]
     #[MY_STORE_CODE]
	 #[AD_FRAME_TYPE]
     #[VIRTUAL_DEVICE_NAME]
	 AND A.IS_MOBILE = 0
     --AND A.HIDE = 0
   )SELECT * , (SELECT COUNT(1) FROM T_TABLE) TOTAL_ROWCOUNT FROM T_TABLE A      
  WHERE SEQ BETWEEN  (@PAGE - 1) * (@PAGE_COUNT) + 1 AND @PAGE * @PAGE_COUNT
  ORDER BY SEQ

      ]]>
			</FixedSQL>
			<DynamicBodys>
				<Key>COMPANY_CODE</Key>
				<Body>AND (B.COMPANY_CODE = {0} OR B1.COMPANY_CODE = {0})</Body>
			</DynamicBodys>
			<DynamicBodys>
				<Key>STORE_CODE</Key>
				<Body>AND (A.STORE_CODE = {0} OR A.CONTACT_STORE_CODE = {0}) </Body>
			</DynamicBodys>
			<DynamicBodys>
				<Key>GROUP_CODE</Key>
				<Body>AND A.GROUP_CODE = {0} </Body>
			</DynamicBodys>
			<DynamicBodys>
				<Key>DEVICE_CODE</Key>
				<Body>AND A.DEVICE_CODE  = {0}</Body>
			</DynamicBodys>
			<DynamicBodys>
				<Key>DEVICE_NAME</Key>
				<Body>AND A.DEVICE_NAME LIKE N'%{0}%' </Body>
			</DynamicBodys>
			<DynamicBodys>
				<Key>STORE_DEVICE_NAME</Key>
				<Body>AND (B.STORE_NAME LIKE N'%{0}%' OR A.DEVICE_NAME LIKE N'%{0}%') </Body>
			</DynamicBodys>
			<DynamicBodys>
				<Key>BUSI_TYPE</Key>
				<Body>AND A.BUSI_TYPE  = {0}</Body>
			</DynamicBodys>
			<DynamicBodys>
				<Key>BUSI_TYPE2</Key>
				<Body>AND A.BUSI_TYPE2  = {0}</Body>
			</DynamicBodys>
			<DynamicBodys>
				<Key>STATUS</Key>
				<Body>AND A.STATUS  = {0}</Body>
			</DynamicBodys>
			<DynamicBodys>
				<Key>CONTACT_CODE</Key>
				<Body>AND A.CONTACT_CODE  = {0}</Body>
			</DynamicBodys>
			<DynamicBodys>
				<Key>AUTH_YN</Key>
				<Body>AND CASE WHEN A.AUTH_NUMBER IS NULL THEN 0 ELSE 1 END = {0}</Body>
			</DynamicBodys>
			<DynamicBodys>
				<Key>SEARCH_CATEGORY_CODE</Key>
				<Body>
					AND A.DEVICE_CODE IN (SELECT AA.DEVICE_CODE
					FROM T_SEARCH_KEYWORD AA
					INNER JOIN T_CATEGORY_KEYWORD AB
					ON AA.CK_CODE = AB.CK_CODE
					INNER JOIN T_CATEGORY AC
					ON AB.CATEGORY_CODE = AC.CATEGORY_CODE
					WHERE AC.SEARCH_CATEGORY_CODE LIKE '{0}%'
					)
				</Body>
			</DynamicBodys>
			<DynamicBodys>
				<Key>STORE_NAME</Key>
				<Body>AND B.STORE_NAME LIKE N'%{0}%' </Body>
			</DynamicBodys>
			<DynamicBodys>
				<Key>CONTACT_DEPT_CODE</Key>
				<Body>AND ME.DEPT_CODE LIKE {0}</Body>
			</DynamicBodys>
			<DynamicBodys>
				<Key>CONTACT_DEPT_SEARCH</Key>
				<Body>AND DE.DEPT_SEARCH LIKE N'{0}%' </Body>
			</DynamicBodys>
			<DynamicBodys>
				<Key>CONTACT_PARENT_MEMBER_CODE</Key>
				<Body>AND (A.CONTACT_CODE = 2 or ME.PARENT_MEMBER_CODE = 2) </Body>
			</DynamicBodys>
			<DynamicBodys>
				<Key>NOT_DEVICE_CODE</Key>
				<Body><![CDATA[  AND A.DEVICE_CODE <> {0}]]> </Body>
			</DynamicBodys>
			<DynamicBodys>
				<Key>STATION_CODE</Key>
				<Body><![CDATA[  AND A.STATION_CODE = {0}]]> </Body>
			</DynamicBodys>
			<DynamicBodys>
				<Key>STATION_NAME</Key>
				<Body><![CDATA[  AND A1.STATION_NAME LIKE N'%{0}%']]> </Body>
			</DynamicBodys>

			<DynamicBodys>
				<Key>HIDE</Key>
				<Body><![CDATA[  AND A.HIDE = {0}]]> </Body>
			</DynamicBodys>
			<DynamicBodys>
				<Key>IS_VIRTUAL_DEVICE</Key>
				<Body>
					<![CDATA[  AND (({0} = 1 AND A.AUTH_NUMBER IS NULL AND A.STATION_CODE IS NULL)
                          OR ({0} = 0 AND AUTH_NUMBER IS NOT NULL))  ]]>
				</Body>
			</DynamicBodys>
			<DynamicBodys>
				<Key>NOT_AD_CODE</Key>
				<Body>
					<![CDATA[  AND A.DEVICE_CODE NOT IN (SELECT DEVICE_CODE FROM T_AD_DEVICE 
	                             WHERE AD_CODE = {0}
                               GROUP BY DEVICE_CODE
		                      )
                     ]]>
				</Body>
			</DynamicBodys>
			<DynamicBodys>
				<Key>NOT_MY_AD_CODE</Key>
				<Body>
					<![CDATA[  AND A.DEVICE_CODE NOT IN (SELECT DEVICE_CODE FROM T_AD_DEVICE 
	                             WHERE AD_CODE = {0} AND STATUS = 0
                               GROUP BY DEVICE_CODE
		                      )
                     ]]>
				</Body>
			</DynamicBodys>
			<DynamicBodys>
				<Key>DEVICE_CONTAINING_AD_CODE</Key>
				<Body>
					<![CDATA[  AND A.DEVICE_CODE IN (SELECT B.DEVICE_CODE 
				                                       FROM T_AD_PLACE A
				                                      INNER JOIN T_DEVICE_PLACE B
					                                     ON DBO.FN_TO_DISTANCE(A.LATITUDE, A.LONGITUDE, B.LATITUDE, B.LONGITUDE,'M') <= A.RADIUS + B.RADIUS 
			                                          WHERE A.AD_CODE = {0}
				                                      GROUP BY B.DEVICE_CODE ) 
					]]>
				</Body>
			</DynamicBodys>
			<DynamicBodys>
				<Key>MEMBER_CODE</Key>
				<Body>AND A.MEMBER_CODE = {0} </Body>
			</DynamicBodys>
			<DynamicBodys>
				<Key>USER_ID</Key>
				<Body>AND M_REQ.USER_ID LIKE N'{0}%' </Body>
			</DynamicBodys>
			<DynamicBodys>
				<Key>USER_NAME</Key>
				<Body>AND M_REQ.USER_NAME LIKE N'%{0}%' </Body>
			</DynamicBodys>
			<DynamicBodys>
				<Key>AD_CODE</Key>
				<Body>AND A.DEVICE_CODE IN (SELECT DEVICE_CODE FROM T_AD_DEVICE WHERE AD_CODE = {0} ) </Body>
			</DynamicBodys>
			<DynamicBodys>
				<Key>MY_AD_CODE</Key>
				<Body>AND A.DEVICE_CODE IN (SELECT DEVICE_CODE FROM T_AD_DEVICE WHERE AD_CODE = {0} AND STATUS = 0 ) </Body>
			</DynamicBodys>
			<DynamicBodys>
				<Key>MY_STORE_CODE</Key>
				<Body>AND (A.DEVICE_TYPE IN (1,3) AND A.STORE_CODE = {0} /* 배너와 같은 업체만 등록가능함, 로컬박스 내배너타입이 등록되어야 함 */)</Body>
			</DynamicBodys>
			<DynamicBodys>
				<Key>AD_FRAME_TYPE</Key>
				<Body>AND A.AD_FRAME_TYPE = {0}</Body>
			</DynamicBodys>
			<DynamicBodys>
				<Key>REAL_DEVICE</Key>
				<Body>AND (1 = {0} AND A.STATUS IN (1,9))</Body>
			</DynamicBodys>
			<DynamicBodys>
				<Key>VIRTUAL_DEVICE_NAME</Key>
				<Body><![CDATA[AND DV.DEVICE_NAME LIKE N'%{0}%']]> </Body>
			</DynamicBodys>
		</TemplateSQL>
	</DBAgentTemplate>

	<DBAgentTemplate TemplateID="GetVirtualDevice">
		<!-- 
    SqlType : SQL의 형태를 지정합니다.
      Example 1:<SqlType>FixedSQL</SqlType> 고정적인 SQL을 지원합니다. 
      Example 2:<SqlType>DynamicSQL</SqlType> 동적인 SQL Type1을 지원합니다.  
    Description : 해당 SQL의 기능설명을 적습니다.
    SQLModifier : 해당 SQL의 작성자(수정자)를 적습니다
    LastModifyDate : 해당 SQL의 마지막 수정일을 적습니다
    -->
		<Information>
			<SqlType>DynamicSQL</SqlType>
			<Description>가상 로컬박스 가져오기</Description>
			<SQLModifier>권용현</SQLModifier>
			<LastModifyDate>2019-12-10</LastModifyDate>
		</Information>

		<TemplateSQL>
			<!-- FixedSQL : 고정된 SQL이 들어가는 곳입니다. -->
			<FixedSQL>
				<![CDATA[ 
  /******************************************************/
  /* 가상 로컬박스 가져오기    GetVirtualDevice           */
  /******************************************************/
  SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
  
  DECLARE @STORE_CODE INT = {0}

	   SELECT PARENT_DEVICE_CODE 
		 FROM T_DEVICE 
		WHERE STORE_CODE = @STORE_CODE 
		  AND DEVICE_CODE = PARENT_DEVICE_CODE
    
  SET NOCOUNT OFF 
	]]>
			</FixedSQL>
		</TemplateSQL>
	</DBAgentTemplate>

	<DBAgentTemplate TemplateID="AddVirtulaDevice">
		<!-- 
    SqlType : SQL의 형태를 지정합니다.
      Example 1:<SqlType>FixedSQL</SqlType> 고정적인 SQL을 지원합니다. 
      Example 2:<SqlType>DynamicSQL</SqlType> 동적인 SQL Type1을 지원합니다.  
    Description : 해당 SQL의 기능설명을 적습니다.
    SQLModifier : 해당 SQL의 작성자(수정자)를 적습니다
    LastModifyDate : 해당 SQL의 마지막 수정일을 적습니다
    -->
		<Information>
			<SqlType>DynamicSQL</SqlType>
			<Description>가상 로컬박스 추가</Description>
			<SQLModifier>권용현</SQLModifier>
			<LastModifyDate>2019-12-10</LastModifyDate>
		</Information>

		<TemplateSQL>
			<!-- FixedSQL : 고정된 SQL이 들어가는 곳입니다. -->
			<FixedSQL>
				<![CDATA[ 
  /******************************************************/
  /* 가상 로컬박스 추가    AddVirtulaDevice				*/
  /******************************************************/
  DECLARE @DEVICE_CODE			BIGINT = {0}
		, @PARENT_DEVICE_CODE	BIGINT = {1}
	
	IF EXISTS (SELECT PARENT_DEVICE_CODE FROM T_DEVICE WHERE PARENT_DEVICE_CODE = @PARENT_DEVICE_CODE)
	BEGIN
		 UPDATE T_DEVICE
		    SET PARENT_DEVICE_CODE = @PARENT_DEVICE_CODE
		  WHERE DEVICE_CODE = @DEVICE_CODE
	END
	ELSE
	BEGIN
		 SELECT N'가상로컬박스가 없습니다. 다시 시도하십시오.' AS ERROR_MESSAGE
	END

	SELECT CONVERT(VARCHAR(20), @DEVICE_CODE) AS DATA, '' ERROR_MESSAGE
	]]>
			</FixedSQL>
		</TemplateSQL>
	</DBAgentTemplate>

	<DBAgentTemplate TemplateID="InitVirtualDevice">
		<!-- 
    SqlType : SQL의 형태를 지정합니다.
      Example 1:<SqlType>FixedSQL</SqlType> 고정적인 SQL을 지원합니다. 
      Example 2:<SqlType>DynamicSQL</SqlType> 동적인 SQL Type1을 지원합니다.  
    Description : 해당 SQL의 기능설명을 적습니다.
    SQLModifier : 해당 SQL의 작성자(수정자)를 적습니다
    LastModifyDate : 해당 SQL의 마지막 수정일을 적습니다
    -->
		<Information>
			<SqlType>DynamicSQL</SqlType>
			<Description>가상 로컬박스 추가</Description>
			<SQLModifier>권용현</SQLModifier>
			<LastModifyDate>2019-12-10</LastModifyDate>
		</Information>

		<TemplateSQL>
			<!-- FixedSQL : 고정된 SQL이 들어가는 곳입니다. -->
			<FixedSQL>
				<![CDATA[ 
  /******************************************************/
  /* 가상 로컬박스 추가    InitVirtualDevice				*/
  /******************************************************/
  DECLARE @DEVICE_CODE                    BIGINT               = N'{0}'
		, @COMPANY_CODE                   INT                  = CONVERT(INT, CASE WHEN ISNUMERIC('{1}') = 1 THEN '{1}' ELSE NULL END )
		, @STORE_CODE                     INT                  = CONVERT(INT, CASE WHEN ISNUMERIC('{2}') = 1 THEN '{2}' ELSE NULL END )
		, @MEMBER_CODE                    INT                  = CONVERT(INT, CASE WHEN ISNUMERIC('{3}') = 1 THEN '{3}' ELSE NULL END )		
		, @DEVICE_NAME                    NVARCHAR(200)        = N'{4}' + N'_VIRTUAL'
		, @DEVICE_DESC                    NVARCHAR(400)        = N'{5}'
		, @GROUP_CODE                     INT                  = CONVERT(INT, CASE WHEN ISNUMERIC('{6}') = 1 THEN '{6}' ELSE NULL END )
		, @BUSI_TYPE                      INT                  = CONVERT(INT, CASE WHEN ISNUMERIC('{7}') = 1 THEN '{7}' ELSE NULL END )
		, @BUSI_TYPE2                     INT                  = CONVERT(INT, CASE WHEN ISNUMERIC('{8}') = 1 THEN '{8}' ELSE NULL END )
		, @CONTACT_COMPANY_CODE           INT                  = CONVERT(INT, CASE WHEN ISNUMERIC('{9}') = 1 THEN '{9}' ELSE NULL END )
		, @CONTACT_STORE_CODE             INT                  = CONVERT(INT, CASE WHEN ISNUMERIC('{10}') = 1 THEN '{10}' ELSE NULL END )
		, @CONTACT_CODE                   INT                  = CONVERT(INT, CASE WHEN ISNUMERIC('{11}') = 1 THEN '{11}' ELSE NULL END )
		, @CONTACT_NAME                   NVARCHAR(30)         = N'{12}'
		, @CONTACT_PHONE                  NVARCHAR(20)         = N'{13}'
		, @CONTACT_EMAIL                  NVARCHAR(50)         = N'{14}'
		, @AD_DISTANCE                    INT                  = CONVERT(INT, CASE WHEN ISNUMERIC('{15}') = 1 THEN '{15}' ELSE NULL END )
		, @STATUS                         INT                  = CONVERT(INT, CASE WHEN ISNUMERIC('{16}') = 1 THEN '{16}' ELSE '0' END )
		, @HIDE                           BIT                  = CONVERT(BIT, CASE WHEN ISNUMERIC('{17}') = 1 THEN '{17}' ELSE '0' END )
		, @REMARK                         NVARCHAR(200)        = N'{18}'
		, @TIME_ZONE                      NUMERIC(3,1)         = CONVERT(NUMERIC(3,1), CASE WHEN ISNUMERIC('{19}') = 1 THEN '{19}' ELSE '0' END )
		, @INSERT_CODE                    INT                  = {20}
		, @INSERT_DATE                    DATETIME             = GETDATE() 
		, @UPDATE_CODE                    INT                  = {20}
		, @UPDATE_DATE                    DATETIME             = GETDATE() 
		, @LOGO_URL                       NVARCHAR(200)        = '{21}'
		, @DEVICE_NEXT_CODE			      BIGINT			   = 0

	SET @DEVICE_NEXT_CODE = IDENT_CURRENT('T_DEVICE') + 1

	INSERT INTO T_DEVICE
	  (	   COMPANY_CODE                  		, STORE_CODE                    		, MEMBER_CODE                   		
	     , DEVICE_NUMBER                 		, AUTH_NUMBER                   		, DEVICE_NAME                   		, DEVICE_DESC                   		
	     , GROUP_CODE                    		, BUSI_TYPE                     		, BUSI_TYPE2                    		, ADDRESS1                      		
	     , ADDRESS2                      		, ZIP_CODE                      		, LATITUDE                      		, LONGITUDE                    		
	     , CONTACT_COMPANY_CODE          		, CONTACT_STORE_CODE            		, CONTACT_CODE                  		, CONTACT_NAME                  		
	     , CONTACT_PHONE                 		, CONTACT_EMAIL                 		, CATEGORY_CODES                		, AD_DISTANCE                   		
	     , DATA_CYCLE_TIME               		, AD_CYCLE_TIME                 		, PAGE_WAITING_TIME             		, STATUS                        		
	     , HIDE                          		, REMARK                        		, WORKING_TIME                  		, TIME_ZONE                     		
	     , INSERT_CODE                   		, INSERT_DATE                   		, UPDATE_CODE                   		, UPDATE_DATE
	     , STATION_CODE							, AD_FRAME_TYPE							, HARDWARE_CODE							, DEVICE_TYPE 
		 , IS_MOBILE							, PARENT_DEVICE_CODE			        , RADIUS								, ITEM_TYPE
	  )
	 SELECT @COMPANY_CODE                 		, @STORE_CODE                   	    , @MEMBER_CODE                  	
	        , NULL                				, NULL                  				, @DEVICE_NAME							, @DEVICE_DESC                  		
			, NULL                   	        , @BUSI_TYPE                    		, @BUSI_TYPE2                   		, N''                     	
	        , N''		                    	, ''	                    			, 0.00                     		        , 0.00                   			
			, @CONTACT_COMPANY_CODE         	, @CONTACT_STORE_CODE					, @CONTACT_CODE                 		, @CONTACT_NAME                 		
			, @CONTACT_PHONE                	, @CONTACT_EMAIL                		, NULL               					, @AD_DISTANCE                  	
	        , NULL              				, NULL                					, NULL            						, @STATUS                       	
			, @HIDE                         	, @REMARK                       		, NULL                 				    , @TIME_ZONE                    		
			, @INSERT_CODE                  	, @INSERT_DATE                  		, @UPDATE_CODE                  		, @UPDATE_DATE                  	                  	
			, NULL								, 1										, NULL									, 1						
			, 1									, @DEVICE_NEXT_CODE						, 0										, 0
	
	DECLARE @PLACE_TYPE		INT				= 0
		  , @SEQ			INT				= 0
		  , @CK_CODE		INT				= 0
		  , @REGION			NVARCHAR(100)	= N''
		  , @JIBUN_ADDRESS	NVARCHAR(200)	= N''
		  , @ROAD_ADDRESS	NVARCHAR(200)	= N''
		  , @BUILDING		NVARCHAR(50)	= N''
		  , @ZIP_CODE		NVARCHAR(5)		= N''
		  , @LATITUDE		NUMERIC(20,16)	= 0
		  , @LONGITUDE		NUMERIC(20,16)	= 0
		  , @RADIUS			INT				= 0
	
	SELECT @PLACE_TYPE		= PLACE_TYPE
         , @SEQ				= SEQ
	     , @CK_CODE			= CK_CODE
	     , @REGION			= REGION
	     , @JIBUN_ADDRESS	= JIBUN_ADDRESS
	     , @ROAD_ADDRESS	= ROAD_ADDRESS
	     , @BUILDING		= BUILDING
	     , @ZIP_CODE		= ZIP_CODE
	     , @LATITUDE		= LATITUDE
	     , @LONGITUDE		= LONGITUDE
	     , @RADIUS			= RADIUS
	     , @REMARK			= REMARK
	  FROM T_DEVICE_PLACE 
	 WHERE DEVICE_CODE = @DEVICE_CODE

	 IF(@CK_CODE <> 0)
	 BEGIN
		  INSERT INTO T_DEVICE_PLACE
			(
		  		  PLACE_TYPE		, SEQ			, CK_CODE		, REGION
		  		, JIBUN_ADDRESS		, ROAD_ADDRESS	, BUILDING		, ZIP_CODE
		  		, LATITUDE			, LONGITUDE		, RADIUS		, REMARK
		  		, DEVICE_CODE		, INSERT_CODE	, INSERT_DATE
		    )
		  SELECT  @PLACE_TYPE		, @SEQ			, @CK_CODE		, @REGION
		  		, @JIBUN_ADDRESS	, @ROAD_ADDRESS	, @BUILDING		, @ZIP_CODE
		  		, @LATITUDE			, @LONGITUDE	, @RADIUS		, @REMARK
		  		, @DEVICE_NEXT_CODE	, @INSERT_CODE  , @INSERT_DATE
    END

	IF EXISTS (SELECT DEVICE_CODE FROM T_DEVICE WHERE DEVICE_CODE = @DEVICE_CODE)
	BEGIN
		 UPDATE T_DEVICE
		    SET PARENT_DEVICE_CODE = @DEVICE_NEXT_CODE
		  WHERE DEVICE_CODE = @DEVICE_CODE 
	END

	SELECT CONVERT(VARCHAR(20), @DEVICE_NEXT_CODE) AS DATA, '' ERROR_MESSAGE
	]]>
			</FixedSQL>
		</TemplateSQL>
	</DBAgentTemplate>

	<DBAgentTemplate TemplateID="GetRelativeDeviceList">
		<!-- 
    SqlType : SQL의 형태를 지정합니다.
      Example 1:<SqlType>FixedSQL</SqlType> 고정적인 SQL을 지원합니다. 
      Example 2:<SqlType>DynamicSQL</SqlType> 동적인 SQL Type1을 지원합니다.  
    Description : 해당 SQL의 기능설명을 적습니다.
    SQLModifier : 해당 SQL의 작성자(수정자)를 적습니다
    LastModifyDate : 해당 SQL의 마지막 수정일을 적습니다
    -->
		<Information>
			<SqlType>DynamicSQL</SqlType>
			<Description>대표/서브 로컬박스 가져오기</Description>
			<SQLModifier>권용현</SQLModifier>
			<LastModifyDate>2019-11-25</LastModifyDate>
		</Information>

		<TemplateSQL>
			<!-- FixedSQL : 고정된 SQL이 들어가는 곳입니다. -->
			<FixedSQL>
				<![CDATA[ 
  /******************************************************/
  /* 대표/서브 로컬박스 가져오기    GetRelativeDeviceList */
  /******************************************************/
  SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
  
  DECLARE @DEVICE_CODE BIGINT			= {0}
	    , @PARENT_DEVICE_CODE BIGINT	= 0
  
  SELECT @PARENT_DEVICE_CODE = PARENT_DEVICE_CODE 
    FROM T_DEVICE 
   WHERE DEVICE_CODE = @DEVICE_CODE
  
  -- 서브 로컬 -> 대표 로컬 로드
  IF(@PARENT_DEVICE_CODE <> @DEVICE_CODE)
  BEGIN
  	    SELECT TOP 1 D.DEVICE_CODE		
  	    	 , D.DEVICE_NAME
        	 , DP.JIBUN_ADDRESS
  	    	 , DP.LATITUDE
  	    	 , DP.LONGITUDE
  	         , CM.NAME AS STATUS
			 , D.PARENT_DEVICE_CODE
			 , D.IS_MOBILE
  	      FROM T_DEVICE AS D
  	      LEFT JOIN T_DEVICE_PLACE AS DP
  	    	ON DP.DEVICE_CODE = D.DEVICE_CODE
  	     INNER JOIN T_COMMON CM
  	    	ON CM.MAIN_CODE = 'S006'
  	    	AND CM.SUB_CODE = D.STATUS
  	      WHERE 1=1
  	        AND D.DEVICE_CODE = @PARENT_DEVICE_CODE  
  END
  ELSE
  BEGIN
  	   SELECT D.DEVICE_CODE
  	   		, D.DEVICE_NAME
       		, DP.JIBUN_ADDRESS
  	   		, DP.LATITUDE
  	   		, DP.LONGITUDE
  	   		, CM.NAME AS STATUS
			, D.PARENT_DEVICE_CODE
			, D.IS_MOBILE
  	   	 FROM T_DEVICE AS D
  	   	 LEFT JOIN T_DEVICE_PLACE AS DP
  	   	   ON DP.DEVICE_CODE = D.DEVICE_CODE
  	   	INNER JOIN T_COMMON CM
  	   	   ON CM.MAIN_CODE = 'S006'
  	   	  AND CM.SUB_CODE = D.STATUS
  	   	WHERE 1=1
  	       AND D.PARENT_DEVICE_CODE = @PARENT_DEVICE_CODE
  	   	   AND D.DEVICE_CODE <> @PARENT_DEVICE_CODE
  END
    
  SET NOCOUNT OFF 
	]]>
			</FixedSQL>
		</TemplateSQL>
	</DBAgentTemplate>

	<DBAgentTemplate TemplateID="RelativeDeviceDelete">
		<!-- 
    SqlType : SQL의 형태를 지정합니다.
      Example 1:<SqlType>FixedSQL</SqlType> 고정적인 SQL을 지원합니다. 
      Example 2:<SqlType>DynamicSQL</SqlType> 동적인 SQL Type1을 지원합니다.  
    Description : 해당 SQL의 기능설명을 적습니다.
    SQLModifier : 해당 SQL의 작성자(수정자)를 적습니다
    LastModifyDate : 해당 SQL의 마지막 수정일을 적습니다
    -->
		<Information>
			<SqlType>DynamicSQL</SqlType>
			<Description>대표/서브 로컬박스 삭제</Description>
			<SQLModifier>권용현</SQLModifier>
			<LastModifyDate>2019-11-26</LastModifyDate>
		</Information>

		<TemplateSQL>
			<!-- FixedSQL : 고정된 SQL이 들어가는 곳입니다. -->
			<FixedSQL>
				<![CDATA[ 
  /******************************************************/
  /* 대표/서브 로컬박스 삭제    RelativeDeviceDelete      */
  /******************************************************/
	DECLARE @DEVICE_CODE			BIGINT = {0}
	      , @PARENT_DEVICE_CODE		BIGINT = {1}
		  , @RELATIVE_DEVICE_CODE	BIGINT = {2}
	
	-- 대표 로컬 삭제
	IF(@DEVICE_CODE = @PARENT_DEVICE_CODE)
	BEGIN
		 UPDATE T_DEVICE 
	        SET PARENT_DEVICE_CODE = NULL 
	      WHERE DEVICE_CODE = @RELATIVE_DEVICE_CODE
	END
	-- 서브 로컬 삭제
	ELSE
	BEGIN
	     UPDATE T_DEVICE 
	        SET PARENT_DEVICE_CODE = NULL 
	      WHERE DEVICE_CODE = @DEVICE_CODE
	END

	SELECT @DEVICE_CODE
	]]>
			</FixedSQL>
		</TemplateSQL>
	</DBAgentTemplate>

	<DBAgentTemplate TemplateID="GetRelativeDeviceListPop">
		<!-- 
    SqlType : SQL의 형태를 지정합니다.
      Example 1:<SqlType>FixedSQL</SqlType> 고정적인 SQL을 지원합니다. 
      Example 2:<SqlType>DynamicSQL</SqlType> 동적인 SQL Type1을 지원합니다.  
    Description : 해당 SQL의 기능설명을 적습니다.
    SQLModifier : 해당 SQL의 작성자(수정자)를 적습니다
    LastModifyDate : 해당 SQL의 마지막 수정일을 적습니다
    -->
		<Information>
			<SqlType>DynamicSQL</SqlType>
			<Description>대표/서브 로컬박스 팝업 조회</Description>
			<SQLModifier>권용현</SQLModifier>
			<LastModifyDate>2019-11-26</LastModifyDate>
		</Information>

		<TemplateSQL>
			<!-- FixedSQL : 고정된 SQL이 들어가는 곳입니다. -->
			<FixedSQL>
				<![CDATA[ 
  /**********************************************************/
  /* 대표/서브 로컬박스 팝업 조회    GetRelativeDeviceListPop */
  /**********************************************************/
  SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

	DECLARE @PAGE				INT				= {0}
		  , @PAGE_COUNT			INT				= {1}
		  , @DEVICE_CODE		BIGINT			= {3}
		  , @PARENT_DEVICE_CODE	BIGINT			= 0
		  , @IS_MOBILE			BIT				= 0
	
	SELECT @PARENT_DEVICE_CODE = PARENT_DEVICE_CODE FROM T_DEVICE WHERE DEVICE_CODE = @DEVICE_CODE
	
	IF ISNULL(@PARENT_DEVICE_CODE, 0) = @DEVICE_CODE
	BEGIN
		 SET @IS_MOBILE = 0;
	END
	ELSE
	BEGIN
	     SET @IS_MOBILE = 1;
	END

	;WITH T_TABLE AS
	  ( 
		SELECT ROW_NUMBER() OVER(ORDER BY {2}) AS SEQ
		     , D.DEVICE_CODE				 
  	   		 , D.DEVICE_NAME
       		 , DP.JIBUN_ADDRESS
  	   		 , S.STORE_NAME
  			 , CM.NAME AS STATUS
  		  FROM T_DEVICE AS D
  	      LEFT JOIN T_DEVICE_PLACE AS DP
  	   		ON DP.DEVICE_CODE = D.DEVICE_CODE
		  LEFT JOIN T_STORE AS S
	        ON S.STORE_CODE = D.STORE_CODE
  	     INNER JOIN T_COMMON CM
  	   	    ON CM.MAIN_CODE = 'S006'
  	   	   AND CM.SUB_CODE = D.STATUS
		  WHERE 1=1
			AND IS_MOBILE = @IS_MOBILE
			#[STORE_CODE]
			#[MEMBER_CODE]
			AND D.DEVICE_CODE <> @DEVICE_CODE
			#[DEVICE_NAME]
			AND ((@IS_MOBILE = 0 AND D.PARENT_DEVICE_CODE IS NULL) 
		     OR (@IS_MOBILE = 1 AND D.PARENT_DEVICE_CODE IS NOT NULL))
	   )SELECT * , (SELECT COUNT(1) FROM T_TABLE) TOTAL_ROWCOUNT FROM T_TABLE A      
	  WHERE SEQ BETWEEN  (@PAGE - 1) * (@PAGE_COUNT) + 1 AND @PAGE * @PAGE_COUNT
	  
   SET NOCOUNT OFF
	]]>
			</FixedSQL>
			<DynamicBodys>
				<Key>STORE_CODE</Key>
				<Body>AND D.STORE_CODE = {0}</Body>
			</DynamicBodys>
			<DynamicBodys>
				<Key>MEMBER_CODE</Key>
				<Body>AND D.MEMBER_CODE = {0}</Body>
			</DynamicBodys>
			<DynamicBodys>
				<Key>DEVICE_NAME</Key>
				<Body><![CDATA[  AND D.DEVICE_NAME LIKE N'%{0}%' ]]> </Body>
			</DynamicBodys>
		</TemplateSQL>
	</DBAgentTemplate>

	<DBAgentTemplate TemplateID="RelativeDeviceSave">
		<!-- 
    SqlType : SQL의 형태를 지정합니다.
      Example 1:<SqlType>FixedSQL</SqlType> 고정적인 SQL을 지원합니다. 
      Example 2:<SqlType>DynamicSQL</SqlType> 동적인 SQL Type1을 지원합니다.  
    Description : 해당 SQL의 기능설명을 적습니다.
    SQLModifier : 해당 SQL의 작성자(수정자)를 적습니다
    LastModifyDate : 해당 SQL의 마지막 수정일을 적습니다
    -->
		<Information>
			<SqlType>DynamicSQL</SqlType>
			<Description>대표/서브 로컬박스 저장</Description>
			<SQLModifier>권용현</SQLModifier>
			<LastModifyDate>2019-11-26</LastModifyDate>
		</Information>

		<TemplateSQL>
			<!-- FixedSQL : 고정된 SQL이 들어가는 곳입니다. -->
			<FixedSQL>
				<![CDATA[ 
  /******************************************************/
  /* 대표/서브 로컬박스 저장    RelativeDeviceSave		*/
  /******************************************************/
	DECLARE @SELECT_DEVICE_CODE	BIGINT			= {0}
		  , @CUR_DEVICE_CODE	BIGINT			= {1}
		  , @DEVICE_NAME		NVARCHAR(100)   = N''
		  , @RTN_MSG			NVARCHAR(400)	= N''
	      , @IS_MOBILE		    BIT				= 0
	
	-- 추가할 로컬이 삭제된 경우
	IF NOT EXISTS (SELECT DEVICE_CODE FROM T_DEVICE WHERE DEVICE_CODE = @SELECT_DEVICE_CODE)
	BEGIN
		 SET @RTN_MSG = N'삭제된 로컬박스는 추가할 수 없습니다.'
		 GOTO EXCEPTION
	END
	
	SELECT @IS_MOBILE = IS_MOBILE FROM T_DEVICE WHERE DEVICE_CODE = @CUR_DEVICE_CODE
	
	IF (@IS_MOBILE) = 1
	BEGIN
		 -- 추가할 로컬이 대표일 경우
		 IF (SELECT COUNT(*) FROM T_DEVICE WHERE PARENT_DEVICE_CODE = @SELECT_DEVICE_CODE) > 0
		 BEGIN
		      SELECT @DEVICE_NAME = DEVICE_NAME FROM T_DEVICE WHERE DEVICE_CODE = @SELECT_DEVICE_CODE
		         SET @RTN_MSG = @DEVICE_NAME + N'은(는) 대표로컬박스로 설정되어 있어 추가 할 수 없습니다'
		        GOTO EXCEPTION
		 END
		 -- 추가할 로컬이 서브일 경우
		 IF (SELECT COUNT(*) FROM T_DEVICE WHERE DEVICE_CODE = @SELECT_DEVICE_CODE AND PARENT_DEVICE_CODE IS NOT NULL) > 0
		 BEGIN
		 	  SELECT @DEVICE_NAME = DEVICE_NAME FROM T_DEVICE WHERE DEVICE_CODE = @SELECT_DEVICE_CODE
		         SET @RTN_MSG = @DEVICE_NAME + N'은(는) 이미 서브로컬박스로 등록되어 있어 로컬박스를 추가할 수 없습니다.'
		        GOTO EXCEPTION
		 END
	END

	-- 내가 서브일 경우
	IF (SELECT COUNT(*) FROM T_DEVICE WHERE DEVICE_CODE = @CUR_DEVICE_CODE AND PARENT_DEVICE_CODE IS NOT NULL AND ISNULL(PARENT_DEVICE_CODE, 0) <> @CUR_DEVICE_CODE) > 0
	BEGIN
		 SELECT @DEVICE_NAME = DEVICE_NAME FROM T_DEVICE WHERE DEVICE_CODE = @CUR_DEVICE_CODE
	     SET @RTN_MSG = @DEVICE_NAME + N'은(는) 이미 서브로컬박스로 등록되어 있어 로컬박스를 추가할 수 없습니다.'
	     GOTO EXCEPTION
	END

	IF(@IS_MOBILE = 1)
	BEGIN
		 UPDATE T_DEVICE 
	        SET PARENT_DEVICE_CODE = @CUR_DEVICE_CODE 
	      WHERE DEVICE_CODE = @SELECT_DEVICE_CODE
	END
	ELSE
	BEGIN
	     UPDATE T_DEVICE 
	        SET PARENT_DEVICE_CODE = @SELECT_DEVICE_CODE 
	      WHERE DEVICE_CODE = @CUR_DEVICE_CODE
	END
    
	SELECT @SELECT_DEVICE_CODE
	 
	EXCEPTION:
  	 
	SELECT @RTN_MSG + N'<br>확인을 클릭하면 등록된 정보가 보여집니다.' AS ERROR_MESSAGE
	]]>
			</FixedSQL>
		</TemplateSQL>
	</DBAgentTemplate>

	<DBAgentTemplate TemplateID="GetDeviceMapList">
		<!-- 
    SqlType : SQL의 형태를 지정합니다.
      Example 1:<SqlType>FixedSQL</SqlType> 고정적인 SQL을 지원합니다. 
      Example 2:<SqlType>DynamicSQL</SqlType> 동적인 SQL Type1을 지원합니다.  
    Description : 해당 SQL의 기능설명을 적습니다.
    SQLModifier : 해당 SQL의 작성자(수정자)를 적습니다
    LastModifyDate : 해당 SQL의 마지막 수정일을 적습니다
    -->
		<Information>
			<SqlType>DynamicSQL</SqlType>
			<Description>로컬박스 지도 리스트</Description>
			<SQLModifier>전상훈</SQLModifier>
			<LastModifyDate>2017-11-30</LastModifyDate>
		</Information>

		<TemplateSQL>
			<!-- FixedSQL : 고정된 SQL이 들어가는 곳입니다. -->
			<FixedSQL>
				<![CDATA[ 
/****************************************************/
/* 로컬박스 지도 리스트  GetDeviceMapList     */
/****************************************************/
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED 
SELECT * FROM(
    SELECT CONVERT(VARCHAR(10), A.DEVICE_CODE) AS KEY_CODE
         , A.DEVICE_NAME AS TITLE
         , CONVERT(BIT, CASE WHEN A.AUTH_NUMBER IS NOT NULL THEN 1 ELSE 0 END) ACTIVE_YN
         , A.LATITUDE, A.LONGITUDE 
         , A.DEVICE_DESC AS CONTENT 
         , LINK_URL = '/basic/devicereg/' + CONVERT(VARCHAR(10), A.DEVICE_CODE)
         , CASE WHEN A.AUTH_NUMBER IS NOT NULL THEN 1 ELSE 0 END AS SORT_ORDER
         ,'' AS SUB_TITLE
         
      FROM T_DEVICE A
     WHERE A.STATION_CODE IS NULL
       AND A.AUTH_NUMBER IS NOT NULL
       AND A.HIDE = 0
     UNION ALL
    SELECT CONVERT(VARCHAR(10), A.STATION_CODE) AS KEY_CODE
         , A.STATION_NAME AS TITLE
         , CONVERT(BIT, 0) AS ACTIVE_YN
         , B.LATITUDE, B.LONGITUDE 
         , A.STATION_DESC AS CONTENT
         , LINK_URL = '/basic/devicestationreg/' + CONVERT(VARCHAR(10), A.STATION_CODE)
         , 2 SORT_ORDER
         , (SELECT CONVERT(VARCHAR(50), COUNT(1)) + '(' +  CONVERT(VARCHAR(10), SUM(CASE WHEN DATEDIFF(day, INSERT_DATE, getdate()) <= 7 THEN 1 ELSE 0 END)) +')' FROM T_DEVICE WHERE STATION_CODE = A.STATION_CODE)  AS SUB_TITLE
     
     FROM T_DEVICE_STATION A
    INNER JOIN T_DEVICE_STATION_PLACE B
       ON A.STATION_CODE = B.STATION_CODE
      AND B.IS_RANGE = 0
    WHERE A.HIDE = 0
) A
 WHERE 1= 1
 #[TITLE]
 ORDER BY SORT_ORDER
      ]]>
			</FixedSQL>
			<DynamicBodys>
				<Key>TITLE</Key>
				<Body><![CDATA[  AND A.TITLE LIKE N'%{0}%' ]]> </Body>
			</DynamicBodys>
		</TemplateSQL>
	</DBAgentTemplate>

	<DBAgentTemplate TemplateID="DeviceCopy">
		<!-- 
    SqlType : SQL의 형태를 지정합니다.
      Example 1:<SqlType>FixedSQL</SqlType> 고정적인 SQL을 지원합니다. 
      Example 2:<SqlType>DynamicSQL</SqlType> 동적인 SQL Type1을 지원합니다.  
    Description : 해당 SQL의 기능설명을 적습니다.
    SQLModifier : 해당 SQL의 작성자(수정자)를 적습니다
    LastModifyDate : 해당 SQL의 마지막 수정일을 적습니다
    -->
		<Information>
			<SqlType>FixedSQL</SqlType>
			<Description>로컬박스복사</Description>
			<SQLModifier>전상훈</SQLModifier>
			<LastModifyDate>2019-10-11</LastModifyDate>
		</Information>

		<TemplateSQL>
			<!-- FixedSQL : 고정된 SQL이 들어가는 곳입니다. -->
			<FixedSQL>
				<![CDATA[ 
      /***********************/
      /* 로컬박스복사        */
      /* DeviceCopy T_DEVICE */
      /***********************/
		SET NOCOUNT ON
		DECLARE @DEVICE_CODE  BIGINT = {0}
			   ,@REG_CODE INT = {1}
			   ,@NEW_DEVICE_CODE  BIGINT

 
 
		INSERT INTO T_DEVICE
		( STATION_CODE,    HARDWARE_CODE, DEVICE_TYPE,   BID_AMT,           COMPANY_CODE,   STORE_CODE
		, MEMBER_CODE,     DEVICE_NUMBER, AUTH_NUMBER,   DEVICE_NAME ,       DEVICE_DESC,    GROUP_CODE
		, BUSI_TYPE,       BUSI_TYPE2,    ADDRESS1,      ADDRESS2,          ZIP_CODE,       LATITUDE
		, LONGITUDE,       RADIUS,        CONTACT_COMPANY_CODE,             CONTACT_STORE_CODE
		, CONTACT_CODE,    CONTACT_NAME,  CONTACT_PHONE, CONTACT_EMAIL,     CATEGORY_CODES, AD_DISTANCE
		, DATA_CYCLE_TIME, AD_CYCLE_TIME, AD_FRAME_TYPE, PAGE_WAITING_TIME, STATUS,         HIDE
		, REMARK,          WORKING_TIME,  TIME_ZONE,     INSERT_CODE,       INSERT_DATE,    UPDATE_CODE
		, UPDATE_DATE
		)
		SELECT STATION_CODE,    HARDWARE_CODE, DEVICE_TYPE,   BID_AMT,           COMPANY_CODE,   STORE_CODE
			 , MEMBER_CODE,     DEVICE_NUMBER, AUTH_NUMBER,   DEVICE_NAME + '(복사)',       DEVICE_DESC,    GROUP_CODE
			 , BUSI_TYPE,       BUSI_TYPE2,    ADDRESS1,      ADDRESS2,          ZIP_CODE,       LATITUDE
			 , LONGITUDE,       RADIUS,        CONTACT_COMPANY_CODE,             CONTACT_STORE_CODE
			 , CONTACT_CODE,    CONTACT_NAME,  CONTACT_PHONE, CONTACT_EMAIL,     CATEGORY_CODES, AD_DISTANCE
			 , DATA_CYCLE_TIME, AD_CYCLE_TIME, AD_FRAME_TYPE, PAGE_WAITING_TIME, '1' AS STATUS,         HIDE
			 ,  (ISNULL(REMARK,'') + CASE WHEN ISNULL(REMARK,'') <> '' THEN ' ,' ELSE '' END + '로컬박스코드(' + CONVERT(VARCHAR(20), DEVICE_CODE) + ' : ' + DEVICE_NAME + ')복사됨') REMARK
			 , WORKING_TIME,  TIME_ZONE
			 , @REG_CODE AS INSERT_CODE,       GETDATE() INSERT_DATE, @REG_CODE UPDATE_CODE, GETDATE() UPDATE_DATE 
		FROM T_DEVICE
		WHERE DEVICE_CODE = @DEVICE_CODE

	
	
	 SELECT @NEW_DEVICE_CODE = IDENT_CURRENT('T_DEVICE')
	
	 /*T_DEVICE 저장시 DEVICE_NAME을 자동으로 키워드에 추가하여 해당 조건으로 제거 후 저장*/
	 INSERT INTO T_SEARCH_KEYWORD
	(DEVICE_CODE ,CK_CODE,KEYWORD_CODE,REMARK,INSERT_CODE,INSERT_DATE,UPDATE_CODE,UPDATE_DATE)
	INSERT INTO T_SEARCH_KEYWORD
	( DEVICE_CODE ,CK_CODE,KEYWORD_CODE,REMARK,INSERT_CODE,INSERT_DATE,UPDATE_CODE,UPDATE_DATE)
	SELECT A.* FROM (
		SELECT @NEW_DEVICE_CODE DEVICE_CODE,CK_CODE,KEYWORD_CODE,REMARK,@REG_CODE INSERT_CODE,GETDATE() INSERT_DATE, @REG_CODE UPDATE_CODE,GETDATE() UPDATE_DATE 
		 FROM T_SEARCH_KEYWORD
		WHERE DEVICE_CODE = @DEVICE_CODE
	) A
	LEFT JOIN T_SEARCH_KEYWORD B
	  ON A.DEVICE_CODE = B.DEVICE_CODE
	 AND ISNULL(A.CK_CODE,0) = ISNULL(B.CK_CODE,0)
	 AND ISNULL(A.KEYWORD_CODE,0) = ISNULL(B.KEYWORD_CODE,0)
   WHERE B.DEVICE_CODE IS NULL

	
	 SELECT CONVERT(VARCHAR(20),@NEW_DEVICE_CODE) DATA
		SET NOCOUNT OFF

      ]]>
			</FixedSQL>

		</TemplateSQL>
	</DBAgentTemplate>

	<DBAgentTemplate TemplateID="initPlaceItem">
		<!-- 
    SqlType : SQL의 형태를 지정합니다.
      Example 1:<SqlType>FixedSQL</SqlType> 고정적인 SQL을 지원합니다. 
      Example 2:<SqlType>DynamicSQL</SqlType> 동적인 SQL Type1을 지원합니다.  
    Description : 해당 SQL의 기능설명을 적습니다.
    SQLModifier : 해당 SQL의 작성자(수정자)를 적습니다
    LastModifyDate : 해당 SQL의 마지막 수정일을 적습니다
    -->
		<Information>
			<SqlType>FixedSQL</SqlType>
			<Description>가상영역 변경시 초기화</Description>
			<SQLModifier>권용현</SQLModifier>
			<LastModifyDate>2019-12-17</LastModifyDate>
		</Information>

		<TemplateSQL>
			<!-- FixedSQL : 고정된 SQL이 들어가는 곳입니다. -->
			<FixedSQL>
				<![CDATA[ 
				
		 SET NOCOUNT ON

						 DECLARE @DEVICE_CODE		BIGINT			= {0}
							   , @MEMBER_CODE		INT				= {1}
							   , @FR_DATE			VARCHAR(8)		= '{2}'
							   , @TO_DATE			VARCHAR(8)		= '{3}'
							   , @ITEM_TYPE			INT				= {4}
							   , @IDX				BIGINT			= 0
							   , @USE_CNT			INT				= 0
							   , @PURCHASE_CNT		INT				= 0
							   , @PURCHASE_TYPE		INT				= 0
							   , @INSERT_CODE		INT				= {7}
							   , @INSERT_DATE		DATETIME		= GETDATE()
							   , @UPDATE_CODE		INT				= {7}
							   , @UPDATE_DATE		DATETIME		= GETDATE()
							   , @INIT_CHECK		bit				= {5}
							   , @MAX_IDX			INT				= 1
							   , @MIN_IDX			INT				= 1
							   , @RTN_MSG			NVARCHAR(400)   = N''
						
						-- 신규 로컬 생성이 아닐 경우
					     IF (0 = @INIT_CHECK)
						 BEGIN
							  IF EXISTS (SELECT 1 FROM T_DEVICE WHERE DEVICE_CODE = @DEVICE_CODE AND ITEM_TYPE = @ITEM_TYPE)
							  BEGIN
					    		   SET @RTN_MSG = N'다른 기준영역유형을 선택하십시오.';
					    		   GOTO EXCEPTION
							  END
						 END
						
						DECLARE @PLACE_ITEM_USE TABLE 
						(	
							  ROW_IDX INT IDENTITY(1,1)
							, IDX BIGINT NOT NULL
							, USE_CNT INT NOT NULL
							, PURCHASE_TYPE INT NOT NULL
							, PURCHASE_CNT INT NOT NULL
						)
						
						INSERT INTO @PLACE_ITEM_USE
						     SELECT MPIU.MEMBER_ITEM_IDX
							      , MPIU.USE_CNT
								  , MPI.PURCHASE_TYPE
								  , MPI.ITEM_PURCHASE_CNT
						       FROM T_MEMBER_PLACE_ITEM_USE AS MPIU
						  LEFT JOIN T_MEMBER_PLACE_ITEM AS MPI
						         ON MPI.IDX = MPIU.MEMBER_ITEM_IDX
						      WHERE MPIU.DEVICE_CODE = @DEVICE_CODE
						        SET @MAX_IDX = @@ROWCOUNT
						
						DELETE FROM T_MEMBER_PLACE_ITEM_USE 
							  WHERE DEVICE_CODE = @DEVICE_CODE
						
						-- 신규 로컬 생성이 아닐 경우
						IF (0 = @INIT_CHECK)
						BEGIN
							 DELETE FROM T_DEVICE_PLACE
							  WHERE DEVICE_CODE = @DEVICE_CODE
						END

						WHILE @MIN_IDX <= @MAX_IDX
						BEGIN
							 SELECT @IDX = IDX
							      , @USE_CNT = USE_CNT
								  , @PURCHASE_TYPE = PURCHASE_TYPE
								  , @PURCHASE_CNT = PURCHASE_CNT
							   FROM @PLACE_ITEM_USE
							  WHERE ROW_IDX = @MIN_IDX
							 
							 -- 무료
							 IF @PURCHASE_TYPE = 1
						     BEGIN
								  -- 전체 개수 차감
								  UPDATE T_MEMBER_PLACE_ITEM 
						               SET ITEM_PURCHASE_CNT -= 1
						                 , UPDATE_CODE = @UPDATE_CODE
						                 , UPDATE_DATE = @UPDATE_DATE
						             WHERE IDX = @IDX

								  -- 아이템을 사용한 경우
								  IF @USE_CNT > 0
								  BEGIN
									   UPDATE T_MEMBER_PLACE_ITEM 
										  SET ITEM_USE_CNT -= 1
										    , UPDATE_CODE = @UPDATE_CODE
										    , UPDATE_DATE = @UPDATE_DATE
									    WHERE IDX = @IDX
								  END
								  -- 아이템을 사용하지 않은 경우
								  ELSE
								  BEGIN
									   UPDATE T_MEMBER_PLACE_ITEM 
										  SET ITEM_CNT -= 1
										    , UPDATE_CODE = @UPDATE_CODE
										    , UPDATE_DATE = @UPDATE_DATE
									    WHERE IDX = @IDX
								  END

								  IF @PURCHASE_CNT - 1 <= 0
								  BEGIN
									   DELETE FROM T_MEMBER_PLACE_ITEM WHERE IDX = @IDX
								  END	
							 END
							 -- 유료
							 ELSE
							 BEGIN
								  -- 아이템을 사용한 경우
								  IF @USE_CNT > 0
								  BEGIN									 
									   UPDATE T_MEMBER_PLACE_ITEM 
										  SET ITEM_USE_CNT -= @USE_CNT
										    , ITEM_CNT += @USE_CNT
										    , UPDATE_CODE = @UPDATE_CODE
										    , UPDATE_DATE = @UPDATE_DATE
									    WHERE IDX = @IDX
								  END
								  -- 아이템을 사용하지 않은 경우							  
							 END
							 											 							  
							 SET @MIN_IDX = @MIN_IDX + 1
						END						
						
						-- 무료 아이템 등록
						DECLARE @ITEM_CODE				INT				= 0
							  , @SALE_TYPE				INT				= 1
						      , @ITEM_PURCHASE_TYPE		INT             = 2
							  , @ITEM_PURCHASE_CNT		INT				= 1 -- 구매 품목 개수
						      , @ITEM_USE_CNT			INT				= 0 -- 사용 품목 개수
							  , @ITEM_CNT				INT				= 1 -- 품목 개수
							  , @MEMBER_ITEM_IDX		BIGINT			= 0
							  , @GROUP_TYPE				INT				= {6}

				         SELECT @ITEM_CODE = ITEM_CODE
						   FROM T_PLACE_ITEM_GROUP AS PIG 
						  INNER JOIN T_PLACE_ITEM AS PI
						     ON PIG.GROUP_CODE = PI.GROUP_CODE
						  WHERE 1=1
						    AND PIG.SALE_TYPE = @SALE_TYPE
						    AND PI.ITEM_TYPE = @ITEM_TYPE
							AND PIG.GROUP_TYPE = @GROUP_TYPE

						 UPDATE T_MEMBER_PLACE_ITEM 
 							  SET ITEM_PURCHASE_CNT = ITEM_PURCHASE_CNT + 1
 							    , ITEM_CNT = ITEM_CNT + 1
 							 	, UPDATE_CODE = @UPDATE_CODE
 							 	, UPDATE_DATE = @UPDATE_DATE 
 							WHERE 1=1
 							  AND MEMBER_CODE = @MEMBER_CODE
 							  AND ITEM_CODE = @ITEM_CODE
 							  AND PURCHASE_TYPE = @SALE_TYPE
						  IF @@ROWCOUNT = 0
						  BEGIN
						  	    INSERT INTO T_MEMBER_PLACE_ITEM
									   (
											MEMBER_CODE,		ITEM_CODE,		PURCHASE_TYPE
										  , ITEM_PURCHASE_CNT,	ITEM_USE_CNT,	ITEM_CNT
										  , REMARK,				HIDE,			INSERT_CODE
										  , INSERT_DATE,		UPDATE_CODE,	UPDATE_DATE
									   )
								    SELECT @MEMBER_CODE,		@ITEM_CODE,		@SALE_TYPE
						  		         , @ITEM_PURCHASE_CNT,  @ITEM_USE_CNT,  @ITEM_CNT
						  		         , N'',					0,				@INSERT_CODE
						  		         , @INSERT_DATE,		@UPDATE_CODE,	@UPDATE_DATE			  		      
						  END

						  SELECT @MEMBER_ITEM_IDX=IDX 
						    FROM T_MEMBER_PLACE_ITEM 
						   WHERE ITEM_CODE = @ITEM_CODE
						 
						  INSERT INTO T_MEMBER_PLACE_ITEM_USE
							     (
									  MEMBER_ITEM_IDX,		AD_CODE,		DEVICE_CODE
									, FR_DATE,				TO_DATE,		USE_CNT
									, HIDE,					REMARK,			INSERT_CODE
									, INSERT_DATE,			UPDATE_CODE,	UPDATE_DATE
								 )
							   SELECT @MEMBER_ITEM_IDX,		NULL,			@DEVICE_CODE
									, @FR_DATE,				@TO_DATE,		@ITEM_USE_CNT
									, 0,					N'',			@INSERT_CODE
									, @INSERT_DATE,			@UPDATE_CODE,	@UPDATE_DATE
						
						 UPDATE T_DEVICE 
						    SET ITEM_TYPE = @ITEM_TYPE
						  WHERE DEVICE_CODE = @DEVICE_CODE

						 SELECT @DEVICE_CODE

						 EXCEPTION:
  
						 SELECT @RTN_MSG AS ERROR_MESSAGE

		 SET NOCOUNT OFF
      ]]>
			</FixedSQL>

		</TemplateSQL>
	</DBAgentTemplate>

	<DBAgentTemplate TemplateID="getAllPlaceItem">
		<!-- 
    SqlType : SQL의 형태를 지정합니다.
      Example 1:<SqlType>FixedSQL</SqlType> 고정적인 SQL을 지원합니다. 
      Example 2:<SqlType>DynamicSQL</SqlType> 동적인 SQL Type1을 지원합니다.  
    Description : 해당 SQL의 기능설명을 적습니다.
    SQLModifier : 해당 SQL의 작성자(수정자)를 적습니다
    LastModifyDate : 해당 SQL의 마지막 수정일을 적습니다
    -->
		<Information>
			<SqlType>FixedSQL</SqlType>
			<Description>가상영역 아이템 가져오기</Description>
			<SQLModifier>권용현</SQLModifier>
			<LastModifyDate>2019-12-17</LastModifyDate>
		</Information>

		<TemplateSQL>
			<!-- FixedSQL : 고정된 SQL이 들어가는 곳입니다. -->
			<FixedSQL>
				<![CDATA[ 
				
		 SET NOCOUNT ON

		 DECLARE @MEMBER_CODE		INT		= {0}
		       , @DEVICE_CODE		BIGINT	= {1}
		       , @ITEM_TYPE			INT		= {2}
			   , @ITEM_TYPE_LIMIT	INT		= {3}
			   
		SELECT PURCHASE_TYPE			 
			 , CASE WHEN MPI.PURCHASE_TYPE = 1 
			   THEN 1 
			   ELSE (
						SELECT SUM(MPI.ITEM_PURCHASE_CNT)
						  FROM T_PLACE_ITEM AS PI
						 INNER JOIN T_PLACE_ITEM_GROUP AS PIG
						 ON PI.GROUP_CODE = PIG.GROUP_CODE
						 INNER JOIN T_MEMBER_PLACE_ITEM AS MPI
						 ON PI.ITEM_CODE = MPI.ITEM_CODE
						 WHERE MPI.MEMBER_CODE = @MEMBER_CODE 
						   AND MPI.PURCHASE_TYPE = 2
						   AND PIG.GROUP_TYPE = 2
				    ) END AS ITEM_PURCHASE_CNT
		     , CASE WHEN MPI.PURCHASE_TYPE = 1 
			   THEN (
						SELECT ISNULL(SUM(USE_CNT), 0) 
			              FROM T_MEMBER_PLACE_ITEM_USE AS MPIU 
					     INNER JOIN T_MEMBER_PLACE_ITEM AS MPI 
						    ON MPIU.MEMBER_ITEM_IDX = MPI.IDX 
					     WHERE DEVICE_CODE = @DEVICE_CODE 
						   AND MPI.PURCHASE_TYPE = 1
					)
			   ELSE (
					    SELECT ISNULL(SUM(USE_CNT), 0) 
			              FROM T_MEMBER_PLACE_ITEM_USE AS MPIU
					     INNER JOIN T_MEMBER_PLACE_ITEM AS MPI 
						    ON MPIU.MEMBER_ITEM_IDX = MPI.IDX 
					     WHERE DEVICE_CODE = @DEVICE_CODE 
						   AND MPI.PURCHASE_TYPE = 2
					)
			   END AS ITEM_USE_CNT 
		  FROM T_MEMBER_PLACE_ITEM AS MPI
		 INNER JOIN T_PLACE_ITEM AS PI
		    ON PI.ITEM_CODE = MPI.ITEM_CODE
		 WHERE 1=1
		   AND MPI.MEMBER_CODE = @MEMBER_CODE
		   AND PI.ITEM_TYPE BETWEEN @ITEM_TYPE AND @ITEM_TYPE_LIMIT
	     GROUP BY PURCHASE_TYPE

		 SET NOCOUNT OFF
      ]]>
			</FixedSQL>

		</TemplateSQL>
	</DBAgentTemplate>

	<DBAgentTemplate TemplateID="getPlaceItem">
		<!-- 
    SqlType : SQL의 형태를 지정합니다.
      Example 1:<SqlType>FixedSQL</SqlType> 고정적인 SQL을 지원합니다. 
      Example 2:<SqlType>DynamicSQL</SqlType> 동적인 SQL Type1을 지원합니다.  
    Description : 해당 SQL의 기능설명을 적습니다.
    SQLModifier : 해당 SQL의 작성자(수정자)를 적습니다
    LastModifyDate : 해당 SQL의 마지막 수정일을 적습니다
    -->
		<Information>
			<SqlType>FixedSQL</SqlType>
			<Description>로컬 기준 영역 아이템 가져오기</Description>
			<SQLModifier>권용현</SQLModifier>
			<LastModifyDate>2019-12-16</LastModifyDate>
		</Information>

		<TemplateSQL>
			<!-- FixedSQL : 고정된 SQL이 들어가는 곳입니다. -->
			<FixedSQL>
				<![CDATA[ 
				
	SET NOCOUNT ON

		 DECLARE @MEMBER_CODE		INT		= {0}
			   , @DEVICE_CODE		BIGINT	= {1} 
		       , @ITEM_TYPE			INT		= {2}
			   , @ITEM_TYPE_LIMIT	INT		= {3}
			   , @GROUP_TYPE		INT		= {4}

		SELECT IDX AS MEMBER_ITEM_IDX
		     , ITEM_TYPE
			 , ITEM_NAME
			 , MAX(ITEM_PURCHASE_CNT) AS ITEM_PURCHASE_CNT
			 , MAX(ITEM_USE_CNT) AS ITEM_USE_CNT
		FROM(
				SELECT MPI.IDX
		             , ITEM_TYPE
		 	         , ITEM_NAME
		             , CASE WHEN MPI.PURCHASE_TYPE = 1 
						    THEN 1 
							ELSE MPI.ITEM_CNT + MPIU.USE_CNT 
						END AS ITEM_PURCHASE_CNT
		             , MPIU.USE_CNT AS ITEM_USE_CNT
		          FROM T_MEMBER_PLACE_ITEM AS MPI
		         INNER JOIN T_PLACE_ITEM AS PI
		            ON PI.ITEM_CODE = MPI.ITEM_CODE
		         INNER JOIN T_MEMBER_PLACE_ITEM_USE AS MPIU 
		 	        ON MPIU.MEMBER_ITEM_IDX = MPI.IDX
		         WHERE 1=1
		           AND MPI.MEMBER_CODE = @MEMBER_CODE
		 	       AND PI.ITEM_TYPE BETWEEN @ITEM_TYPE AND @ITEM_TYPE_LIMIT
			       AND MPIU.DEVICE_CODE = @DEVICE_CODE
			
		         UNION

			    SELECT MPI.IDX
				     , ITEM_TYPE
					 , ITEM_NAME
					 , CASE WHEN MPI.PURCHASE_TYPE = 1 
					        THEN 1
							ELSE ITEM_CNT 
					    END AS ITEM_PURCHASAE_CNT
					 , 0 AS ITEM_USE_CNT 
				  FROM T_PLACE_ITEM AS PI
				 INNER JOIN T_PLACE_ITEM_GROUP AS PIG
				    ON PI.GROUP_CODE = PIG.GROUP_CODE
				INNER JOIN T_MEMBER_PLACE_ITEM AS MPI
				   ON PI.ITEM_CODE = MPI.ITEM_CODE
				WHERE MPI.MEMBER_CODE = @MEMBER_CODE
				  AND PIG.GROUP_TYPE = @GROUP_TYPE
				  AND PI.ITEM_TYPE BETWEEN @ITEM_TYPE AND @ITEM_TYPE_LIMIT
		    ) AS MPI
		GROUP BY IDX, ITEM_TYPE, ITEM_NAME
		ORDER BY ITEM_TYPE

	SET NOCOUNT OFF
      ]]>
			</FixedSQL>

		</TemplateSQL>
	</DBAgentTemplate>
	<DBAgentTemplate TemplateID="PlaceItemUseSave">
		<!-- 
    SqlType : SQL의 형태를 지정합니다.
      Example 1:<SqlType>FixedSQL</SqlType> 고정적인 SQL을 지원합니다. 
      Example 2:<SqlType>DynamicSQL</SqlType> 동적인 SQL Type1을 지원합니다.  
    Description : 해당 SQL의 기능설명을 적습니다.
    SQLModifier : 해당 SQL의 작성자(수정자)를 적습니다
    LastModifyDate : 해당 SQL의 마지막 수정일을 적습니다
    -->
		<Information>
			<SqlType>FixedSQL</SqlType>
			<Description>로컬 기준 영역 아이템 사용 데이터 저장</Description>
			<SQLModifier>권용현</SQLModifier>
			<LastModifyDate>2019-12-16</LastModifyDate>
		</Information>

		<TemplateSQL>
			<!-- FixedSQL : 고정된 SQL이 들어가는 곳입니다. -->
			<FixedSQL>
				<![CDATA[  
				
		 SET NOCOUNT ON
				DECLARE @MEMBER_ITEM_IDX	BIGINT			= {0}
					  , @DEVICE_CODE		BIGINT			= {1}
					  , @ITEM_USE_CNT		INT				= {2}
					  , @FR_DATE			VARCHAR(8)		= N'{3}'
					  , @TO_DATE			VARCHAR(8)		= N'{4}'
					  , @INSERT_CODE		INT				= {5}
					  , @INSERT_DATE		DATETIME		= GETDATE()
					  , @UPDATE_CODE		INT				= {5}
					  , @UPDATE_DATE		DATETIME		= GETDATE()
					  , @TOTAL_USE_CNT		INT				= 0
					  , @ITEM_CNT			INT				= 0
					  , @ITEM_PURCHASE_CNT  INT				= 0
					  , @RTN_MSG			NVARCHAR(400)   = N''

				IF EXISTS (SELECT 1 FROM T_MEMBER_PLACE_ITEM WHERE IDX = @MEMBER_ITEM_IDX AND PURCHASE_TYPE = 1)
				BEGIN
					 -- 무료 최대 소지 개수는 1개
					 SELECT @ITEM_CNT = ISNULL(MAX(USE_CNT), 0) 
					   FROM T_MEMBER_PLACE_ITEM_USE 
					  WHERE MEMBER_ITEM_IDX = @MEMBER_ITEM_IDX 
					    AND DEVICE_CODE = @DEVICE_CODE

					 IF (@ITEM_USE_CNT = @ITEM_CNT)
					 BEGIN
						  SET @RTN_MSG = N'아이템 개수가 일치하지 않습니다. 다시 시도하십시오.';
						  GOTO EXCEPTION
					 END
					 ELSE
					 BEGIN
						  UPDATE T_MEMBER_PLACE_ITEM_USE
						     SET USE_CNT = @ITEM_USE_CNT
							   , UPDATE_CODE = @UPDATE_CODE
					           , UPDATE_DATE = @UPDATE_DATE
						   WHERE MEMBER_ITEM_IDX = @MEMBER_ITEM_IDX 
					         AND DEVICE_CODE = @DEVICE_CODE

						  -- 아이템 취소
						  IF (@ITEM_CNT > 0)
						  BEGIN
							   UPDATE T_MEMBER_PLACE_ITEM 
							      SET ITEM_USE_CNT -= 1
								    , ITEM_CNT += 1
							        , UPDATE_CODE = @UPDATE_CODE
					                , UPDATE_DATE = @UPDATE_DATE
								WHERE IDX = @MEMBER_ITEM_IDX
						  END
						  -- 아이템 사용
						  ELSE
						  BEGIN
						       UPDATE T_MEMBER_PLACE_ITEM 
							      SET ITEM_USE_CNT += 1
								    , ITEM_CNT -= 1
									, UPDATE_CODE = @UPDATE_CODE
					                , UPDATE_DATE = @UPDATE_DATE
								WHERE IDX = @MEMBER_ITEM_IDX
						  END
					 END
					 
				END
				ELSE
				BEGIN
					 DELETE FROM T_MEMBER_PLACE_ITEM_USE 
					       WHERE MEMBER_ITEM_IDX = @MEMBER_ITEM_IDX
						     AND DEVICE_CODE = @DEVICE_CODE
							 
					 IF (0 <> @ITEM_USE_CNT)
					 BEGIN
						  INSERT INTO T_MEMBER_PLACE_ITEM_USE 
						  	   SELECT
						  	 		    @MEMBER_ITEM_IDX
						  	 		  , NULL
						  	 		  , @DEVICE_CODE
						  	 		  , @FR_DATE
						  	 		  , @TO_DATE
						  	 		  , @ITEM_USE_CNT
						  	 		  , 0 
						  	 		  , ''
						  	 		  , @INSERT_CODE
						  	 		  , @INSERT_DATE
						  	 		  , @UPDATE_CODE
						  	 		  , @UPDATE_DATE
					 END

					 SELECT @TOTAL_USE_CNT = ISNULL(SUM(USE_CNT), 0)
					   FROM T_MEMBER_PLACE_ITEM_USE
					  WHERE MEMBER_ITEM_IDX = @MEMBER_ITEM_IDX

					 SELECT @ITEM_PURCHASE_CNT = ITEM_PURCHASE_CNT
					      , @ITEM_CNT = ITEM_CNT 
					   FROM T_MEMBER_PLACE_ITEM 
					  WHERE IDX = @MEMBER_ITEM_IDX
					 
					 IF ( @ITEM_PURCHASE_CNT < @TOTAL_USE_CNT )
					 BEGIN
					 	  SET @RTN_MSG = N'아이템 개수가 일치하지 않습니다. 다시 시도하십시오.';
					 	  GOTO EXCEPTION
					 END
					 
					 UPDATE T_MEMBER_PLACE_ITEM 
					    SET ITEM_USE_CNT = @TOTAL_USE_CNT
					      , ITEM_CNT = @ITEM_PURCHASE_CNT - @TOTAL_USE_CNT
						  , UPDATE_CODE	= @UPDATE_CODE
					      , UPDATE_DATE	= @UPDATE_DATE
					  WHERE IDX = @MEMBER_ITEM_IDX
				END

				SELECT 'COMPLETE' AS DATA

				EXCEPTION:
  
				SELECT @RTN_MSG AS ERROR_MESSAGE
		 SET NOCOUNT OFF
      ]]>
			</FixedSQL>

		</TemplateSQL>
	</DBAgentTemplate>
</DBAgentMultiTemplate>
