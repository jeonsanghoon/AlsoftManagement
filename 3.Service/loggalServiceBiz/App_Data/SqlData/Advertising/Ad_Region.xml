<?xml version="1.0" encoding="utf-8" ?>
<DBAgentMultiTemplate  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://altsoft.kr/">

  <DBAgentTemplate TemplateID="GetAdRegionList">
    <!-- 
    SqlType : SQL의 형태를 지정합니다.
      Example 1:<SqlType>FixedSQL</SqlType> 고정적인 SQL을 지원합니다. 
      Example 2:<SqlType>DynamicSQL</SqlType> 동적인 SQL Type1을 지원합니다.  
    Description : 해당 SQL의 기능설명을 적습니다.
    SQLModifier : 해당 SQL의 작성자(수정자)를 적습니다
    LastModifyDate : 해당 SQL의 마지막 수정일을 적습니다
    -->
    <Information>
      <SqlType>DynamicSQL</SqlType>
      <Description>광고별 지역등록내역 가져오기</Description>
      <SQLModifier>전상훈</SQLModifier>
      <LastModifyDate>2016-10-10</LastModifyDate>
    </Information>

    <TemplateSQL>
      <!-- FixedSQL : 고정된 SQL이 들어가는 곳입니다. -->
      <FixedSQL>
        <![CDATA[ 
   	/******************************************************/
    /* 광고별 지역등록내역 가져오기    GetAdRegionList    */
    /******************************************************/
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED 
 DECLARE @PAGE_COUNT INT = {0}
        ,@PAGE INT =  {1};
  WITH T_TABLE AS
  (  
    SELECT ROW_NUMBER() OVER(ORDER BY A.ORDER_SEQ) AS SEQ
	    ,  E.AD_CODE
	    , A.CATEGORY_CODE
	    , A.CATEGORY_NAME1
	    , A.CATEGORY_NAME2
	    , A.SEARCH_CATEGORY_CODE
	    , A.CATEGORY_NAME3
      FROM V_REGION A
    INNER JOIN T_CATEGORY_KEYWORD B
       ON A.CATEGORY_CODE = B.CATEGORY_CODE
    INNER JOIN T_SEARCH_KEYWORD C
       ON B.CK_CODE = C.CK_CODE
    INNER JOIN T_AD E
       ON E.AD_CODE = C.AD_CODE
    WHERE 1=1
      #[AD_CODE]
  )SELECT * , (SELECT COUNT(1) FROM T_TABLE) TOTAL_ROWCOUNT FROM T_TABLE A      
  WHERE SEQ BETWEEN  (@PAGE - 1) * (@PAGE_COUNT) + 1 AND @PAGE * @PAGE_COUNT
    

	SET NOCOUNT OFF 
      ]]>
      </FixedSQL>
      <DynamicBodys>
        <Key>AD_CODE</Key>
        <Body>AND E.AD_CODE = {0} </Body>
      </DynamicBodys>
    </TemplateSQL>
  </DBAgentTemplate>
  <DBAgentTemplate TemplateID="AdRegionSave">
    <!-- 
    SqlType : SQL의 형태를 지정합니다.
      Example 1:<SqlType>FixedSQL</SqlType> 고정적인 SQL을 지원합니다. 
      Example 2:<SqlType>DynamicSQL</SqlType> 동적인 SQL Type1을 지원합니다.  
    Description : 해당 SQL의 기능설명을 적습니다.
    SQLModifier : 해당 SQL의 작성자(수정자)를 적습니다
    LastModifyDate : 해당 SQL의 마지막 수정일을 적습니다
    -->
    <Information>
      <SqlType>DynamicSQL</SqlType>
      <Description>지역설정저장</Description>
      <SQLModifier>전상훈</SQLModifier>
      <LastModifyDate>2016-10-11</LastModifyDate>
    </Information>

    <TemplateSQL>
      <!-- FixedSQL : 고정된 SQL이 들어가는 곳입니다. -->
      <FixedSQL>
        <![CDATA[ 
    /******************************************/
    /* 로컬박스 광고 클릭시  AdRegionSave     */
    /******************************************/
 DECLARE @SAVE_TYPE VARCHAR(2) = '{0}' 
     , @AD_CODE BIGINT = {1}
     , @SEARCH_CATEGORY_CODE VARCHAR(50) = '{2}'
	 , @REG_CODE INT = '{3}'
   
  IF @SAVE_TYPE = 'D'
  BEGIN
    DELETE A FROM T_SEARCH_KEYWORD A
     INNER JOIN T_CATEGORY_KEYWORD B
        ON A.CK_CODE = B.CK_CODE
     INNER JOIN T_CATEGORY C
        ON B.CATEGORY_CODE = C.CATEGORY_CODE
     WHERE A.AD_CODE = @AD_CODE
       AND C.SEARCH_CATEGORY_CODE = @SEARCH_CATEGORY_CODE
       AND C.CATEGORY_TYPE = 2
  END
  ELSE
  BEGIN
    IF NOT EXISTS (
	    SELECT * FROM T_AD A
	     INNER JOIN T_SEARCH_KEYWORD B
		      ON A.AD_CODE = B.AD_CODE
	     INNER JOIN T_CATEGORY_KEYWORD C
		      ON B.CK_CODE = C.CK_CODE
	     INNER JOIN T_CATEGORY D
		      ON D.CATEGORY_CODE = C.CATEGORY_CODE
	     WHERE A.AD_CODE = @AD_CODE
	       AND  @SEARCH_CATEGORY_CODE  LIKE D.SEARCH_CATEGORY_CODE + '%'
          
    )
    BEGIN
	    INSERT INTO T_SEARCH_KEYWORD
	    (AD_CODE, CK_CODE,  INSERT_CODE, INSERT_DATE, UPDATE_CODE, UPDATE_DATE)
	    SELECT @AD_CODE, B.CK_CODE,  @REG_CODE, GETDATE(), @REG_CODE, GETDATE()
	    FROM T_CATEGORY A
	    INNER JOIN T_CATEGORY_KEYWORD B
	       ON A.CATEGORY_CODE = B.CATEGORY_CODE
       WHERE A.SEARCH_CATEGORY_CODE = @SEARCH_CATEGORY_CODE
    END
    
       DELETE B FROM T_AD A
	     INNER JOIN T_SEARCH_KEYWORD B
		    ON A.AD_CODE = B.AD_CODE
	     INNER JOIN T_CATEGORY_KEYWORD C
		    ON B.CK_CODE = C.CK_CODE
	     INNER JOIN T_CATEGORY D
		    ON D.CATEGORY_CODE = C.CATEGORY_CODE
	     WHERE A.AD_CODE = @AD_CODE
         AND  D.SEARCH_CATEGORY_CODE  <> @SEARCH_CATEGORY_CODE
	       AND  D.SEARCH_CATEGORY_CODE  LIKE @SEARCH_CATEGORY_CODE  + '%'
    
  END  




	
      ]]>
      </FixedSQL>
      <DynamicBodys>
        <Key>AD_CODE</Key>
        <Body>AND A.AD_CODE = {0} </Body>
      </DynamicBodys>
    </TemplateSQL>
  </DBAgentTemplate>
</DBAgentMultiTemplate>

