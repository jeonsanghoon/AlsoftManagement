<?xml version="1.0" encoding="utf-8" ?>
<DBAgentMultiTemplate  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://altsoft.kr/">
  <DBAgentTemplate TemplateID="GetCategoryList">
    <!-- 
    SqlType : SQL의 형태를 지정합니다.
      Example 1:<SqlType>FixedSQL</SqlType> 고정적인 SQL을 지원합니다. 
      Example 2:<SqlType>DynamicSQL</SqlType> 동적인 SQL Type1을 지원합니다.  
    Description : 해당 SQL의 기능설명을 적습니다.
    SQLModifier : 해당 SQL의 작성자(수정자)를 적습니다
    LastModifyDate : 해당 SQL의 마지막 수정일을 적습니다
    -->
    <Information>
      <SqlType>DynamicSQL</SqlType>
      <Description>광고분류테이블 - T_CATEGORY 조회</Description>
      <SQLModifier>전상훈</SQLModifier>
      <LastModifyDate>2016-07-12</LastModifyDate>
    </Information>

    <TemplateSQL>
      <!-- FixedSQL : 고정된 SQL이 들어가는 곳입니다. -->
      <FixedSQL>
        <![CDATA[ 
 
	SET NOCOUNT ON 
	/****************************************************/
	/* 광고분류테이블 - T_CATEGORY 조회 -  SELECT QUERY */ 
	/****************************************************/
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED 
	SELECT 
		  CATEGORY_CODE
		, A.CATEGORY_TYPE
		, A.PARENT_CATEGORY_CODE
		, A.LEVEL_DEPTH
		, A.SEARCH_CATEGORY_CODE
		, A.CATEGORY_NAME
		, A.CATEGORY_DISPLAY_NAME
		, A.ORDER_SEQ
		, A.HIDE
		, A.REMARK

	FROM T_CATEGORY A 
  WHERE 1=1
  #[CATEGORY_CODE]
  #[CATEGORY_TYPE]
  #[CATEGORY_TYPES]
  #[PARENT_CATEGORY_CODE]
  #[LEVEL_DEPTH]
  #[SEARCH_CATEGORY_CODE]
  #[CATEGORY_NAME]
  #[HIDE]
  ORDER BY ORDER_SEQ
	SET NOCOUNT OFF 

      ]]>
      </FixedSQL>
      <DynamicBodys>
        <Key>CATEGORY_CODE</Key>
        <Body>AND A.CATEGORY_CODE = {0}</Body>
      </DynamicBodys>
      <DynamicBodys>
        <Key>CATEGORY_TYPE</Key>
        <Body>AND A.CATEGORY_TYPE = {0}  </Body>
      </DynamicBodys>
      <DynamicBodys>
        <Key>CATEGORY_TYPES</Key>
        <Body>
          <![CDATA[ AND A.CATEGORY_TYPE IN ({0}) ]]></Body>
      </DynamicBodys>
      <DynamicBodys>
        <Key>PARENT_CATEGORY_CODE</Key>
        <Body>AND A.PARENT_CATEGORY_CODE = {0} </Body>
      </DynamicBodys>
      <DynamicBodys>
        <Key>LEVEL_DEPTH</Key>
        <Body>AND A.LEVEL_DEPTH = {0} </Body>
      </DynamicBodys>
      <DynamicBodys>
        <Key>SEARCH_CATEGORY_CODE</Key>
        <Body>AND A.SEARCH_CATEGORY_CODE LIKE '{0}%' </Body>
      </DynamicBodys>
      <DynamicBodys>
        <Key>CATEGORY_NAME</Key>
        <Body>AND A.CATEGORY_NAME LIKE N'%{0}%' </Body>
      </DynamicBodys>
      <DynamicBodys>
        <Key>HIDE</Key>
        <Body>AND A.HIDE = {0} </Body>
      </DynamicBodys>
    </TemplateSQL>
  </DBAgentTemplate>
  <DBAgentTemplate TemplateID="GetCategoryPageList">
    <!-- 
    SqlType : SQL의 형태를 지정합니다.
      Example 1:<SqlType>FixedSQL</SqlType> 고정적인 SQL을 지원합니다. 
      Example 2:<SqlType>DynamicSQL</SqlType> 동적인 SQL Type1을 지원합니다.  
    Description : 해당 SQL의 기능설명을 적습니다.
    SQLModifier : 해당 SQL의 작성자(수정자)를 적습니다
    LastModifyDate : 해당 SQL의 마지막 수정일을 적습니다
    -->
    <Information>
      <SqlType>DynamicSQL</SqlType>
      <Description>카테고리 페이지 조회</Description>
      <SQLModifier>전상훈</SQLModifier>
      <LastModifyDate>2017-02-02</LastModifyDate>
    </Information>

    <TemplateSQL>
      <!-- FixedSQL : 고정된 SQL이 들어가는 곳입니다. -->
      <FixedSQL>
        <![CDATA[ 
 
SET NOCOUNT ON
    /*********************************************/
    /* 카테고리 페이지 조회 GetCategoryPageList */
    /********************************************/
    SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
   DECLARE  @PAGE_COUNT INT = {0}
           , @PAGE      INT = {1};

    WITH T_TABLE AS
    (
		  SELECT 
	      ROW_NUMBER() OVER(ORDER BY A.CATEGORY_TYPE, A.CATEGORY_TYPE2, A.LEVEL_DEPTH, A.ORDER_SEQ) AS SEQ
	      ,A.CATEGORY_CODE
	      ,A.CATEGORY_TYPE
	      ,B.NAME AS CATEGORY_TYPE_NAME
	      ,A.CATEGORY_TYPE2
	      ,C.NAME AS CATEGORY_TYPE2_NAME
	      ,A.PARENT_CATEGORY_CODE
	      ,A.LEVEL_DEPTH
	      ,A.SEARCH_CATEGORY_CODE
	      ,A.CATEGORY_NAME
	      ,A.ORDER_SEQ
	      ,A.HIDE
	      ,A.UPDATE_CODE
        ,D.USER_NAME AS UPDATE_NAME
	      ,A.UPDATE_DATE
      FROM T_CATEGORY A
      INNER JOIN T_COMMON B
         ON B.MAIN_CODE = 'C004'
        AND B.SUB_CODE  = A.CATEGORY_TYPE
      INNER JOIN T_COMMON C
         ON C.MAIN_CODE = 'C005'
        AND C.SUB_CODE  = A.CATEGORY_TYPE2
      INNER JOIN T_MEMBER D
         ON A.UPDATE_CODE = D.MEMBER_CODE
     WHERE 1=1
        #[CATEGORY_CODE]
        #[CATEGORY_TYPE]
        #[CATEGORY_TYPE2]
        #[PARENT_CATEGORY_CODE]
        #[LEVEL_DEPTH]
        #[SEARCH_CATEGORY_CODE]
        #[CATEGORY_NAME]
        #[HIDE]
		 )
  SELECT *, (SELECT COUNT(1) FROM T_TABLE) TOTAL_ROWCOUNT FROM T_TABLE
   WHERE SEQ > (@PAGE -1) * @PAGE_COUNT
     AND SEQ <= @PAGE * @PAGE_COUNT
   SET NOCOUNT OFF

      ]]>
      </FixedSQL>
      <DynamicBodys>
        <Key>CATEGORY_CODE</Key>
        <Body>AND A.CATEGORY_CODE = {0} </Body>
      </DynamicBodys>
      <DynamicBodys>
        <Key>CATEGORY_TYPE</Key>
        <Body>AND A.CATEGORY_TYPE = {0} </Body>
      </DynamicBodys>
      <DynamicBodys>
        <Key>CATEGORY_TYPE2</Key>
        <Body>AND A.CATEGORY_TYPE2 = {0} </Body>
      </DynamicBodys>
      <DynamicBodys>
        <Key>PARENT_CATEGORY_CODE</Key>
        <Body>AND A.PARENT_CATEGORY_CODE = {0} </Body>
      </DynamicBodys>
      <DynamicBodys>
        <Key>LEVEL_DEPTH</Key>
        <Body>AND A.LEVEL_DEPTH = {0} </Body>
      </DynamicBodys>
      <DynamicBodys>
        <Key>SEARCH_CATEGORY_CODE</Key>
        <Body>AND A.SEARCH_CATEGORY_CODE LIKE N'{0}%' </Body>
      </DynamicBodys>
      <DynamicBodys>
        <Key>CATEGORY_NAME</Key>
        <Body>AND A.CATEGORY_NAME LIKE N'%{0}%' </Body>
      </DynamicBodys>
      <DynamicBodys>
        <Key>HIDE</Key>
        <Body>AND A.HIDE = {0} </Body>
      </DynamicBodys>
    </TemplateSQL>
  </DBAgentTemplate>

  <DBAgentTemplate TemplateID="CategorySave">
    <!-- 
    SqlType : SQL의 형태를 지정합니다.
      Example 1:<SqlType>FixedSQL</SqlType> 고정적인 SQL을 지원합니다. 
      Example 2:<SqlType>DynamicSQL</SqlType> 동적인 SQL Type1을 지원합니다.  
    Description : 해당 SQL의 기능설명을 적습니다.
    SQLModifier : 해당 SQL의 작성자(수정자)를 적습니다
    LastModifyDate : 해당 SQL의 마지막 수정일을 적습니다
    -->
    <Information>
      <SqlType>DynamicSQL</SqlType>
      <Description>카테고리 저장</Description>
      <SQLModifier>전상훈</SQLModifier>
      <LastModifyDate>2017-02-02</LastModifyDate>
    </Information>

    <TemplateSQL>
      <!-- FixedSQL : 고정된 SQL이 들어가는 곳입니다. -->
      <FixedSQL>
        <![CDATA[ 
 
	  SET NOCOUNT ON 
	  /**************************************************/
	  /* 광고분류테이블 - T_CATEGORY 저장 -  SAVE QUERY */ 
	  /**************************************************/
	  DECLARE @CATEGORY_CODE                  INT                  = N'{0}'
			    , @CATEGORY_TYPE                  INT                  = CONVERT(INT, CASE WHEN ISNUMERIC('{1}') = 1 THEN '{1}' ELSE '0' END )
			    , @CATEGORY_TYPE2                 INT                  = CONVERT(INT, CASE WHEN ISNUMERIC('{2}') = 1 THEN '{2}' ELSE '0' END )
			    , @PARENT_CATEGORY_CODE           INT                  = CONVERT(INT, CASE WHEN ISNUMERIC('{3}') = 1 THEN '{3}' ELSE '0' END )
			    , @LEVEL_DEPTH                    INT                  = CONVERT(INT, CASE WHEN ISNUMERIC('{4}') = 1 THEN '{4}' ELSE '0' END )
			    , @SEARCH_CATEGORY_CODE           VARCHAR(100)         = N'{5}'
			    , @CATEGORY_NAME                  NVARCHAR(200)        = N'{6}'
			    , @CATEGORY_DISPLAY_NAME          NVARCHAR(200)        = N'{7}'
			    , @ORDER_SEQ                      INT                  = CONVERT(INT, CASE WHEN ISNUMERIC('{8}') = 1 THEN '{8}' ELSE '0' END )
			    , @HIDE                           BIT                  = CONVERT(BIT, CASE WHEN ISNUMERIC('{9}') = 1 THEN '{9}' ELSE '0' END )
			    , @REMARK                         NVARCHAR(200)        = N'{10}'
			    , @INSERT_CODE                    INT                  = {11}
			    , @INSERT_DATE                    DATETIME             = GETDATE() 
			    , @UPDATE_CODE                    INT                  = {11}
			    , @UPDATE_DATE                    DATETIME             = GETDATE() 
          , @TMP_PARENT_CATEGORY_CODE      INT  
          , @SEARCH_ORDER_SEQ              VARCHAR(20)           = RIGHT('0000' + CONVERT(VARCHAR(20), @ORDER_SEQ ),4) + '|'
         
         SET @TMP_PARENT_CATEGORY_CODE =  @PARENT_CATEGORY_CODE
         
    IF NOT EXISTS (SELECT * FROM T_CATEGORY A 
	             WHERE CATEGORY_CODE= @CATEGORY_CODE
              )
    BEGIN
      SELECT @CATEGORY_CODE  = ISNULL(MAX(CATEGORY_CODE),0) + 1 
        FROM T_CATEGORY
    END
   
   SET @SEARCH_CATEGORY_CODE  = CONVERT(VARCHAR(100), @CATEGORY_CODE) + '|'
    WHILE 1=1
    BEGIN
          
        SELECT 
              @SEARCH_CATEGORY_CODE     =  CONVERT(VARCHAR(100), @CATEGORY_CODE) + '|' + @SEARCH_CATEGORY_CODE 
              @SEARCH_ORDER_SEQ        =  RIGHT('0000' + CONVERT(VARCHAR(20), ORDER_SEQ ),4) + '|' +  @SEARCH_ORDER_SEQ  
              @TMP_PARENT_CATEGORY_CODE = PARENT_CATEGORY_CODE
        FROM T_CATEGORY
         
        WHERE CATEGORY_CODE = @TMP_PARENT_CATEGORY_CODE
        
      IF @@ROWCOUNT = 0 GOTO EXCEPTION;
    END
    EXCEPTION:
      
	  UPDATE A 
	  SET  	  CATEGORY_TYPE                  = @CATEGORY_TYPE                 
			   ,  CATEGORY_TYPE2                 = @CATEGORY_TYPE2                		 ,  PARENT_CATEGORY_CODE           = @PARENT_CATEGORY_CODE          
			   ,  LEVEL_DEPTH                    = @LEVEL_DEPTH                   		 ,  SEARCH_CATEGORY_CODE           = @SEARCH_CATEGORY_CODE          
			   ,  CATEGORY_NAME                  = @CATEGORY_NAME                 		 ,  CATEGORY_DISPLAY_NAME          = @CATEGORY_DISPLAY_NAME         
			   ,  ORDER_SEQ                      = @ORDER_SEQ                     		 ,  HIDE                           = @HIDE                          
			   ,  REMARK                         = @REMARK                        		 ,  UPDATE_CODE                    = @UPDATE_CODE                   
			   ,  UPDATE_DATE                    = @UPDATE_DATE 
         ,  SEARCH_ORDER_SEQ               = @SEARCH_ORDER_SEQ
	  FROM T_CATEGORY A 
	  WHERE CATEGORY_CODE= @CATEGORY_CODE
	  IF @@ROWCOUNT = 0
	  BEGIN
      
     
		  INSERT INTO T_CATEGORY
		  (		CATEGORY_CODE                 		, CATEGORY_TYPE                 		, CATEGORY_TYPE2                		, PARENT_CATEGORY_CODE          		
			  , LEVEL_DEPTH                   		, SEARCH_CATEGORY_CODE          		, CATEGORY_NAME                 		, CATEGORY_DISPLAY_NAME         		
			  , ORDER_SEQ                     		, HIDE                          		, REMARK                        		, INSERT_CODE                   		
			  , INSERT_DATE                   		, UPDATE_CODE                   		, UPDATE_DATE                       , SEARCH_ORDER_SEQ                   		
		  )
		  SELECT @CATEGORY_CODE                		, @CATEGORY_TYPE                		, @CATEGORY_TYPE2               	
				  , @PARENT_CATEGORY_CODE         		, @LEVEL_DEPTH                  		, @SEARCH_CATEGORY_CODE         	
				  , @CATEGORY_NAME                		, @CATEGORY_DISPLAY_NAME        		, @ORDER_SEQ                    	
				  , @HIDE                         		, @REMARK                       		, @INSERT_CODE                  	
				  , @INSERT_DATE                  		, @UPDATE_CODE                  		, @UPDATE_DATE
          , @SEARCH_ORDER_SEQ                 	
			
	   END
     SELECT CONVERT(VARCHAR(20), @CATEGORY_CODE) AS DATA
  SET NOCOUNT OFF

      ]]>
      </FixedSQL>
     
    </TemplateSQL>
  </DBAgentTemplate>
  
  
    <DBAgentTemplate TemplateID="CategoryListSave_Cond">
    <!-- 
    SqlType : SQL의 형태를 지정합니다.
      Example 1:<SqlType>FixedSQL</SqlType> 고정적인 SQL을 지원합니다. 
      Example 2:<SqlType>DynamicSQL</SqlType> 동적인 SQL Type1을 지원합니다.  
    Description : 해당 SQL의 기능설명을 적습니다.
    SQLModifier : 해당 SQL의 작성자(수정자)를 적습니다
    LastModifyDate : 해당 SQL의 마지막 수정일을 적습니다
    -->
    <Information>
      <SqlType>DynamicSQL</SqlType>
      <Description>카테고리 저장</Description>
      <SQLModifier>전상훈</SQLModifier>
      <LastModifyDate>2017-02-10</LastModifyDate>
    </Information>

    <TemplateSQL>
      <!-- FixedSQL : 고정된 SQL이 들어가는 곳입니다. -->
      <FixedSQL>
        <![CDATA[ 
 
	
SELECT    CASE WHEN CASE WHEN '{0}' ='' THEN '0' ElSE '{0}' END  <= '0'
               THEN (SELECT MAX(ISNULL( CATEGORY_CODE,0)) + 1 FROM T_CATEGORY)   
               ELSE '{0}' END
        AS CATEGORY_CODE          
	   	, CONVERT(INT, CASE WHEN ISNUMERIC('{1}') = 1 THEN '{1}' ELSE '0' END ) AS CATEGORY_TYPE          
	   	, CONVERT(INT, CASE WHEN ISNUMERIC('{2}') = 1 THEN '{2}' ELSE '0' END ) AS CATEGORY_TYPE2         
	   	, CONVERT(INT, CASE WHEN ISNUMERIC('{3}') = 1 THEN '{3}' ELSE '0' END ) AS PARENT_CATEGORY_CODE   
	   	, CONVERT(INT, CASE WHEN ISNUMERIC('{4}') = 1 THEN '{4}' ELSE '0' END ) LEVEL_DEPTH            
	   	, N'{5}' SEARCH_CATEGORY_CODE   
	   	, N'{6}' CATEGORY_NAME          
	   	, N'{7}' CATEGORY_DISPLAY_NAME  
	   	, CONVERT(INT, CASE WHEN ISNUMERIC('{8}') = 1 THEN '{8}' ELSE '0' END ) ORDER_SEQ              
	   	, N'{9}' SEARCH_ORDER_SEQ       
	   	, CONVERT(BIT, CASE WHEN ISNUMERIC('{10}') = 1 THEN '{10}' ELSE '0' END ) HIDE                   
	   	, N'{11}' REMARK                 
	   	, '{12}' REG_CODE               


  

      ]]>
      </FixedSQL>
     
    </TemplateSQL>
  </DBAgentTemplate>
  
    <DBAgentTemplate TemplateID="CategoryListSave">
    <!-- 
    SqlType : SQL의 형태를 지정합니다.
      Example 1:<SqlType>FixedSQL</SqlType> 고정적인 SQL을 지원합니다. 
      Example 2:<SqlType>DynamicSQL</SqlType> 동적인 SQL Type1을 지원합니다.  
    Description : 해당 SQL의 기능설명을 적습니다.
    SQLModifier : 해당 SQL의 작성자(수정자)를 적습니다
    LastModifyDate : 해당 SQL의 마지막 수정일을 적습니다
    -->
    <Information>
      <SqlType>DynamicSQL</SqlType>
      <Description>카테고리 리스트 저장 저장</Description>
      <SQLModifier>전상훈</SQLModifier>
      <LastModifyDate>2017-02-10</LastModifyDate>
    </Information>

    <TemplateSQL>
      <!-- FixedSQL : 고정된 SQL이 들어가는 곳입니다. -->
      <FixedSQL>
        <![CDATA[ 
 
	  SET NOCOUNT ON 
	  /**************************************************/
	  /* 광고분류테이블 - T_CATEGORY 리스트 저장 -  SAVE QUERY */ 
	  /**************************************************/	 
    
  DECLARE @CATEGORY_CODE INT
DECLARE @TABLE TABLE
(
      
	 CATEGORY_CODE                  INT 
	, CATEGORY_TYPE                  INT 
	, CATEGORY_TYPE2                 INT 
	, PARENT_CATEGORY_CODE           INT 
	, LEVEL_DEPTH                    INT 
	, SEARCH_CATEGORY_CODE           VARCHAR(100)  
	, CATEGORY_NAME                  NVARCHAR(200) 
	, CATEGORY_DISPLAY_NAME          NVARCHAR(200) 
	, ORDER_SEQ                      INT           
	, SEARCH_ORDER_SEQ               VARCHAR(20)   
	, HIDE                           BIT           
	, REMARK                         NVARCHAR(200) 
	, REG_CODE                       INT  
)
INSERT INTO @TABLE
{0}
     


         UPDATE A
            SET   CATEGORY_TYPE                  = B.CATEGORY_TYPE                 
			   ,  CATEGORY_TYPE2                 = B.CATEGORY_TYPE2                		 ,  PARENT_CATEGORY_CODE           = B.PARENT_CATEGORY_CODE          
			   ,  LEVEL_DEPTH                    = B.LEVEL_DEPTH                   		 ,  SEARCH_CATEGORY_CODE           = B.SEARCH_CATEGORY_CODE          
			   ,  CATEGORY_NAME                  = B.CATEGORY_NAME                 		 ,  CATEGORY_DISPLAY_NAME          = B.CATEGORY_DISPLAY_NAME         
			   ,  ORDER_SEQ                      = B.ORDER_SEQ                     		 ,  SEARCH_ORDER_SEQ               = B.SEARCH_ORDER_SEQ
			   ,  HIDE                           = B.HIDE                                ,  REMARK                         = B.REMARK                        		 
			   ,  UPDATE_CODE                    = B.REG_CODE                            ,  UPDATE_DATE                    = GETDATE()
               
			FROM T_CATEGORY A
			INNER JOIN @TABLE B
			ON A.CATEGORY_CODE = B.CATEGORY_CODE

			INSERT INTO T_CATEGORY
			(	  CATEGORY_CODE      , CATEGORY_TYPE         , CATEGORY_TYPE2  , PARENT_CATEGORY_CODE          		
				, LEVEL_DEPTH        , SEARCH_CATEGORY_CODE  , CATEGORY_NAME   , CATEGORY_DISPLAY_NAME         		
				, ORDER_SEQ          , SEARCH_ORDER_SEQ      , HIDE            , REMARK                        		
				, INSERT_CODE        , INSERT_DATE           , UPDATE_CODE     , UPDATE_DATE                   		
			)
			SELECT  A.CATEGORY_CODE    , A.CATEGORY_TYPE         , A.CATEGORY_TYPE2  , A.PARENT_CATEGORY_CODE          		
				, A.LEVEL_DEPTH        , A.SEARCH_CATEGORY_CODE  , A.CATEGORY_NAME   , A.CATEGORY_DISPLAY_NAME         		
				, A.ORDER_SEQ          , A.SEARCH_ORDER_SEQ      , A.HIDE            , A.REMARK                        		
				, A.REG_CODE        , GETDATE()           , REG_CODE     , GETDATE()
			  FROM @TABLE A
			LEFT JOIN T_CATEGORY B
			  ON A.CATEGORY_CODE = B.CATEGORY_CODE
            WHERE B.CATEGORY_CODE IS NULL

    /*검색용 코드 및 검색순서 코드 업데이트*/
     UPDATE A
		    SET SEARCH_CATEGORY_CODE = ISNULL(CONVERT(VARCHAR(20), D.CATEGORY_CODE) + '|','') 
		                             +  ISNULL(CONVERT(VARCHAR(20), C.CATEGORY_CODE) + '|','')
								                 +  ISNULL(CONVERT(VARCHAR(20), B.CATEGORY_CODE) + '|','')
								                 +  ISNULL(CONVERT(VARCHAR(20), A.CATEGORY_CODE) + '|','')
           ,SEARCH_ORDER_SEQ     = ISNULL(CONVERT(VARCHAR(20), D.ORDER_SEQ) + '|','') 
		                            +  ISNULL(CONVERT(VARCHAR(20), C.ORDER_SEQ) + '|','')
								                +  ISNULL(CONVERT(VARCHAR(20), B.ORDER_SEQ) + '|','')
								                +  ISNULL(CONVERT(VARCHAR(20), A.ORDER_SEQ) + '|','')
	    FROM T_CATEGORY A
	    INNER JOIN @TABLE AA
	       ON A.CATEGORY_CODE = AA.CATEGORY_CODE
	    LEFT JOIN T_CATEGORY B
	      ON A.PARENT_CATEGORY_CODE = B.CATEGORY_CODE
	    LEFT JOIN T_CATEGORY C
	      ON B.PARENT_CATEGORY_CODE = C.CATEGORY_CODE
	    LEFT JOIN T_CATEGORY D
	      ON C.PARENT_CATEGORY_CODE = D.CATEGORY_CODE
	  

    DECLARE @ERROR_MESSAGE NVARCHAR(1000) = ''

/*   SELECT @ERROR_MESSAGE = '카테고리(' + A.CATEGORY_NAME + ') 순번이 중복되었습니다.' + CONVERT(VARCHAR(20), ORDER_SEQ)
    FROM T_CATEGORY A
    INNER JOIN 
    (
       SELECT CATEGORY_TYPE, CATEGORY_TYPE2, SEARCH_ORDER_SEQ 
	     FROM T_CATEGORY
	    GROUP BY CATEGORY_TYPE, CATEGORY_TYPE2, SEARCH_ORDER_SEQ 
       HAVING COUNT(1) > 1

     ) B ON A.CATEGORY_TYPE    = B.CATEGORY_TYPE
        AND A.CATEGORY_TYPE2   = B.CATEGORY_TYPE2
	    AND A.SEARCH_ORDER_SEQ = B.SEARCH_ORDER_SEQ
*/

    SELECT @ERROR_MESSAGE AS ERROR_MESSAGE
  SET NOCOUNT OFF

      ]]>
      </FixedSQL>
     
    </TemplateSQL>
  </DBAgentTemplate>

  <DBAgentTemplate TemplateID="CategoryDelete">
    <!-- 
    SqlType : SQL의 형태를 지정합니다.
      Example 1:<SqlType>FixedSQL</SqlType> 고정적인 SQL을 지원합니다. 
      Example 2:<SqlType>DynamicSQL</SqlType> 동적인 SQL Type1을 지원합니다.  
    Description : 해당 SQL의 기능설명을 적습니다.
    SQLModifier : 해당 SQL의 작성자(수정자)를 적습니다
    LastModifyDate : 해당 SQL의 마지막 수정일을 적습니다
    -->
    <Information>
      <SqlType>DynamicSQL</SqlType>
      <Description>카테고리 삭제</Description>
      <SQLModifier>전상훈</SQLModifier>
      <LastModifyDate>2017-02-02</LastModifyDate>
    </Information>

    <TemplateSQL>
      <!-- FixedSQL : 고정된 SQL이 들어가는 곳입니다. -->
      <FixedSQL>
        <![CDATA[ 
 
	  SET NOCOUNT ON 
	  /**************************************************/
	  /* 광고분류테이블 - T_CATEGORY 저장 -  SAVE QUERY */ 
	  /**************************************************/
	  DECLARE @CATEGORY_CODE                  INT                  = N'{0}'
			    , @UPDATE_CODE                    INT                  = {1}
			    
    
    IF EXISTS (SELECT * FROM T_CATEGORY_KEYWORD
                WHERE CATEGORY_CODE = @CATEGORY_CODE)
    BEGIN
      SELECT N'키워드 등록이 되어 있어 삭제를 할수 없습니다. 등록된 키워드를 제거 후 삭제하여 주시기 바랍니다.' ERROR_MESSAGE 
      GOTO EXCEPTION
    END
    
    IF EXISTS (SELECT * FROM T_CATEGORY A
                INNER JOIN T_CATEGORY B
                   ON B.SEARCH_CATEGORY_CODE LIKE A.SEARCH_CATEGORY_CODE + '%'
                  AND  B.SEARCH_CATEGORY_CODE <> A.SEARCH_CATEGORY_CODE
                WHERE A.CATEGORY_CODE = @CATEGORY_CODE)
    BEGIN
      SELECT N'하위 카테고리가 등록이 되어 있어 삭제를 할수 없습니다. 등록된 하위 카테고리를 제거 후 삭제하여 주시기 바랍니다.' ERROR_MESSAGE 
      GOTO EXCEPTION
    END
    
	  DELETE FROM T_CATEGORY 
     WHERE CATEGORY_CODE = @CATEGORY_CODE
    
    SELECT N'' ERROR_MESSAGE
  EXCEPTION:
  SET NOCOUNT OFF


      ]]>
      </FixedSQL>

    </TemplateSQL>
  </DBAgentTemplate>
</DBAgentMultiTemplate>

