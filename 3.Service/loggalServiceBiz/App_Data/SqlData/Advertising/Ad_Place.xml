<?xml version="1.0" encoding="utf-8" ?>
<DBAgentMultiTemplate  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://altsoft.kr/">
  <DBAgentTemplate TemplateID="GetAdPlaceList">
    <!-- 
    SqlType : SQL의 형태를 지정합니다.
      Example 1:<SqlType>FixedSQL</SqlType> 고정적인 SQL을 지원합니다. 
      Example 2:<SqlType>DynamicSQL</SqlType> 동적인 SQL Type1을 지원합니다.  
    Description : 해당 SQL의 기능설명을 적습니다.
    SQLModifier : 해당 SQL의 작성자(수정자)를 적습니다
    LastModifyDate : 해당 SQL의 마지막 수정일을 적습니다
    -->
    <Information>
      <SqlType>DynamicSQL</SqlType>
      <Description>광고 장소 조회</Description>
      <SQLModifier>전상훈</SQLModifier>
      <LastModifyDate>2017-04-11</LastModifyDate>
    </Information>

    <TemplateSQL>
      <!-- FixedSQL : 고정된 SQL이 들어가는 곳입니다. -->
      <FixedSQL>
        <![CDATA[ 
 
	SET NOCOUNT ON 
	/*************************************************/
	/* 광고장소 - T_AD_PLACE 조회 -  SELECT QUERY    */ 
  /* GetAdPlaceList                                */
	/*************************************************/
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED 
	SELECT 
		  A.IDX
		, A.AD_CODE
		, A.CK_CODE
		, A.REGION
		, A.JIBUN_ADDRESS
		, A.ROAD_ADDRESS
		, A.BUILDING
        , A.ZIP_CODE
        , A.LATITUDE
        , A.LONGITUDE
        , A.RADIUS
		, A.INSERT_CODE
        , B.USER_NAME AS INSERT_NAME
		, A.INSERT_DATE
	FROM T_AD_PLACE A 
 INNER JOIN T_MEMBER B
    ON A.INSERT_CODE = B.MEMBER_CODE
  WHERE 1=1 
   #[IDX]
   #[AD_CODE]
   #[CK_CODE]
   #[REGION]
   #[JIBUN_ADDRESS]
   #[ROAD_ADDRESS]
   #[ROAD_ADDRESS]
   #[BUILDING]
   #[ZIP_CODE]
   ORDER BY A.JIBUN_ADDRESS
	SET NOCOUNT OFF 


  ]]>
      </FixedSQL>
      <DynamicBodys>
        <Key>IDX</Key>
        <Body>
          <![CDATA[ AND A.IDX = {0}]]>
        </Body>
      </DynamicBodys>
      <DynamicBodys>
        <Key>AD_CODE</Key>
        <Body>
          <![CDATA[ AND A.AD_CODE = {0}]]>
        </Body>
      </DynamicBodys>
      <DynamicBodys>
        <Key>CK_CODE</Key>
        <Body>
          <![CDATA[ AND A.CK_CODE = {0}]]>
        </Body>
      </DynamicBodys>
      <DynamicBodys>
        <Key>REGION</Key>
        <Body>
          <![CDATA[ AND A.REGION LIKE N'%{0}%']]>
        </Body>
      </DynamicBodys>
      <DynamicBodys>
        <Key>JIBUN_ADDRESS</Key>
        <Body>
          <![CDATA[ AND A.JIBUN_ADDRESS LIKE N'%{0}%']]>
        </Body>
      </DynamicBodys>
      <DynamicBodys>
        <Key>ROAD_ADDRESS</Key>
        <Body>
          <![CDATA[ AND A.ROAD_ADDRESS LIKE N'%{0}%']]>
        </Body>
      </DynamicBodys>
      <DynamicBodys>
        <Key>BUILDING</Key>
        <Body>
          <![CDATA[ AND A.BUILDING LIKE N'%{0}%']]>
        </Body>
      </DynamicBodys>
      <DynamicBodys>
        <Key>ZIP_CODE</Key>
        <Body>
          <![CDATA[ AND A.ZIP_CODE = N'{0}']]>
        </Body>
      </DynamicBodys>
    </TemplateSQL>
  </DBAgentTemplate>

  <DBAgentTemplate TemplateID="AdPlaceSave">
    <!-- 
    SqlType : SQL의 형태를 지정합니다.
      Example 1:<SqlType>FixedSQL</SqlType> 고정적인 SQL을 지원합니다. 
      Example 2:<SqlType>DynamicSQL</SqlType> 동적인 SQL Type1을 지원합니다.  
    Description : 해당 SQL의 기능설명을 적습니다.
    SQLModifier : 해당 SQL의 작성자(수정자)를 적습니다
    LastModifyDate : 해당 SQL의 마지막 수정일을 적습니다
    -->
    <Information>
      <SqlType>DynamicSQL</SqlType>
      <Description>광고 장소 저장</Description>
      <SQLModifier>전상훈</SQLModifier>
      <LastModifyDate>2017-04-11</LastModifyDate>
    </Information>

    <TemplateSQL>
      <!-- FixedSQL : 고정된 SQL이 들어가는 곳입니다. -->
      <FixedSQL>
        <![CDATA[ 
 
	SET NOCOUNT ON 
	/**********************************************/
	/* 광고장소 - T_AD_PLACE 저장 -  SAVE QUERY */ 
	/**********************************************/
	DECLARE @IDX                            BIGINT               = N'{0}'
			  , @AD_CODE                        BIGINT               = CONVERT(BIGINT, CASE WHEN ISNUMERIC('{1}') = 1 THEN '{1}' ELSE NULL END )
			  , @CK_CODE                        INT                  = CONVERT(INT, CASE WHEN ISNUMERIC('{2}') = 1 THEN '{2}' ELSE NULL END )
			  , @REGION                         NVARCHAR(100)        = N'{3}'
			  , @JIBUN_ADDRESS                  NVARCHAR(200)        = N'{4}'
			  , @ROAD_ADDRESS                   NVARCHAR(200)        = N'{5}'
			  , @BUILDING                       NVARCHAR(50)         = N'{6}'
			  , @ZIP_CODE                       VARCHAR(5)           = N'{7}'
			  , @LATITUDE                       NUMERIC(20,16)       = CONVERT(NUMERIC(20,16), CASE WHEN ISNUMERIC('{8}') = 1 THEN '{8}' ELSE NULL END )
			  , @LONGITUDE                     NUMERIC(20,16)       = CONVERT(NUMERIC(20,16), CASE WHEN ISNUMERIC('{9}') = 1 THEN '{9}' ELSE NULL END )
			  , @RADIUS                         INT                  = CONVERT(INT, CASE WHEN ISNUMERIC('{10}') = 1 THEN '{10}' ELSE NULL END )
              , @INSERT_CODE                    INT                  = {11}
			  , @INSERT_DATE                    DATETIME             = GETDATE() 
  
  /*지역 정보 유무 확인 후 없으면 추가 후 T_CATEGORY_KEYWORD 의 CK_CODE 리턴*/
  EXEC SP_ADD_CK_DATA @REGION, @INSERT_CODE, @CK_CODE OUTPUT
	
  UPDATE A 
	SET  AD_CODE           = @AD_CODE         
		,  CK_CODE         = @CK_CODE         ,  REGION        = @REGION                        
		,  JIBUN_ADDRESS   = @JIBUN_ADDRESS   ,  ROAD_ADDRESS  = @ROAD_ADDRESS                  
		,  BUILDING        = @BUILDING        ,  ZIP_CODE      = @ZIP_CODE                      
		,  LATITUDE        = @LATITUDE        ,  LONGITUDE    = @LONGITUDE                    
        , RADIUS = @RADIUS
	
	FROM T_AD_PLACE A 
	WHERE IDX= @IDX
	IF @@ROWCOUNT = 0
	BEGIN
		INSERT INTO T_AD_PLACE
		(     AD_CODE        , CK_CODE      , REGION   
			, JIBUN_ADDRESS  , ROAD_ADDRESS , BUILDING , ZIP_CODE                      		
			, LATITUDE       , LONGITUDE   ,RADIUS    , INSERT_CODE 
            , INSERT_DATE    
			
		)
		SELECT @AD_CODE        , @CK_CODE       
				, @REGION      , @JIBUN_ADDRESS , @ROAD_ADDRESS                 	
				, @BUILDING    , @ZIP_CODE      , @LATITUDE                     	
				, @LONGITUDE  , @RADIUS        , @INSERT_CODE   
                , @INSERT_DATE                  	
			
         SELECT CONVERT(VARCHAR(30), IDENT_CURRENT( 'T_AD_PLACE' ))  AS DATA
         --GOTO EXCEPTION
	 END
   
   UPDATE T_SEARCH_KEYWORD
     SET UPDATE_CODE = @INSERT_CODE
        ,UPDATE_DATE = @INSERT_DATE
   WHERE AD_CODE = @AD_CODE
     AND CK_CODE = @CK_CODE
  IF NOT EXISTS (SELECT * FROM T_SEARCH_KEYWORD
                  WHERE AD_CODE = @AD_CODE
                    AND CK_CODE = @CK_CODE
     )
  BEGIN
      INSERT INTO T_SEARCH_KEYWORD
      (AD_CODE, CK_CODE, INSERT_CODE, INSERT_DATE, UPDATE_CODE, UPDATE_DATE)
      SELECT @AD_CODE, @CK_CODE, @INSERT_CODE, GETDATE() , @INSERT_CODE, GETDATE()
  END
   
  SELECT ''  AS ERROR_MESSAGE
EXCEPTION:
SET NOCOUNT OFF




  ]]>
      </FixedSQL>
    
    </TemplateSQL>
  </DBAgentTemplate>


  <DBAgentTemplate TemplateID="AdPlaceDelete">
    <!-- 
    SqlType : SQL의 형태를 지정합니다.
      Example 1:<SqlType>FixedSQL</SqlType> 고정적인 SQL을 지원합니다. 
      Example 2:<SqlType>DynamicSQL</SqlType> 동적인 SQL Type1을 지원합니다.  
    Description : 해당 SQL의 기능설명을 적습니다.
    SQLModifier : 해당 SQL의 작성자(수정자)를 적습니다
    LastModifyDate : 해당 SQL의 마지막 수정일을 적습니다
    -->
    <Information>
      <SqlType>DynamicSQL</SqlType>
      <Description>광고 장소 삭제</Description>
      <SQLModifier>전상훈</SQLModifier>
      <LastModifyDate>2017-04-11</LastModifyDate>
    </Information>

    <TemplateSQL>
      <!-- FixedSQL : 고정된 SQL이 들어가는 곳입니다. -->
      <FixedSQL>
        <![CDATA[ 
 
	SET NOCOUNT ON 
	/**********************************************/
	/* 광고장소 - T_AD_PLACE 삭제 - DELETE  QUERY */ 
	/**********************************************/
	DECLARE @AD_CODE BIGINT = {0}
  
  DELETE A FROM T_SEARCH_KEYWORD A
   INNER JOIN T_CATEGORY_KEYWORD B
      ON A.CK_CODE = B.CK_CODE
   WHERE AD_CODE = @AD_CODE
     

  DELETE FROM T_AD_PLACE
   WHERE AD_CODE = @AD_CODE
   
   SELECT '' AS ERROR_MESSAGE
  
  ]]>
      </FixedSQL>

    </TemplateSQL>
  </DBAgentTemplate>
</DBAgentMultiTemplate>