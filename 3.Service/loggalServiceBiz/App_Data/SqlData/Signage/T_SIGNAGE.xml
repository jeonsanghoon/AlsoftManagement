<?xml version="1.0" encoding="utf-8" ?>
<DBAgentMultiTemplate  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://altsoft.kr/">

    <DBAgentTemplate TemplateID="GetSignageList">
        <!-- 
    SqlType : SQL의 형태를 지정합니다.
      Example 1:<SqlType>FixedSQL</SqlType> 고정적인 SQL을 지원합니다. 
      Example 2:<SqlType>DynamicSQL</SqlType> 동적인 SQL Type1을 지원합니다.  
    Description : 해당 SQL의 기능설명을 적습니다.
    SQLModifier : 해당 SQL의 작성자(수정자)를 적습니다
    LastModifyDate : 해당 SQL의 마지막 수정일을 적습니다
    -->
        <Information>
            <SqlType>DynamicSQL</SqlType>
            <Description>로컬사인 정보 가져오기</Description>
            <SQLModifier>전상훈</SQLModifier>
            <LastModifyDate>2017-02-28</LastModifyDate>
        </Information>

      <TemplateSQL>
        <!-- FixedSQL : 고정된 SQL이 들어가는 곳입니다. -->
        <FixedSQL>
          <![CDATA[ 
  
    SET NOCOUNT ON 
	/**************************************************************************/
	/* 로컬사인(사이니지)정보 - T_SIGNAGE 조회 -  SELECT QUERY GetSignageList */ 
	/**************************************************************************/
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED 
  DECLARE @PAGE INT = {0}
         ,@PAGE_COUNT INT = {1};

  WITH T_TABLE AS
  (  
  SELECT 
          ROW_NUMBER() OVER(ORDER BY {2}) AS IDX
        , A.SIGN_CODE
        , A.SIGN_NAME
        
        , A.IS_REPRESENT
        , A.REPRE_SIGN_CODE
        , REP.SIGN_NAME AS REPRE_SIGN_NAME
        , ISNULL(E1.SUB_SIGN_CNT,0) AS SUB_SIGN_CNT
        , A.AUTH_NUMBER
        , A.DEVICE_NUMBER
        , A.IS_VERTICAL
        , B.NAME AS IS_VERTICAL_NAME
        , A.PLAY_TIME
        , B1.NAME AS PLAY_TIME_NAME
        , A.ADDRESS1
        , A.ADDRESS2
        , A.ZIP_CODE
        , A.LATITUDE
        , A.LONGITUDE
        , A.RADIUS
        , A.HIDE
        , A.REMARK
        , ISNULL(E.AD_SIGNINFO_CNT,0) AS AD_SIGNINFO_CNT
        , A.COMPANY_CODE
        , AC.COMPANY_NAME
        , A.STORE_CODE
        , AC1.STORE_NAME
        , A.MEMBER_CODE
        , ISNULL(AC2.USER_NAME, A.MEMBER_NAME) AS MEMBER_NAME
        , A.CONTACT_COMPANY_CODE
        , ACC.COMPANY_NAME AS CONTACT_COMPANY_NAME
        , A.CONTACT_STORE_CODE
        , ACC1.STORE_NAME AS CONTACT_STORE_NAME
        , A.CONTACT_CODE
        , ISNULL(ACC2.USER_NAME, A.CONTACT_NAME) AS CONTACT_NAME
        , A.INSERT_CODE
        , C.USER_NAME AS INSERT_NAME
        , A.INSERT_DATE
        , A.UPDATE_CODE
        , D.USER_NAME AS UPDATE_NAME
        , A.UPDATE_DATE
      
	  FROM T_SIGNAGE A 
    LEFT JOIN T_SIGNAGE REP
      ON A.REPRE_SIGN_CODE = REP.SIGN_CODE
     INNER JOIN T_COMMON B
        ON B.MAIN_CODE = 'U005'
	   AND B.SUB_CODE = A.IS_VERTICAL
     INNER JOIN T_COMMON B1
        ON B1.MAIN_CODE = 'U006'
       AND B1.SUB_CODE = A.PLAY_TIME 
     INNER JOIN T_MEMBER C
        ON A.INSERT_CODE = C.MEMBER_CODE
     INNER JOIN T_MEMBER D
        ON A.UPDATE_CODE = D.MEMBER_CODE
      LEFT JOIN (SELECT SIGN_CODE, COUNT(1) AS AD_SIGNINFO_CNT FROM T_AD_SIGNINFO_SIGNAGE A
	             INNER JOIN T_AD_SIGNINFO B
			        ON A.AD_CODE = B.AD_CODE
				  WHERE A.HIDE= 0 AND B.HIDE = 0
	             GROUP BY SIGN_CODE
			   ) E ON A.SIGN_CODE = E.SIGN_CODE
    LEFT JOIN (SELECT REPRE_SIGN_CODE, COUNT(1) AS SUB_SIGN_CNT FROM T_SIGNAGE B
			     GROUP BY REPRE_SIGN_CODE
			   ) E1 ON A.SIGN_CODE = E1.REPRE_SIGN_CODE
    LEFT JOIN T_COMPANY AC
	    ON A.COMPANY_CODE = AC.COMPANY_CODE
	  LEFT JOIN T_STORE AC1
	    ON A.STORE_CODE = AC1.STORE_CODE
    LEFT JOIN T_MEMBER AC2
      ON A.MEMBER_CODE = AC2.MEMBER_CODE
	  LEFT JOIN T_COMPANY ACC
	    ON A.CONTACT_COMPANY_CODE = ACC.COMPANY_CODE
	  LEFT JOIN T_STORE ACC1
	    ON A.STORE_CODE = ACC1.STORE_CODE    
    LEFT JOIN T_MEMBER ACC2
      ON A.CONTACT_CODE = ACC2.MEMBER_CODE
	  WHERE 1=1 
       #[SIGN_CODE]
       #[SIGN_NAME]
       #[IS_REPRESENT]
       #[AUTH_NUMBER]
       #[REPRE_SIGN_CODE]
       #[COMPANY_CODE]
       #[COMPANY_NAME]
       #[STORE_CODE]
       #[STORE_NAME]
       #[MEMBER_CODE]
       #[MEMBER_NAME]
       #[CONTACT_COMPANY_CODE]
       #[CONTACT_COMPANY_NAME]
       #[CONTACT_STORE_CODE]
       #[CONTACT_STORE_NAME]
       #[CONTACT_CODE]
       #[CONTACT_NAME]
       #[AUTH_YN]
       
       #[HIDE]
  )SELECT * , (SELECT COUNT(*) FROM T_TABLE) AS TOTAL_ROWCOUNT  
     FROM T_TABLE	  
     
    WHERE IDX > ((@PAGE-1) * @PAGE_COUNT)
      AND IDX <= @PAGE * @PAGE_COUNT    
	  SET NOCOUNT OFF 

      ]]>
        </FixedSQL>
        <DynamicBodys>
          <Key>SIGN_CODE</Key>
          <Body>AND A.SIGN_CODE = {0} </Body>
        </DynamicBodys>
        
        <DynamicBodys>
          <Key>SIGN_NAME</Key>
          <Body>AND A.SIGN_NAME LIKE N'%{0}%' </Body>
        </DynamicBodys>
        <DynamicBodys>
          <Key>IS_REPRESENT</Key>
          <Body>AND A.IS_REPRESENT = CONVERT(BIT,{0}) </Body>
        </DynamicBodys>
        <DynamicBodys>
          <Key>REPRE_SIGN_CODE</Key>
          <Body>AND A.REPRE_SIGN_CODE = {0} </Body>
        </DynamicBodys>
        <DynamicBodys>
          <Key>AUTH_NUMBER</Key>
          <Body>AND A.AUTH_NUMBER = {0} </Body>
        </DynamicBodys>
        <DynamicBodys>
          <Key>AUTH_YN</Key>
          <Body>AND CASE WHEN AUTH_NUMBER IS NULL THEN 0 ELSE 1 END = {0}  </Body>
        </DynamicBodys>
        <DynamicBodys>
          <Key>COMPANY_CODE</Key>
          <Body>AND A.COMPANY_CODE = {0} </Body>
        </DynamicBodys>
        <DynamicBodys>
          <Key>COMPANY_NAME</Key>
          <Body>AND AC.COMPANY_NAME LIKE N'%{0}%' </Body>
        </DynamicBodys>
        <DynamicBodys>
          <Key>STORE_CODE</Key>
          <Body>AND A.STORE_CODE = {0} </Body>
        </DynamicBodys>
        <DynamicBodys>
          <Key>STORE_NAME</Key>
          <Body>AND AC1.STORE_NAME LIKE N'%{0}%' </Body>
        </DynamicBodys>
        <DynamicBodys>
          <Key>MEMBER_CODE</Key>
          <Body>AND A.MEMBER_CODE = {0} </Body>
        </DynamicBodys>
        <DynamicBodys>
          <Key>MEMBER_NAME</Key>
          <Body>AND ISNULL(AC2.USER_NAME,  A.MEMBER_NAME) LIKE N'%{0}%' </Body>
        </DynamicBodys>
        <DynamicBodys>
          <Key>CONTACT_COMPANY_CODE</Key>
          <Body>AND A.CONTACT_COMPANY_CODE = {0} </Body>
        </DynamicBodys>
        <DynamicBodys>
          <Key>CONTACT_COMPANY_NAME</Key>
          <Body>AND ACC.COMPANY_NAME LIKE N'%{0}%' </Body>
        </DynamicBodys>
        <DynamicBodys>
          <Key>CONTACT_STORE_CODE</Key>
          <Body>AND A.CONTACT_STORE_CODE = {0} </Body>
        </DynamicBodys>
        <DynamicBodys>
          <Key>CONTACT_STORE_NAME</Key>
          <Body>AND ACC1.STORE_NAME LIKE N'%{0}%' </Body>
        </DynamicBodys>
        <DynamicBodys>
          <Key>CONTACT_CODE</Key>
          <Body>AND A.CONTACT_CODE = {0} </Body>
        </DynamicBodys>
        <DynamicBodys>
          <Key>CONTACT_NAME</Key>
          <Body>AND ISNULL(ACC2.USER_NAME,A.CONTACT_NAME) LIKE N'%{0}%' </Body>
        </DynamicBodys>
        <DynamicBodys>
          <Key>HIDE</Key>
          <Body>AND A.HIDE = {0} </Body>
        </DynamicBodys>
     </TemplateSQL>
    </DBAgentTemplate>
    <DBAgentTemplate TemplateID="SignageSave">
        <!-- 
    SqlType : SQL의 형태를 지정합니다.
      Example 1:<SqlType>FixedSQL</SqlType> 고정적인 SQL을 지원합니다. 
      Example 2:<SqlType>DynamicSQL</SqlType> 동적인 SQL Type1을 지원합니다.  
    Description : 해당 SQL의 기능설명을 적습니다.
    SQLModifier : 해당 SQL의 작성자(수정자)를 적습니다
    LastModifyDate : 해당 SQL의 마지막 수정일을 적습니다
    -->
        <Information>
            <SqlType>DynamicSQL</SqlType>
            <Description>로컬사인 정보 저장</Description>
            <SQLModifier>전상훈</SQLModifier>
            <LastModifyDate>2017-02-28</LastModifyDate>
        </Information>

        <TemplateSQL>
            <!-- FixedSQL : 고정된 SQL이 들어가는 곳입니다. -->
            <FixedSQL>
                <![CDATA[ 
	SET NOCOUNT ON 
	/*********************************************************************/
	/* 로컬사인(사이니지)정보 - T_SIGNAGE 저장 -  SAVE QUERY SignageSave */ 
	/*********************************************************************/
	DECLARE @SIGN_CODE                      BIGINT               = N'{0}'
			  , @SIGN_NAME                      NVARCHAR(200)        = N'{1}'
			  , @AUTH_NUMBER                    BIGINT               = CONVERT(BIGINT, CASE WHEN ISNUMERIC('{2}') = 1 THEN '{2}' ELSE NULL END )
			  , @DEVICE_NUMBER                  VARCHAR(100)         = N'{3}'
			  , @IS_VERTICAL                    BIT                  = CONVERT(BIT, CASE WHEN ISNUMERIC('{4}') = 1 THEN '{4}' ELSE NULL END )
			  , @PLAY_TIME                      INT                  = CONVERT(INT, CASE WHEN ISNUMERIC('{5}') = 1 THEN '{5}' ELSE NULL END )
			  , @ADDRESS1                       NVARCHAR(200)        = N'{6}'
			  , @ADDRESS2                       NVARCHAR(200)        = N'{7}'
			  , @ZIP_CODE                       VARCHAR(10)          = N'{8}'
			  , @LATITUDE                       NUMERIC(20,16)       = CONVERT(NUMERIC(20,16), CASE WHEN ISNUMERIC('{9}') = 1 THEN '{9}' ELSE NULL END )
			  , @LONGITUDE                     NUMERIC(20,16)       = CONVERT(NUMERIC(20,16), CASE WHEN ISNUMERIC('{10}') = 1 THEN '{10}' ELSE NULL END )
			  , @RADIUS                         INT                  = CONVERT(INT, CASE WHEN ISNUMERIC('{11}') = 1 THEN '{11}' ELSE NULL END )
			  , @HIDE                           BIT                  = CONVERT(BIT, CASE WHEN ISNUMERIC('{12}') = 1 THEN '{12}' ELSE NULL END )
			  , @REMARK                         NVARCHAR(200)        = N'{13}'
			  , @INSERT_CODE                    INT                  = {14}
			  , @INSERT_DATE                    DATETIME             = GETDATE() 
			  , @UPDATE_CODE                    INT                  = {14}
			  , @UPDATE_DATE                    DATETIME             = GETDATE() 

	UPDATE A 
	SET  	  SIGN_NAME                      = @SIGN_NAME                     
			 ,  AUTH_NUMBER                    = @AUTH_NUMBER                   		 ,  DEVICE_NUMBER                  = @DEVICE_NUMBER                 
			 ,  IS_VERTICAL                    = @IS_VERTICAL                   		 ,  PLAY_TIME                      = @PLAY_TIME                     
			 ,  ADDRESS1                       = @ADDRESS1                      		 ,  ADDRESS2                       = @ADDRESS2                      
			 ,  ZIP_CODE                       = @ZIP_CODE                      		 ,  LATITUDE                       = @LATITUDE                      
			 ,  LONGITUDE                     = @LONGITUDE                    		 ,  RADIUS                         = @RADIUS                        
			 ,  HIDE                           = @HIDE                          		 ,  REMARK                         = @REMARK                        
			 ,  UPDATE_CODE                    = @UPDATE_CODE                   		 ,  UPDATE_DATE                    = @UPDATE_DATE                   
	
	FROM T_SIGNAGE A 
	WHERE SIGN_CODE= @SIGN_CODE
	IF @@ROWCOUNT = 0
	BEGIN
		INSERT INTO T_SIGNAGE
		(		SIGN_NAME                     		, AUTH_NUMBER                   		, DEVICE_NUMBER                 		
			, IS_VERTICAL                   		, PLAY_TIME                     		, ADDRESS1                      		, ADDRESS2                      		
			, ZIP_CODE                      		, LATITUDE                      		, LONGITUDE                    		, RADIUS                        		
			, HIDE                          		, REMARK                        		, INSERT_CODE                   		, INSERT_DATE                   		
			, UPDATE_CODE                   		, UPDATE_DATE                   		
		)
		SELECT @SIGN_NAME                    		, @AUTH_NUMBER                  	
				, @DEVICE_NUMBER                		, @IS_VERTICAL                  		, @PLAY_TIME                    	
				, @ADDRESS1                     		, @ADDRESS2                     		, @ZIP_CODE                     	
				, @LATITUDE                     		, @LONGITUDE                   		, @RADIUS                       	
				, @HIDE                         		, @REMARK                       		, @INSERT_CODE                  	
				, @INSERT_DATE                  		, @UPDATE_CODE                  		, @UPDATE_DATE    
      SELECT  @SIGN_CODE =  IDENT_CURRENT('T_SIGNAGE')
   END
   SELECT  @SIGN_CODE AS DATA
SET NOCOUNT OFF


      ]]>
            </FixedSQL>
        </TemplateSQL>
    </DBAgentTemplate>
  <DBAgentTemplate TemplateID="SignageDelete">
    <!-- 
    SqlType : SQL의 형태를 지정합니다.
      Example 1:<SqlType>FixedSQL</SqlType> 고정적인 SQL을 지원합니다. 
      Example 2:<SqlType>DynamicSQL</SqlType> 동적인 SQL Type1을 지원합니다.  
    Description : 해당 SQL의 기능설명을 적습니다.
    SQLModifier : 해당 SQL의 작성자(수정자)를 적습니다
    LastModifyDate : 해당 SQL의 마지막 수정일을 적습니다
    -->
    <Information>
      <SqlType>DynamicSQL</SqlType>
      <Description>로컬사인 정보 저장</Description>
      <SQLModifier>전상훈</SQLModifier>
      <LastModifyDate>2017-02-28</LastModifyDate>
    </Information>

    <TemplateSQL>
      <!-- FixedSQL : 고정된 SQL이 들어가는 곳입니다. -->
      <FixedSQL>
        <![CDATA[ 
	SET NOCOUNT ON 
	/*********************************************************************/
	/* 로컬사인(사이니지)정보 - T_SIGNAGE 삭제 -  SAVE QUERY SignageSave */ 
	/*********************************************************************/
	DECLARE @SIGN_CODE                      BIGINT               = N'{0}'
	
		  , @UPDATE_CODE                    INT                  = {1}
		  , @UPDATE_DATE                    DATETIME             = GETDATE() 

  IF EXISTS (SELECT * FROM T_AD_SIGNINFO_SIGNAGE WHERE SIGN_CODE = @SIGN_CODE)
  BEGIN
      UPDATE T_AD_SIGNINFO_SIGNAGE
         SET HIDE = 1
            ,UPDATE_CODE = @UPDATE_CODE
            ,UPDATE_DATE = @UPDATE_DATE
      WHERE SIGN_CODE = @SIGN_CODE
      UPDATE T_AD_SIGNINFO
         SET HIDE = 1
            ,UPDATE_CODE = @UPDATE_CODE
            ,UPDATE_DATE = @UPDATE_DATE
      WHERE SIGN_CODE = @SIGN_CODE
  END
  ELSE
  BEGIN
      DELETE FROM T_SIGNAGE WHERE SIGN_CODE = @SIGN_CODE
  END
  SELECT @SIGN_CODE
  SET NOCOUNT OFF
    ]]>
      </FixedSQL>
    </TemplateSQL>
  </DBAgentTemplate>

  <DBAgentTemplate TemplateID="SignageSubCopySave">
    <!-- 
    SqlType : SQL의 형태를 지정합니다.
      Example 1:<SqlType>FixedSQL</SqlType> 고정적인 SQL을 지원합니다. 
      Example 2:<SqlType>DynamicSQL</SqlType> 동적인 SQL Type1을 지원합니다.  
    Description : 해당 SQL의 기능설명을 적습니다.
    SQLModifier : 해당 SQL의 작성자(수정자)를 적습니다
    LastModifyDate : 해당 SQL의 마지막 수정일을 적습니다
    -->
    <Information>
      <SqlType>DynamicSQL</SqlType>
      <Description>로컬사인(사이니지) 서브(복사) 추가</Description>
      <SQLModifier>전상훈</SQLModifier>
      <LastModifyDate>2018-08-14</LastModifyDate>
    </Information>

    <TemplateSQL>
      <!-- FixedSQL : 고정된 SQL이 들어가는 곳입니다. -->
      <FixedSQL>
        <![CDATA[ 
	SET NOCOUNT ON 
	/*****************************************************************************/
	/* 로컬사인(사이니지) 서브 추가(복사) T_SIGNAGE  -  SAVE QUERY SignageSubAdd */ 
	/*****************************************************************************/
	DECLARE @REPRE_SIGN_CODE INT = {0}
      , @REG_CODE INT = {1}
	  , @UPDATE_DATE DATETIME = GETDATE()
	  , @SIGN_CODE INT
	  , @SUB_CNT INT = 0

  SELECT @SUB_CNT = COUNT(*) FROM T_SIGNAGE
  WHERE REPRE_SIGN_CODE = @REPRE_SIGN_CODE 
  
  
  
  INSERT INTO T_SIGNAGE
  (  SIGN_NAME,          AUTH_NUMBER,  IS_REPRESENT, REPRE_SIGN_CODE, DEVICE_NUMBER
   , IS_VERTICAL,        PLAY_TIME,    ADDRESS1,     ADDRESS2,        ZIP_CODE
   , LATITUDE,           LONGITUDE,    RADIUS,       HIDE,            REMARK
   , COMPANY_CODE,       STORE_CODE,   MEMBER_CODE,  MEMBER_NAME,     CONTACT_COMPANY_CODE
   , CONTACT_STORE_CODE, CONTACT_CODE, CONTACT_NAME
   , INSERT_CODE,        INSERT_DATE,  UPDATE_CODE,  UPDATE_DATE
  )
  SELECT 
    SIGN_NAME + '_' + Convert(varchar(20), @SUB_CNT)
  , null AUTH_NUMBER
  , 0 IS_REPRESENT
  , @REPRE_SIGN_CODE REPRE_SIGN_CODE
  , NULL DEVICE_NUMBER
  , IS_VERTICAL, PLAY_TIME,   ADDRESS1,     ADDRESS2
  , ZIP_CODE,    LATITUDE,    LONGITUDE,    RADIUS
  , HIDE,        REMARK,      COMPANY_CODE
  , STORE_CODE,  MEMBER_CODE, MEMBER_NAME
  , CONTACT_COMPANY_CODE, CONTACT_STORE_CODE, CONTACT_CODE
  , CONTACT_NAME
  , @REG_CODE AS INSERT_CODE, @UPDATE_DATE INSERT_DATE
  , @REG_CODE AS UPDATE_CODE, @UPDATE_DATE UPDATE_DATE
   FROM T_SIGNAGE
   WHERE SIGN_CODE = @REPRE_SIGN_CODE
  
  select @SIGN_CODE = IDENT_CURRENT('T_SIGNAGE')
  
  INSERT INTO T_AD_SIGNINFO_SIGNAGE
  (  AD_CODE, SIGN_CODE, FR_DATE, TO_DATE
   ,FR_TIME,     TO_TIME, REMARK,    HIDE,    INSERT_CODE
   ,INSERT_DATE, UPDATE_CODE,        UPDATE_DATE
  )
  
  SELECT AD_CODE,    @SIGN_CODE ,     FR_DATE, TO_DATE
        ,FR_TIME,    TO_TIME, REMARK, HIDE
  	  , @REG_CODE, @UPDATE_DATE, @REG_CODE, @UPDATE_DATE
    FROM T_AD_SIGNINFO_SIGNAGE 
   WHERE SIGN_CODE = @REPRE_SIGN_CODE
  
  INSERT INTO T_SIGNAGE_PLACE
  (SIGN_CODE, PLACE_TYPE, CK_CODE, REGION, JIBUN_ADDRESS, ROAD_ADDRESS, BUILDING, ZIP_CODE
  , LATITUDE, LONGITUDE, RADIUS, REMARK, INSERT_CODE, INSERT_DATE
  )
  SELECT @SIGN_CODE, PLACE_TYPE, CK_CODE, REGION, JIBUN_ADDRESS, ROAD_ADDRESS, BUILDING, ZIP_CODE
       , LATITUDE, LONGITUDE, RADIUS, REMARK, @REG_CODE, @UPDATE_DATE
  FROM T_SIGNAGE_PLACE 
  WHERE SIGN_CODE = @REPRE_SIGN_CODE
  
   SELECT CONVERT(VARCHAR(30), @SIGN_CODE ) AS DATA
  SET NOCOUNT OFF
    ]]>
      </FixedSQL>
    </TemplateSQL>
  </DBAgentTemplate>


  <DBAgentTemplate TemplateID="GetMobileSignageList">
    <!-- 
    SqlType : SQL의 형태를 지정합니다.
      Example 1:<SqlType>FixedSQL</SqlType> 고정적인 SQL을 지원합니다. 
      Example 2:<SqlType>DynamicSQL</SqlType> 동적인 SQL Type1을 지원합니다.  
    Description : 해당 SQL의 기능설명을 적습니다.
    SQLModifier : 해당 SQL의 작성자(수정자)를 적습니다
    LastModifyDate : 해당 SQL의 마지막 수정일을 적습니다
    -->
    <Information>
      <SqlType>DynamicSQL</SqlType>
      <Description>로컬사인(사이니지) 서브(복사) 추가</Description>
      <SQLModifier>전상훈</SQLModifier>
      <LastModifyDate>2018-08-14</LastModifyDate>
    </Information>

    <TemplateSQL>
      <!-- FixedSQL : 고정된 SQL이 들어가는 곳입니다. -->
      <FixedSQL>
        <![CDATA[ 
	SET NOCOUNT ON 
/*************************************************/
/* 모바일에서 사이니지 조회 GetMobileSignageList */
/*************************************************/
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED 
DECLARE @LATITUDE     NUMERIC(20,16) =  CASE WHEN ISNUMERIC('{0}') = 1 THEN '{0}' ELSE '37.5653161' END
	    ,@LONGITUDE    NUMERIC(20,16) = CASE WHEN ISNUMERIC('{1}') = 1 THEN '{1}' ELSE '126.9745883' END
		,@PAGE INT = {2}
		,@PAGE_COUNT INT = {3};     
WITH T_TABLE
AS
(			  
SELECT ROW_NUMBER() OVER(ORDER BY PLACE_DISTANCE) AS IDX
      ,  * FROM(	 
SELECT
      A.SIGN_CODE
    , A.SIGN_NAME
	  , ISNULL(dbo.FN_TO_DISTANCE(@LATITUDE, @LONGITUDE, A.LATITUDE, A.LONGITUDE,'M'),99999999999) AS DISTANCE 
    , B.LATITUDE
	  , B.LONGITUDE
	  , B.RADIUS
	  , B.PLACE_DISTANCE 
	  , A.REMARK
	  , C.COMPANY_NAME
	FROM T_SIGNAGE A
  LEFT JOIN (SELECT SIGN_CODE FROM T_AD_SIGNINFO_SIGNAGE 
                  WHERE HIDE = 0
               GROUP BY SIGN_CODE
			  ) B1 ON A.SIGN_CODE = B1.SIGN_CODE
  LEFT JOIN (
    /* -1 * ( RADIUS ) * 100 - (RADIUS-DISTANCE) 는 반경만으로 비교시 같을 경우 거리가 작은 순으로 조회 하기 위함*/
	SELECT SIGN_CODE,LATITUDE, LONGITUDE
			  , RADIUS, CASE WHEN DISTANCE - RADIUS <= 0 THEN -1 * ( RADIUS ) * 100 - (RADIUS-DISTANCE) ELSE DISTANCE - RADIUS END AS PLACE_DISTANCE
	FROM
	(
		SELECT SIGN_CODE
			, dbo.FN_TO_DISTANCE(@LATITUDE, @LONGITUDE, LATITUDE, LONGITUDE,'M') AS DISTANCE 
      , LATITUDE, LONGITUDE
			, RADIUS
		FROM T_SIGNAGE_PLACE
	) B
	
) B ON A.SIGN_CODE = B.SIGN_CODE
LEFT JOIN T_COMPANY C
   ON A.COMPANY_CODE = C.COMPANY_CODE
WHERE A.IS_REPRESENT = 1
  AND A.AUTH_NUMBER IS NOT NULL
  AND A.HIDE = 0
  #[SIGN_NAME]
) A
) SELECT *, (SELECT COUNT(*) FROM T_TABLE) AS TOTAL_ROWCOUNT  FROM T_TABLE
   WHERE IDX > (@PAGE -1) * @PAGE_COUNT
     AND IDX <= @PAGE * @PAGE_COUNT
  SET NOCOUNT OFF
    ]]>
      </FixedSQL>
      <DynamicBodys>
        <Key>SIGN_NAME</Key>
        <Body>AND A.SIGN_NAME LIKE N'%{0}%' </Body>
      </DynamicBodys>
    </TemplateSQL>
  </DBAgentTemplate>
</DBAgentMultiTemplate>