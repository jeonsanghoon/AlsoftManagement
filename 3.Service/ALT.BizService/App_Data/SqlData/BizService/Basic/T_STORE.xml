<?xml version="1.0" encoding="utf-8" ?>
<DBAgentMultiTemplate  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://altsoft.kr/">

  <DBAgentTemplate TemplateID="GetStoreList">
    <!-- 
    SqlType : SQL의 형태를 지정합니다.
      Example 1:<SqlType>FixedSQL</SqlType> 고정적인 SQL을 지원합니다. 
      Example 2:<SqlType>DynamicSQL</SqlType> 동적인 SQL Type1을 지원합니다.  
    Description : 해당 SQL의 기능설명을 적습니다.
    SQLModifier : 해당 SQL의 작성자(수정자)를 적습니다
    LastModifyDate : 해당 SQL의 마지막 수정일을 적습니다
    -->
    <Information>
      <SqlType>DynamicSQL</SqlType>
      <Description>매장조회</Description>
      <SQLModifier>전상훈</SQLModifier>
      <LastModifyDate>2016-05-30</LastModifyDate>
    </Information>

    <TemplateSQL>
      <!-- FixedSQL : 고정된 SQL이 들어가는 곳입니다. -->
      <FixedSQL>
        <![CDATA[ 
    SET NOCOUNT ON
    /******************************/
    /* 매장조회 조회 GetStoreList */
    /******************************/
    SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

     DECLARE  @PAGE_COUNT INT = {0}
           , @PAGE      INT = {1};
    WITH T_TABLE AS
    (
    SELECT ROW_NUMBER() OVER(ORDER BY {2}) AS SEQ
			, A.COMPANY_CODE
			, B.COMPANY_ID
			, B.COMPANY_NAME
			, A.STORE_CODE
			, A.STORE_ID
			, A.PASSWORD
			, A.STORE_NAME
      , B.COMPANY_TYPE
			, B.COMPANY_TYPE2
      , A.STORE_TYPE
			, C.NAME AS STORE_TYPE_NAME
      , A.PHONE
			, A.MOBILE
			, A.EMAIL
			, A.ADDRESS1
			, A.ADDRESS2
			, A.ZIP_CODE
      , A.LATITUDE
      , A.LONGITUDE
			, A.OWNER_NAME
			, A.OWNER_PHONE
			, A.OWNER_MOBILE
			, A.OWNER_EMAIL
			, A.STATUS
			, D.NAME AS STATUS_NAME
			, A.CULTURE_NAME
			, A.THEME_NAME
      , A.BUSI_REG_NUMBER
			, A.REMARK
			, A.INSERT_CODE
      , E.USER_NAME AS INSERT_NAME
			, A.INSERT_DATE
			, A.UPDATE_CODE
      , F.USER_NAME AS UPDATE_NAME
			, A.UPDATE_DATE  
      , ISNULL(EC.EMPLOYEE_CNT1,0) EMPLOYEE_CNT1
      , ISNULL(EC.EMPLOYEE_CNT2,0) EMPLOYEE_CNT2
      , (SELECT COUNT(*) FROM T_AD WHERE CONTACT_STORE_CODE= STORE_CODE  AND STORE_CODE = A.STORE_CODE) AS AD_CNT0	/*내소유 직접 운영*/
			, (SELECT COUNT(*) FROM T_AD WHERE CONTACT_STORE_CODE <> STORE_CODE AND STORE_CODE = A.STORE_CODE) AS AD_CNT1	/*내소유이면서  대행 */
			, (SELECT COUNT(*) FROM T_AD WHERE CONTACT_STORE_CODE <> STORE_CODE AND CONTACT_STORE_CODE = A.STORE_CODE) AS AD_CNT2 /* 대행 */	
			, (SELECT COUNT(*) FROM T_DEVICE WHERE CONTACT_STORE_CODE= STORE_CODE AND STORE_CODE = A.STORE_CODE) AS DEVICE_CNT0	/*내소유 직접 운영*/
			, (SELECT COUNT(*) FROM T_DEVICE WHERE CONTACT_STORE_CODE <> STORE_CODE AND STORE_CODE = A.STORE_CODE) AS DEVICE_CNT1 /*내소유이면서  대행*/
			, (SELECT COUNT(*) FROM T_DEVICE WHERE CONTACT_STORE_CODE <> STORE_CODE AND CONTACT_STORE_CODE = A.STORE_CODE) AS DEVICE_CNT2 /* 대행 */	
  FROM T_STORE A
 INNER JOIN T_COMPANY B
    ON A.COMPANY_CODE = B.COMPANY_CODE
 INNER JOIN T_COMMON C
    ON C.MAIN_CODE = 'C005'
   AND C.SUB_CODE = A.STORE_TYPE   
 INNER JOIN T_COMMON D
    ON D.MAIN_CODE = 'S001'
   AND D.SUB_CODE = A.STATUS
 INNER JOIN T_MEMBER E
    ON A.INSERT_CODE = E.MEMBER_CODE
 INNER JOIN T_MEMBER F
    ON A.UPDATE_CODE = F.MEMBER_CODE
  LEFT JOIN (SELECT B.STORE_CODE
	              , SUM(CASE WHEN A.HIDE = 0 THEN 1 ELSE 0 END) AS EMPLOYEE_CNT1
				, SUM(CASE WHEN A.HIDE = 1 THEN 1 ELSE 0 END) AS EMPLOYEE_CNT2
		      FROM T_MEMBER A
	                  INNER JOIN T_MEMBER_EMPLOYEE B
				        ON A.MEMBER_CODE = B.MEMBER_CODE
		      GROUP BY B.STORE_CODE
		) EC
		ON A.STORE_CODE = EC.STORE_CODE
		WHERE 1=1
      #[COMPANY_CODE]
      #[COMPANY_ID]
      #[COMPANY_NAME]
      #[STORE_CODE]
      #[STORE_ID]
      #[STORE_NAME]
      #[STATUS]
      #[INSERT_NAME]
     )
           
  SELECT *
       , (SELECT COUNT(1) FROM T_TABLE) TOTAL_ROWCOUNT 
    FROM T_TABLE
   WHERE SEQ > (@PAGE -1) * @PAGE_COUNT
     AND SEQ <= @PAGE * @PAGE_COUNT
   SET NOCOUNT OFF
      ]]>
      </FixedSQL>
      <DynamicBodys>
        <Key>COMPANY_CODE</Key>
        <Body>AND A.COMPANY_CODE = {0} </Body>
      </DynamicBodys>
      <DynamicBodys>
        <Key>COMPANY_ID</Key>
        <Body>AND B.COMPANY_ID = '{0}' </Body>
      </DynamicBodys>
      <DynamicBodys>
        <Key>COMPANY_NAME</Key>
        <Body>AND B.COMPANY_NAME LIKE N'%{0}%' </Body>
      </DynamicBodys>
      <DynamicBodys>
        <Key>STORE_CODE</Key>
        <Body>AND A.STORE_CODE = {0} </Body>
      </DynamicBodys>
      <DynamicBodys>
        <Key>STORE_ID</Key>
        <Body>AND A.STORE_ID = '{0}' </Body>
      </DynamicBodys>
      <DynamicBodys>
        <Key>STORE_NAME</Key>
        <Body>AND A.STORE_NAME LIKE N'%{0}%' </Body>
      </DynamicBodys>
      <DynamicBodys>
        <Key>STATUS</Key>
        <Body>AND A.STATUS = '{0}' </Body>
      </DynamicBodys>
      <DynamicBodys>
        <Key>INSERT_NAME</Key>
        <Body>AND E.USER_NAME LIKE N'%{0}%' </Body>
      </DynamicBodys>
    </TemplateSQL>
  </DBAgentTemplate>

  <DBAgentTemplate TemplateID="StoreSave">
    <!-- 
    SqlType : SQL의 형태를 지정합니다.
      Example 1:<SqlType>FixedSQL</SqlType> 고정적인 SQL을 지원합니다. 
      Example 2:<SqlType>DynamicSQL</SqlType> 동적인 SQL Type1을 지원합니다.  
    Description : 해당 SQL의 기능설명을 적습니다.
    SQLModifier : 해당 SQL의 작성자(수정자)를 적습니다
    LastModifyDate : 해당 SQL의 마지막 수정일을 적습니다
    -->
    <Information>
      <SqlType>DynamicSQL</SqlType>
      <Description>매장(사업장)저장</Description>
      <SQLModifier>전상훈</SQLModifier>
      <LastModifyDate>2017-01-10</LastModifyDate>
    </Information>

    <TemplateSQL>
      <!-- FixedSQL : 고정된 SQL이 들어가는 곳입니다. -->
      <FixedSQL>
        <![CDATA[ 
 	SET NOCOUNT ON 
	/**********************************************/
	/* 회사별매장정보 - T_STORE 저장 -  SAVE QUERY */ 
	/**********************************************/
	DECLARE @STORE_CODE                     INT                  = N'{0}'
			  , @COMPANY_CODE                   INT                  = CONVERT(INT, CASE WHEN ISNUMERIC('{1}') = 1 THEN '{1}' ELSE '0' END )
			  , @STORE_ID                       VARCHAR(30)          = N'{2}'
			  , @PASSWORD                       NVARCHAR(200)        = N'{3}'
			  , @STORE_NAME                     NVARCHAR(100)        = N'{4}'
			  , @STORE_TYPE                     INT                  = CONVERT(INT, CASE WHEN ISNUMERIC('{5}') = 1 THEN '{5}' ELSE '0' END )
			  , @PHONE                          VARCHAR(30)          = N'{6}'
			  , @MOBILE                         VARCHAR(30)          = N'{7}'
			  , @EMAIL                          NVARCHAR(50)         = N'{8}'
			  , @ADDRESS1                       NVARCHAR(200)        = N'{9}'
			  , @ADDRESS2                       NVARCHAR(200)        = N'{10}'
			  , @ZIP_CODE                       VARCHAR(10)          = N'{11}'
			  , @LATITUDE                       NUMERIC(20,16)       = CONVERT(NUMERIC(20,16), CASE WHEN ISNUMERIC('{12}') = 1 THEN '{12}' ELSE NULL END )
			  , @LONGITUDE                      NUMERIC(20,16)       = CONVERT(NUMERIC(20,16), CASE WHEN ISNUMERIC('{13}') = 1 THEN '{13}' ELSE NULL END )
			  , @OWNER_NAME                     NVARCHAR(50)         = N'{14}'
			  , @OWNER_PHONE                    VARCHAR(30)          = N'{15}'
			  , @OWNER_MOBILE                   VARCHAR(30)          = N'{16}'
			  , @OWNER_EMAIL                    VARCHAR(50)          = N'{17}'
			  , @STATUS                         INT                  = CONVERT(INT, CASE WHEN ISNUMERIC('{18}') = 1 THEN '{18}' ELSE '0' END )
			  , @CULTURE_NAME                   VARCHAR(5)           = N'{19}'
			  , @THEME_NAME                     NVARCHAR(50)         = N'{20}'
			  , @TIME_ZONE                      NUMERIC(3,1)         = CONVERT(NUMERIC(3,1), CASE WHEN ISNUMERIC('{21}') = 1 THEN '{21}' ELSE '0' END )
			  , @BUSI_REG_NUMBER                VARCHAR(10)          = N'{22}'
			  , @REMARK                         NVARCHAR(200)        = N'{23}'
			  , @INSERT_CODE                    INT                  = {24}
			  , @INSERT_DATE                    DATETIME             = GETDATE() 
			  , @UPDATE_CODE                    INT                  = {24}
			  , @UPDATE_DATE                    DATETIME             = GETDATE() 
        
  
   SELECT @STORE_CODE = ISNULL(STORE_CODE,0) FROM T_STORE
    WHERE STORE_ID = @STORE_ID AND @STORE_CODE <= 0


	UPDATE A 
	SET  	  COMPANY_CODE                   = @COMPANY_CODE                  
			 ,  STORE_ID                       = @STORE_ID                      		 ,  PASSWORD                       = @PASSWORD                      
			 ,  STORE_NAME                     = @STORE_NAME                    		 ,  STORE_TYPE                     = @STORE_TYPE                    
			 ,  PHONE                          = @PHONE                         		 ,  MOBILE                         = @MOBILE                        
			 ,  EMAIL                          = @EMAIL                         		 ,  ADDRESS1                       = @ADDRESS1                      
			 ,  ADDRESS2                       = @ADDRESS2                      		 ,  ZIP_CODE                       = @ZIP_CODE                      
			 ,  LATITUDE                       = @LATITUDE                      		 ,  LONGITUDE                      = @LONGITUDE                     
			 ,  OWNER_NAME                     = @OWNER_NAME                    		 ,  OWNER_PHONE                    = @OWNER_PHONE                   
			 ,  OWNER_MOBILE                   = @OWNER_MOBILE                  		 ,  OWNER_EMAIL                    = @OWNER_EMAIL                   
			 ,  STATUS                         = @STATUS                        		 ,  CULTURE_NAME                   = @CULTURE_NAME                  
			 ,  THEME_NAME                     = @THEME_NAME                    		 ,  TIME_ZONE                      = @TIME_ZONE                     
			 ,  BUSI_REG_NUMBER                = @BUSI_REG_NUMBER               		 ,  REMARK                         = @REMARK                        
			 ,  UPDATE_CODE                    = @UPDATE_CODE                   		 ,  UPDATE_DATE                    = @UPDATE_DATE                
	FROM T_STORE A 
	WHERE STORE_CODE= @STORE_CODE
	IF @@ROWCOUNT = 0
	BEGIN
		INSERT INTO T_STORE
		(		COMPANY_CODE                  		, STORE_ID                      		, PASSWORD                      		
			, STORE_NAME                    		, STORE_TYPE                    		, PHONE                         		, MOBILE                        		
			, EMAIL                         		, ADDRESS1                      		, ADDRESS2                      		, ZIP_CODE                      		
			, LATITUDE                      		, LONGITUDE                     		, OWNER_NAME                    		, OWNER_PHONE                   		
			, OWNER_MOBILE                  		, OWNER_EMAIL                   		, STATUS                        		, CULTURE_NAME                  		
			, THEME_NAME                    		, TIME_ZONE                     		, BUSI_REG_NUMBER               		, REMARK                        		
			, INSERT_CODE                   		, INSERT_DATE                   		, UPDATE_CODE                   		, UPDATE_DATE                   		
			
		)
		SELECT @COMPANY_CODE                 		, @STORE_ID                     	
				, @PASSWORD                     		, @STORE_NAME                   		, @STORE_TYPE                   	
				, @PHONE                        		, @MOBILE                       		, @EMAIL                        	
				, @ADDRESS1                     		, @ADDRESS2                     		, @ZIP_CODE                     	
				, @LATITUDE                     		, @LONGITUDE                    		, @OWNER_NAME                   	
				, @OWNER_PHONE                  		, @OWNER_MOBILE                 		, @OWNER_EMAIL                  	
				, @STATUS                       		, @CULTURE_NAME                 		, @THEME_NAME                   	
				, @TIME_ZONE                    		, @BUSI_REG_NUMBER              		, @REMARK                       	
				, @INSERT_CODE                  		, @INSERT_DATE                  		, @UPDATE_CODE                  	
				, @UPDATE_DATE                  	
       SELECT @STORE_CODE = IDENT_CURRENT('T_STORE')
	 END
   
   SELECT CONVERT(VARCHAR(20), @STORE_CODE) AS DATA
   
SET NOCOUNT OFF


   
      ]]>
      </FixedSQL>

    </TemplateSQL>
  </DBAgentTemplate>

  <DBAgentTemplate TemplateID="StoreDelete">
    <!-- 
    SqlType : SQL의 형태를 지정합니다.
      Example 1:<SqlType>FixedSQL</SqlType> 고정적인 SQL을 지원합니다. 
      Example 2:<SqlType>DynamicSQL</SqlType> 동적인 SQL Type1을 지원합니다.  
    Description : 해당 SQL의 기능설명을 적습니다.
    SQLModifier : 해당 SQL의 작성자(수정자)를 적습니다
    LastModifyDate : 해당 SQL의 마지막 수정일을 적습니다
    -->
    <Information>
      <SqlType>DynamicSQL</SqlType>
      <Description>사업장삭제</Description>
      <SQLModifier>전상훈</SQLModifier>
      <LastModifyDate>2017-01-10</LastModifyDate>
    </Information>

    <TemplateSQL>
      <!-- FixedSQL : 고정된 SQL이 들어가는 곳입니다. -->
      <FixedSQL>
        <![CDATA[ 
    SET NOCOUNT ON
	SET NOCOUNT ON 
	/*********************************************/
	/*사업장정보 - T_STORE 삭제 -  SAVE QUERY */ 
	/*********************************************/
	DECLARE @STORE_CODE INT = {0}
         ,@UPDATE_CODE INT = {1}
    IF (EXISTS (SELECT * FROM T_MEMBER_EMPLOYEE 
               WHERE STORE_CODE = @STORE_CODE
		       )
           OR 
         EXISTS (SELECT * FROM T_STORE_WEBMENU 
               WHERE STORE_CODE = @STORE_CODE
		       )
        )
           
    BEGIN
	    UPDATE T_STORE
	       SET STATUS = 9 /*폐업*/
	          ,UPDATE_CODE = @UPDATE_CODE
	          ,UPDATE_DATE = GETDATE()
 	     WHERE STORE_CODE = @STORE_CODE
    END
    ELSE
    BEGIN
	    DELETE FROM T_STORE
	    WHERE STORE_CODE = @STORE_CODE
    END
    SELECT '-1' AS DATA

   
    
SET NOCOUNT OFF

   
      ]]>
      </FixedSQL>

    </TemplateSQL>
  </DBAgentTemplate>
</DBAgentMultiTemplate>