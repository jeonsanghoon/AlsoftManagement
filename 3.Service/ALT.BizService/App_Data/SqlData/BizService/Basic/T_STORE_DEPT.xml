<?xml version="1.0" encoding="utf-8" ?>
<DBAgentMultiTemplate  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://altsoft.kr/">

  <DBAgentTemplate TemplateID="GetDeptList">
    <!-- 
    SqlType : SQL의 형태를 지정합니다.
      Example 1:<SqlType>FixedSQL</SqlType> 고정적인 SQL을 지원합니다. 
      Example 2:<SqlType>DynamicSQL</SqlType> 동적인 SQL Type1을 지원합니다.  
    Description : 해당 SQL의 기능설명을 적습니다.
    SQLModifier : 해당 SQL의 작성자(수정자)를 적습니다
    LastModifyDate : 해당 SQL의 마지막 수정일을 적습니다
    -->
    <Information>
      <SqlType>DynamicSQL</SqlType>
      <Description>부서조회</Description>
      <SQLModifier>전상훈</SQLModifier>
      <LastModifyDate>2017-01-16</LastModifyDate>
    </Information>

    <TemplateSQL>
      <!-- FixedSQL : 고정된 SQL이 들어가는 곳입니다. -->
      <FixedSQL>
        <![CDATA[ 
    	
  SET NOCOUNT ON 
	/********************************************************/
	/* 매장별부서테이블 - T_STORE_DEPT 조회 -  SELECT QUERY */ 
	/********************************************************/
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED 
  DECLARE @STORE_CODE INT = {0}
	SELECT 
		  A.STORE_CODE
		, A.DEPT_CODE
		, A.PARENT_DEPT_CODE
		, B.DEPT_NAME AS PARENT_DEPT_NAME
		, A.DEPT_NAME
		, A.LEVEL
		, A.DEPT_SEARCH
		, A.REMARK
		, A.HIDE
		, C.REF_DATA1 AS HIDE_NAME
		, A.INSERT_CODE
		, A.INSERT_DATE
		, A.UPDATE_CODE
		, A.UPDATE_DATE
    , D.USER_NAME AS UPDATE_NAME
	FROM T_STORE_DEPT A 
  LEFT JOIN T_STORE_DEPT B
	  ON A.STORE_CODE = B.STORE_CODE
   AND A.PARENT_DEPT_CODE = B.DEPT_CODE
 INNER JOIN T_COMMON C
	  ON C.MAIN_CODE = 'B003'
	 AND C.SUB_CODE = A.HIDE
 INNER JOIN T_MEMBER D
    ON A.UPDATE_CODE = D.MEMBER_CODE
      
 WHERE A.STORE_CODE = @STORE_CODE
	 #[DEPT_CODE]
   #[DEPT_NAME]
   #[HIDE]
 ORDER BY A.STORE_CODE, A.DEPT_SEARCH
	SET NOCOUNT OFF 
  ]]>
      </FixedSQL>
      <DynamicBodys>
        <Key>DEPT_CODE</Key>
        <Body>AND A.DEPT_CODE = {0} </Body>
      </DynamicBodys>
      <DynamicBodys>
        <Key>DEPT_NAME</Key>
        <Body>AND A.DEPT_NAME LIKE N'%{0}%' </Body>
      </DynamicBodys>
      <DynamicBodys>
        <Key>HIDE</Key>
        <Body>AND A.HIDE = {0} </Body>
      </DynamicBodys>
    </TemplateSQL>
  </DBAgentTemplate>
  <DBAgentTemplate TemplateID="DeptSave">
    <!-- 
    SqlType : SQL의 형태를 지정합니다.
      Example 1:<SqlType>FixedSQL</SqlType> 고정적인 SQL을 지원합니다. 
      Example 2:<SqlType>DynamicSQL</SqlType> 동적인 SQL Type1을 지원합니다.  
    Description : 해당 SQL의 기능설명을 적습니다.
    SQLModifier : 해당 SQL의 작성자(수정자)를 적습니다
    LastModifyDate : 해당 SQL의 마지막 수정일을 적습니다
    -->
    <Information>
      <SqlType>DynamicSQL</SqlType>
      <Description>부서저장</Description>
      <SQLModifier>전상훈</SQLModifier>
      <LastModifyDate>2017-01-16</LastModifyDate>
    </Information>

    <TemplateSQL>
      <!-- FixedSQL : 고정된 SQL이 들어가는 곳입니다. -->
      <FixedSQL>
        <![CDATA[ 


	SET NOCOUNT ON 
	/******************************************************/
	/* 매장별부서테이블 - T_STORE_DEPT 저장 -  SAVE QUERY */ 
	/******************************************************/
	DECLARE @STORE_CODE                     INT                  = N'{0}'
			  , @DEPT_CODE                      INT                  = N'{1}'
			  , @PARENT_DEPT_CODE               INT                  = CONVERT(INT, CASE WHEN ISNUMERIC('{2}') = 1 THEN '{2}' ELSE '0' END )
			  , @DEPT_NAME                      NVARCHAR(100)        = N'{3}'
			  , @LEVEL                          INT                  = CONVERT(INT, CASE WHEN ISNUMERIC('{4}') = 1 THEN '{4}' ELSE NULL END )
			  , @DEPT_SEARCH                    VARCHAR(50)          = N'{5}'
			  , @REMARK                         NVARCHAR(200)        = N'{6}'
			  , @HIDE                           BIT                  = CONVERT(BIT, CASE WHEN ISNUMERIC('{7}') = 1 THEN '{7}' ELSE '0' END )
			  , @INSERT_CODE                    INT                  = {8}
			  , @INSERT_DATE                    DATETIME             = GETDATE() 
			  , @UPDATE_CODE                    INT                  = {8}
			  , @UPDATE_DATE                    DATETIME             = GETDATE() 
        , @SAVE_MODE                      VARCHAR(1)           =N'{9}'
        , @MEMBER_NAME NVARCHAR(100)

  IF @SAVE_MODE = 'D'
  BEGIN
       SELECT @MEMBER_NAME = A.USER_NAME from T_MEMBER A
        INNER JOIN T_MEMBER_EMPLOYEE B
           ON A.MEMBER_CODE = B.MEMBER_CODE
          AND B.STORE_CODE = @STORE_CODE
      IF @@ROWCOUNT > 0
      BEGIN
          SELECT N'해당 부서는 사용 중입니다.(부서명 : ' + @DEPT_NAME  + ', ' + '직원명 : ' +  @MEMBER_NAME +   ')' AS ERROR_MESSAGE
          GOTO EXCEPTION
      END
      
      DELETE T_STORE_DEPT 
       WHERE STORE_CODE = @STORE_CODE
         AND DEPT_CODE  = @DEPT_CODE
  END
  ELSE
  BEGIN
	    UPDATE A 
	    SET  	  PARENT_DEPT_CODE               = @PARENT_DEPT_CODE              		 ,  DEPT_NAME                      = @DEPT_NAME                     
			     ,  LEVEL                          = @LEVEL                         		 ,  DEPT_SEARCH                    = @DEPT_SEARCH                   
			     ,  REMARK                         = @REMARK                        		 ,  HIDE                           = @HIDE                          
			     ,  UPDATE_CODE                    = @UPDATE_CODE                   		 ,  UPDATE_DATE                    = @UPDATE_DATE                   
	
	    FROM T_STORE_DEPT A 
	    WHERE STORE_CODE= @STORE_CODE	  AND DEPT_CODE= @DEPT_CODE
	    IF @@ROWCOUNT = 0
	    BEGIN
  
        SELECT @DEPT_CODE = ISNULL(MAX(DEPT_CODE),0) + 1 
          FROM T_STORE_DEPT
         WHERE STORE_CODE = @STORE_CODE
    
		    INSERT INTO T_STORE_DEPT
		    (		STORE_CODE                    		, DEPT_CODE                     		, PARENT_DEPT_CODE              		, DEPT_NAME                     		
			    , LEVEL                         		, DEPT_SEARCH                   		, REMARK                        		, HIDE                          		
			    , INSERT_CODE                   		, INSERT_DATE                   		, UPDATE_CODE                   		, UPDATE_DATE                   		
		    )
		    SELECT @STORE_CODE                   		, @DEPT_CODE                    		, @PARENT_DEPT_CODE             	
				    , @DEPT_NAME                    		, @LEVEL                        		, @DEPT_SEARCH                  	
				    , @REMARK                       		, @HIDE                         		, @INSERT_CODE                  	
				    , @INSERT_DATE                  		, @UPDATE_CODE                  		, @UPDATE_DATE                  	
			
	     END
      
   END
    SELECT N'' AS ERROR_MESSAGE;
EXCEPTION:
  
SET NOCOUNT OFF

  ]]>
      </FixedSQL>
    </TemplateSQL>
  </DBAgentTemplate>

  <DBAgentTemplate TemplateID="DeptDelete">
    <!-- 
    SqlType : SQL의 형태를 지정합니다.
      Example 1:<SqlType>FixedSQL</SqlType> 고정적인 SQL을 지원합니다. 
      Example 2:<SqlType>DynamicSQL</SqlType> 동적인 SQL Type1을 지원합니다.  
    Description : 해당 SQL의 기능설명을 적습니다.
    SQLModifier : 해당 SQL의 작성자(수정자)를 적습니다
    LastModifyDate : 해당 SQL의 마지막 수정일을 적습니다
    -->
    <Information>
      <SqlType>DynamicSQL</SqlType>
      <Description>부서삭제</Description>
      <SQLModifier>전상훈</SQLModifier>
      <LastModifyDate>2017-01-16</LastModifyDate>
    </Information>

    <TemplateSQL>
      <!-- FixedSQL : 고정된 SQL이 들어가는 곳입니다. -->
      <FixedSQL>
        <![CDATA[ 
	SET NOCOUNT ON 
	/******************************************************/
	/* 매장별부서테이블 - T_STORE_DEPT 삭제 -  Delete QUERY */ 
	/******************************************************/
	DECLARE @STORE_CODE   INT = N'{0}'
			  , @DEPT_CODE    INT = N'{1}'
        , @UPDATE_CODE  INT = N'{2}'
   
   IF EXISTS ( SELECT * FROM T_MEMBER_EMPLOYEE 
                WHERE STORE_CODE = @STORE_CODE 
                  AND DEPT_CODE = @DEPT_CODE)
   BEGIN
      UPDATE T_STORE_DEPT
         SET HIDE = 1
           , UPDATE_CODE = @UPDATE_CODE
           , UPDATE_DATE = GETDATE()
      WHERE STORE_CODE = @STORE_CODE
        AND DEPT_CODE  = @DEPT_CODE
   END
   ELSE
   BEGIN
      DELETE  T_STORE_DEPT
       WHERE STORE_CODE = @STORE_CODE
         AND DEPT_CODE  = @DEPT_CODE
   END
   
   SET NOCOUNT OFF
  ]]>
      </FixedSQL>
    </TemplateSQL>
  </DBAgentTemplate>
</DBAgentMultiTemplate>  