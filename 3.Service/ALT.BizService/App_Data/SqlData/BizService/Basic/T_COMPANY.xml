<?xml version="1.0" encoding="utf-8" ?>
<DBAgentMultiTemplate  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://altsoft.kr/">

  <DBAgentTemplate TemplateID="GetCompanyList">
    <!-- 
    SqlType : SQL의 형태를 지정합니다.
      Example 1:<SqlType>FixedSQL</SqlType> 고정적인 SQL을 지원합니다. 
      Example 2:<SqlType>DynamicSQL</SqlType> 동적인 SQL Type1을 지원합니다.  
    Description : 해당 SQL의 기능설명을 적습니다.
    SQLModifier : 해당 SQL의 작성자(수정자)를 적습니다
    LastModifyDate : 해당 SQL의 마지막 수정일을 적습니다
    -->
    <Information>
      <SqlType>DynamicSQL</SqlType>
      <Description>업체조회</Description>
      <SQLModifier>전상훈</SQLModifier>
      <LastModifyDate>2016-05-30</LastModifyDate>
    </Information>

    <TemplateSQL>
      <!-- FixedSQL : 고정된 SQL이 들어가는 곳입니다. -->
      <FixedSQL>
        <![CDATA[ 
    SET NOCOUNT ON
    /********************************/
    /* 업체조회 조회 GetCompanyList */
    /********************************/
    SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
    DECLARE  @PAGE_COUNT INT = {0}
           , @PAGE      INT = {1};
    WITH T_TABLE AS
    (
    SELECT
          ROW_NUMBER() OVER(ORDER BY {2}) AS SEQ
        , A.COMPANY_CODE
        , A.COMPANY_ID
        , A.PASSWORD
        , A.COMPANY_NAME
        , A.COMPANY_TYPE
	      , B.NAME AS COMPANY_TYPE_NAME
        , A.COMPANY_TYPE2
	      , B2.NAME AS COMPANY_TYPE_NAME2
        , A.PHONE
        , A.MOBILE
        , A.EMAIL
        , A.ADDRESS1
        , A.ADDRESS2
        , A.ZIP_CODE
        , A.LATITUDE
        , A.LONGITUDE
        , A.OWNER_NAME
        , A.OWNER_PHONE
        , A.OWNER_MOBILE
        , A.OWNER_EMAIL
        , A.STORE_SYNC
        , A.STATUS
	      , C.NAME AS STATUS_NAME
        , A.CULTURE_NAME
        , A.THEME_NAME
        , A.REMARK
        , A.INSERT_CODE
	      , D.USER_NAME AS INSERT_NAME
        , A.INSERT_DATE
        , A.UPDATE_CODE
	      , E.USER_NAME AS UPDATE_NAME
        , A.UPDATE_DATE  
        , F.STORE_CNT0 /*준비중*/
		    , F.STORE_CNT1 /*운영중*/
		    , F.STORE_CNT9 /*폐업*/
        , (SELECT COUNT(*) FROM T_AD WHERE CONTACT_COMPANY_CODE = COMPANY_CODE  AND COMPANY_CODE = A.COMPANY_CODE) AS AD_CNT0	/*내소유 직접 운영*/
		    , (SELECT COUNT(*) FROM T_AD WHERE CONTACT_COMPANY_CODE <> COMPANY_CODE AND COMPANY_CODE = A.COMPANY_CODE) AS AD_CNT1	/*내소유이면서  대행 */
			  , (SELECT COUNT(*) FROM T_AD WHERE CONTACT_COMPANY_CODE <> COMPANY_CODE AND CONTACT_COMPANY_CODE = A.COMPANY_CODE) AS AD_CNT2 /* 대행 */	
		    , (SELECT COUNT(*) FROM T_DEVICE WHERE CONTACT_COMPANY_CODE = COMPANY_CODE AND COMPANY_CODE = A.COMPANY_CODE) AS DEVICE_CNT0	/*내소유 직접 운영*/
			  , (SELECT COUNT(*) FROM T_DEVICE WHERE CONTACT_COMPANY_CODE <> COMPANY_CODE AND COMPANY_CODE = A.COMPANY_CODE) AS DEVICE_CNT1 /*내소유이면서  대행*/
		    , (SELECT COUNT(*) FROM T_DEVICE WHERE CONTACT_COMPANY_CODE <> COMPANY_CODE AND CONTACT_COMPANY_CODE = A.COMPANY_CODE) AS DEVICE_CNT2 /* 대행 */	
      FROM T_COMPANY A
     INNER JOIN T_COMMON B
        ON B.MAIN_CODE = 'C003'
       AND B.SUB_CODE = A.COMPANY_TYPE
       INNER JOIN T_COMMON B2
        ON B2.MAIN_CODE = 'C004'
       AND B2.SUB_CODE = A.COMPANY_TYPE2
     INNER JOIN T_COMMON C
        ON C.MAIN_CODE = 'S001'
       AND C.SUB_CODE = A.STATUS
     INNER JOIN T_MEMBER D
        ON A.INSERT_CODE = D.MEMBER_CODE
     INNER JOIN T_MEMBER E
        ON A.UPDATE_CODE = E.MEMBER_CODE
      LEFT JOIN (
	        SELECT COMPANY_CODE 
		            ,SUM(CASE WHEN STATUS = 0 THEN 1 ELSE 0 END) STORE_CNT0
			          ,SUM(CASE WHEN STATUS = 1 THEN 1 ELSE 0 END) STORE_CNT1
			          ,SUM(CASE WHEN STATUS = 9 THEN 1 ELSE 0 END) STORE_CNT9
		        FROM T_STORE
		       GROUP BY COMPANY_CODE
	       ) F ON A.COMPANY_CODE = F.COMPANY_CODE
    WHERE 1=1
      #[COMPANY_CODE]
      #[COMPANY_ID]
      #[COMPANY_NAME]
      #[COMPANY_TYPE]
      #[STATUS]
      #[INSERT_NAME]
     )
  SELECT *, (SELECT COUNT(1) FROM T_TABLE) TOTAL_ROWCOUNT FROM T_TABLE
   WHERE SEQ > (@PAGE -1) * @PAGE_COUNT
     AND SEQ <= @PAGE * @PAGE_COUNT
   SET NOCOUNT OFF
      ]]>
      </FixedSQL>
      <DynamicBodys>
        <Key>COMPANY_CODE</Key>
        <Body>AND A.COMPANY_CODE = {0} </Body>
      </DynamicBodys>
      <DynamicBodys>
        <Key>COMPANY_ID</Key>
        <Body>AND A.COMPANY_ID = '{0}' </Body>
      </DynamicBodys>
      <DynamicBodys>
        <Key>COMPANY_NAME</Key>
        <Body>AND A.COMPANY_TYPE = {0} </Body>
      </DynamicBodys>
      <DynamicBodys>
        <Key>COMPANY_TYPE</Key>
        <Body>AND A.COMPANY_NAME LIKE N'%{0}%' </Body>
      </DynamicBodys>
      <DynamicBodys>
        <Key>STATUS</Key>
        <Body>AND A.STATUS = '{0}' </Body>
      </DynamicBodys>
    <DynamicBodys>
        <Key>INSERT_NAME</Key>
        <Body>AND D.USER_NAME LIKE N'%{0}%' </Body>
      </DynamicBodys>
    </TemplateSQL>
  </DBAgentTemplate>
<DBAgentTemplate TemplateID="CompanySave">
    <!-- 
    SqlType : SQL의 형태를 지정합니다.
      Example 1:<SqlType>FixedSQL</SqlType> 고정적인 SQL을 지원합니다. 
      Example 2:<SqlType>DynamicSQL</SqlType> 동적인 SQL Type1을 지원합니다.  
    Description : 해당 SQL의 기능설명을 적습니다.
    SQLModifier : 해당 SQL의 작성자(수정자)를 적습니다
    LastModifyDate : 해당 SQL의 마지막 수정일을 적습니다
    -->
    <Information>
      <SqlType>DynamicSQL</SqlType>
      <Description>업체저장</Description>
      <SQLModifier>전상훈</SQLModifier>
      <LastModifyDate>2017-01-09</LastModifyDate>
    </Information>

    <TemplateSQL>
      <!-- FixedSQL : 고정된 SQL이 들어가는 곳입니다. -->
      <FixedSQL>
        <![CDATA[ 
    SET NOCOUNT ON
	SET NOCOUNT ON 
	/*********************************************/
	/* 회사정보 - T_COMPANY 저장 -  SAVE QUERY */ 
	/*********************************************/
	DECLARE @COMPANY_CODE                   INT                  = N'{0}'
			  , @COMPANY_ID                     VARCHAR(30)          = N'{1}'
			  , @PASSWORD                       NVARCHAR(200)        = N'{2}'
			  , @COMPANY_NAME                   NVARCHAR(100)        = N'{3}'
			  , @COMPANY_TYPE                   INT                  = CONVERT(INT, CASE WHEN ISNUMERIC('{4}') = 1 THEN '{4}' ELSE '0' END )
			  , @COMPANY_TYPE2                  INT                  = CONVERT(INT, CASE WHEN ISNUMERIC('{5}') = 1 THEN '{5}' ELSE '0' END )
			  , @PHONE                          VARCHAR(30)          = N'{6}'
			  , @MOBILE                         VARCHAR(30)          = N'{7}'
			  , @EMAIL                          NVARCHAR(50)         = N'{8}'
			  , @ADDRESS1                       NVARCHAR(200)        = N'{9}'
			  , @ADDRESS2                       NVARCHAR(200)        = N'{10}'
			  , @ZIP_CODE                       VARCHAR(10)          = N'{11}'
			  , @LATITUDE                       NUMERIC(20,16)       = CONVERT(NUMERIC(20,16), CASE WHEN ISNUMERIC('{12}') = 1 THEN '{12}' ELSE NULL END )
			  , @LONGITUDE                      NUMERIC(20,16)       = CONVERT(NUMERIC(20,16), CASE WHEN ISNUMERIC('{13}') = 1 THEN '{13}' ELSE NULL END )
			  , @OWNER_NAME                     NVARCHAR(50)         = N'{14}'
			  , @OWNER_PHONE                    VARCHAR(30)          = N'{15}'
			  , @OWNER_MOBILE                   VARCHAR(30)          = N'{16}'
			  , @OWNER_EMAIL                    VARCHAR(50)          = N'{17}'
			  , @STORE_SYNC                     BIT                  = CONVERT(BIT, CASE WHEN ISNUMERIC('{18}') = 1 THEN '{18}' ELSE '0' END )
			  , @STATUS                         INT                  = CONVERT(INT, CASE WHEN ISNUMERIC('{19}') = 1 THEN '{19}' ELSE '0' END )
			  , @CULTURE_NAME                   VARCHAR(5)           = N'{20}'
			  , @THEME_NAME                     NVARCHAR(50)         = N'{21}'
			  , @REMARK                         NVARCHAR(200)        = N'{22}'
			  , @INSERT_CODE                    INT                  = {23}
			  , @INSERT_DATE                    DATETIME             = GETDATE() 
			  , @UPDATE_CODE                    INT                  = {23}
			  , @UPDATE_DATE                    DATETIME             = GETDATE() 

  /*IF EXISTS (
          SELECT * FROM T_COMPANY
           WHERE COMPANY_ID = @COMPANY_ID AND @COMPANY_CODE < 0)
  BEGIN
    SELECT N'해당 아이디는 이미 사용중입니다.' AS ERROR_MESSAGE
    GOTO EXCEPTION
  END*/
  
   SELECT @COMPANY_CODE = ISNULL(COMPANY_CODE,0) FROM T_COMPANY
    WHERE COMPANY_ID = @COMPANY_ID AND @COMPANY_CODE < 0
  
	UPDATE A 
	SET  	  COMPANY_ID                     = @COMPANY_ID                    
			 ,  PASSWORD                       = @PASSWORD                      		 ,  COMPANY_NAME                   = @COMPANY_NAME                  
			 ,  COMPANY_TYPE                   = @COMPANY_TYPE                  		 ,  COMPANY_TYPE2                  = @COMPANY_TYPE2                 
			 ,  PHONE                          = @PHONE                         		 ,  MOBILE                         = @MOBILE                        
			 ,  EMAIL                          = @EMAIL                         		 ,  ADDRESS1                       = @ADDRESS1                      
			 ,  ADDRESS2                       = @ADDRESS2                      		 ,  ZIP_CODE                       = @ZIP_CODE                      
			 ,  LATITUDE                       = @LATITUDE                      		 ,  LONGITUDE                      = @LONGITUDE                     
			 ,  OWNER_NAME                     = @OWNER_NAME                    		 ,  OWNER_PHONE                    = @OWNER_PHONE                   
			 ,  OWNER_MOBILE                   = @OWNER_MOBILE                  		 ,  OWNER_EMAIL                    = @OWNER_EMAIL                   
			 ,  STORE_SYNC                     = @STORE_SYNC                    		 ,  STATUS                         = @STATUS                        
			 ,  CULTURE_NAME                   = @CULTURE_NAME                  		 ,  THEME_NAME                     = @THEME_NAME                    
			 ,  REMARK                         = @REMARK                        		 ,  UPDATE_CODE                    = @UPDATE_CODE                   
			 ,  UPDATE_DATE                    = @UPDATE_DATE                          
	FROM T_COMPANY A 
	WHERE COMPANY_CODE= @COMPANY_CODE
	IF @@ROWCOUNT = 0
	BEGIN
		INSERT INTO T_COMPANY
		(		COMPANY_ID                    		, PASSWORD                      		, COMPANY_NAME                  		
			, COMPANY_TYPE                  		, COMPANY_TYPE2                 		, PHONE                         		, MOBILE                        		
			, EMAIL                         		, ADDRESS1                      		, ADDRESS2                      		, ZIP_CODE                      		
			, LATITUDE                      		, LONGITUDE                     		, OWNER_NAME                    		, OWNER_PHONE                   		
			, OWNER_MOBILE                  		, OWNER_EMAIL                   		, STORE_SYNC                    		, STATUS                        		
			, CULTURE_NAME                  		, THEME_NAME                    		, REMARK                        		, INSERT_CODE                   		
			, INSERT_DATE                   		, UPDATE_CODE                   		, UPDATE_DATE                   		
		)
		SELECT @COMPANY_ID                   		, @PASSWORD                     	
				, @COMPANY_NAME                 		, @COMPANY_TYPE                 		, @COMPANY_TYPE2                	
				, @PHONE                        		, @MOBILE                       		, @EMAIL                        	
				, @ADDRESS1                     		, @ADDRESS2                     		, @ZIP_CODE                     	
				, @LATITUDE                     		, @LONGITUDE                    		, @OWNER_NAME                   	
				, @OWNER_PHONE                  		, @OWNER_MOBILE                 		, @OWNER_EMAIL                  	
				, @STORE_SYNC                   		, @STATUS                       		, @CULTURE_NAME                 	
				, @THEME_NAME                   		, @REMARK                       		, @INSERT_CODE                  	
				, @INSERT_DATE                  		, @UPDATE_CODE                  		, @UPDATE_DATE                  	
			
			
      SELECT @COMPANY_CODE = IDENT_CURRENT('T_COMPANY')
	 END
   
    SELECT CONVERT(VARCHAR(20), @COMPANY_CODE) AS DATA
    EXCEPTION:
      
SET NOCOUNT OFF

   
      ]]>
      </FixedSQL>
     
    </TemplateSQL>
  </DBAgentTemplate>

<DBAgentTemplate TemplateID="CompanyDelete">
    <!-- 
    SqlType : SQL의 형태를 지정합니다.
      Example 1:<SqlType>FixedSQL</SqlType> 고정적인 SQL을 지원합니다. 
      Example 2:<SqlType>DynamicSQL</SqlType> 동적인 SQL Type1을 지원합니다.  
    Description : 해당 SQL의 기능설명을 적습니다.
    SQLModifier : 해당 SQL의 작성자(수정자)를 적습니다
    LastModifyDate : 해당 SQL의 마지막 수정일을 적습니다
    -->
    <Information>
      <SqlType>DynamicSQL</SqlType>
      <Description>업체삭제</Description>
      <SQLModifier>전상훈</SQLModifier>
      <LastModifyDate>2017-01-09</LastModifyDate>
    </Information>

    <TemplateSQL>
      <!-- FixedSQL : 고정된 SQL이 들어가는 곳입니다. -->
      <FixedSQL>
        <![CDATA[ 
    SET NOCOUNT ON
	SET NOCOUNT ON 
	/*********************************************/
	/* 회사정보 - T_COMPANY 삭제 -  SAVE QUERY */ 
	/*********************************************/
	DECLARE @COMPANY_CODE INT = {0}
       ,@UPDATE_CODE INT = {1}
    IF EXISTS (SELECT * FROM T_STORE 
               WHERE COMPANY_CODE = @COMPANY_CODE
		       )
    BEGIN
	    UPDATE T_COMPANY
	       SET STATUS = 9 /*폐업*/
	          ,UPDATE_CODE = @UPDATE_CODE
	          ,UPDATE_DATE = GETDATE()
 	     WHERE COMPANY_CODE = @COMPANY_CODE
    END
    ELSE
    BEGIN
	    DELETE FROM T_COMPANY
	    WHERE COMPANY_CODE = @COMPANY_CODE
    END
    SELECT '-1' AS DATA

   
    
SET NOCOUNT OFF

   
      ]]>
      </FixedSQL>
    </TemplateSQL>
  </DBAgentTemplate>
</DBAgentMultiTemplate>